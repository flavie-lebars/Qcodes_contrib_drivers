Search.setIndex({"alltitles": {"2D measurement example using do2d": [[75, "2D-measurement-example-using-do2d"]], "2D scan": [[77, "2D-scan"]], "Addressing multiple channels": [[77, "Addressing-multiple-channels"]], "Aliasing channel names": [[72, "Aliasing-channel-names"]], "Analog (amplitude / phase / frequency) modulation": [[73, "Analog-(amplitude-/-phase-/-frequency)-modulation"]], "Arrangements": [[99, "Arrangements"]], "Autosave": [[99, "Autosave"]], "Basic QDAC Usage": [[77, "Basic-QDAC-Usage"]], "Change spectrometer setup": [[107, "Change-spectrometer-setup"]], "Change the position": [[118, "Change-the-position"], [119, "Change-the-position"]], "Changing the Sensitivity": [[106, null]], "Check current to field conversion": [[70, "Check-current-to-field-conversion"]], "Checking the active terminal": [[115, "Checking-the-active-terminal"]], "Clean up resources": [[116, "Clean-up-resources"]], "Close instrument": [[57, "Close-instrument"], [61, "Close-instrument"], [118, "Close-instrument"], [119, "Close-instrument"], [121, "Close-instrument"]], "Close the instrument": [[55, "Close-the-instrument"], [69, "Close-the-instrument"], [73, "Close-the-instrument"], [107, "Close-the-instrument"]], "Closing the connection": [[102, "Closing-the-connection"]], "Communication performance": [[60, "Communication-performance"]], "Connect different channels on the switch": [[72, "Connect-different-channels-on-the-switch"]], "Connect to device": [[109, "Connect-to-device"]], "Connecting to device": [[59, "Connecting-to-device"]], "Connections": [[98, "Connections"]], "Contents:": [[125, null]], "Contributing": [[125, "contributing"]], "DAQAnalogInputs": [[71, "DAQAnalogInputs"]], "DAQAnalogOutputs": [[71, "DAQAnalogOutputs"]], "DECS<->VISA": [[75, "DECS<->VISA"]], "Default branch is now main": [[125, "default-branch-is-now-main"]], "Device connection": [[108, "Device-connection"]], "Disconnecting": [[117, "Disconnecting"]], "Drivers documentation": [[125, "drivers-documentation"]], "Example for Horiba FHR": [[64, null]], "Example for Single Quantum SNSPD": [[110, null]], "Example notebook for AimTTi EL320P": [[54, null]], "Example notebook for Keithley 6430 SMU": [[66, null]], "Example notebook for the Holzworth HS900B RF synthesizer": [[63, null]], "Example of Proteox Control using QCoDeS driver": [[75, "Example-of-Proteox-Control-using-QCoDeS-driver"]], "Example of Signal Recovery 7270 driver usage": [[109, null]], "Example of the oxford triton driver": [[76, null]], "Example with CopperMountain Model M5180 vector network analyzer": [[59, null]], "Example with ERASynth": [[60, null]], "Example with Lakeshore Model 625 Superconducting Magnet power supply": [[70, null]], "Example with the Agilent N9000A": [[53, null]], "Example with the BlueFors": [[58, null]], "Example with the iTest from Bilt": [[65, null]], "Example with the microwave source SC5521A from Signal Core": [[108, null]], "Examples of how to use drivers": [[124, null]], "Field": [[70, "Field"]], "Gate Leakage Test": [[83, null]], "Gate Leakage using multiple QDAC-IIs": [[84, null]], "Generate a pulsed signal": [[73, "Generate-a-pulsed-signal"]], "Generate a signal": [[73, "Generate-a-signal"]], "Generate and enqueue waveforms": [[67, "Generate-and-enqueue-waveforms"], [68, "Generate-and-enqueue-waveforms"]], "Get spectrometer calibration": [[107, "Get-spectrometer-calibration"]], "Get the current spectrometer setup": [[107, "Get-the-current-spectrometer-setup"]], "Getting started": [[125, "getting-started"]], "Heater configuration": [[69, "Heater-configuration"]], "Import": [[53, "Import"], [58, "Import"], [65, "Import"]], "Imports": [[76, "Imports"]], "Indices and tables": [[125, "indices-and-tables"]], "Initialisation": [[77, "Initialisation"], [117, "Initialisation"]], "Initialization": [[116, "Initialization"]], "Initialization and Connection": [[115, "Initialization-and-Connection"]], "Initialize instrument": [[57, "Initialize-instrument"], [69, "Initialize-instrument"], [111, "Initialize-instrument"]], "Initialize the instrument": [[55, "Initialize-the-instrument"], [73, "Initialize-the-instrument"], [107, "Initialize-the-instrument"], [118, "Initialize-the-instrument"], [119, "Initialize-the-instrument"], [121, "Initialize-the-instrument"]], "Initialize the instrument using its ASRL address": [[61, "Initialize-the-instrument-using-its-ASRL-address"]], "Initiallization": [[53, "Initiallization"], [65, "Initiallization"]], "Installation": [[125, "installation"]], "Instrument and station initialization": [[122, "Instrument-and-station-initialization"]], "Keysight M3202A AWG": [[67, null]], "Keysight M3202A AWG example with digitizer": [[68, null]], "LICENSE": [[125, "license"]], "Let\u2019s have a look at other parameters": [[70, "Let's-have-a-look-at-other-parameters"]], "Load instrument": [[53, "Load-instrument"], [58, "Load-instrument"], [65, "Load-instrument"], [76, "Load-instrument"]], "Look at the names and the labels of the Sxx parameters": [[59, "Look-at-the-names-and-the-labels-of-the-Sxx-parameters"]], "Magnet Control": [[75, "Magnet-Control"]], "Manipulation by numbers": [[99, "Manipulation-by-numbers"]], "Measure a trace": [[59, "Measure-a-trace"]], "Measure resistance of a ~100k\\Omega resistor": [[66, "Measure-resistance-of-a-~100k\\Omega-resistor"]], "Measurement": [[53, "Measurement"], [65, "Measurement"]], "Measurements": [[112, "Measurements"]], "Measurements using trigger": [[106, "Measurements-using-trigger"]], "Model with many channels": [[121, "Model-with-many-channels"]], "Module contents": [[0, "module-qcodes_contrib_drivers.drivers"], [1, "module-qcodes_contrib_drivers.drivers.Advantech"], [2, "module-qcodes_contrib_drivers.drivers.Agilent"], [3, "module-qcodes_contrib_drivers.drivers.AimTTi"], [4, "module-qcodes_contrib_drivers.drivers.Ametek"], [5, "module-qcodes_contrib_drivers.drivers.Andor"], [6, "module-qcodes_contrib_drivers.drivers.Attocube"], [7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib"], [8, "module-qcodes_contrib_drivers.drivers.Aviosys"], [9, "module-qcodes_contrib_drivers.drivers.Bilt"], [10, "module-qcodes_contrib_drivers.drivers.BlueFors"], [11, "module-qcodes_contrib_drivers.drivers.CopperMountain"], [12, "module-qcodes_contrib_drivers.drivers.Cryocon"], [13, "module-qcodes_contrib_drivers.drivers.Cryogenic"], [14, "module-qcodes_contrib_drivers.drivers.DaylightSolutions"], [15, "module-qcodes_contrib_drivers.drivers.ERAInstruments"], [16, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave"], [17, "module-qcodes_contrib_drivers.drivers.Gentec"], [18, "module-qcodes_contrib_drivers.drivers.Holzworth"], [19, "module-qcodes_contrib_drivers.drivers.Horiba"], [20, "module-qcodes_contrib_drivers.drivers.Horiba.private"], [21, "module-qcodes_contrib_drivers.drivers.Keysight"], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common"], [23, "module-qcodes_contrib_drivers.drivers.Lakeshore"], [24, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics"], [25, "module-qcodes_contrib_drivers.drivers.M2"], [26, "module-qcodes_contrib_drivers.drivers.Minicircuits"], [27, "module-qcodes_contrib_drivers.drivers.MontanaInstruments"], [28, "module-qcodes_contrib_drivers.drivers.NationalInstruments"], [29, "module-qcodes_contrib_drivers.drivers.Newport"], [30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments"], [31, "module-qcodes_contrib_drivers.drivers.QDevil"], [32, "module-qcodes_contrib_drivers.drivers.QuTech"], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz"], [34, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private"], [35, "module-qcodes_contrib_drivers.drivers.Shamrock"], [36, "module-qcodes_contrib_drivers.drivers.Siglent"], [37, "module-qcodes_contrib_drivers.drivers.SignalCore"], [38, "module-qcodes_contrib_drivers.drivers.SingleQuantum"], [39, "module-qcodes_contrib_drivers.drivers.Spectrum"], [40, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header"], [41, "module-qcodes_contrib_drivers.drivers.Standa"], [42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems"], [43, "module-qcodes_contrib_drivers.drivers.SwabianInstruments"], [44, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.private"], [45, "module-qcodes_contrib_drivers.drivers.Tektronix"], [46, "module-qcodes_contrib_drivers.drivers.Thermotek"], [47, "module-qcodes_contrib_drivers.drivers.Thorlabs"], [48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private"], [49, "module-qcodes_contrib_drivers.drivers.Valon"], [50, "module-qcodes_contrib_drivers.drivers.Vaunix"], [51, "module-qcodes_contrib_drivers.drivers.ZurichInstruments"], [52, "module-qcodes_contrib_drivers.drivers.physik_instrumente"]], "Monitors": [[99, "Monitors"]], "More settings": [[62, "More-settings"]], "Moving home": [[116, "Moving-home"]], "Moving the rotator": [[116, "Moving-the-rotator"]], "Moving to certain position": [[116, "Moving-to-certain-position"]], "Moving to certain position (asynchronously)": [[116, "Moving-to-certain-position-(asynchronously)"]], "National Instruments Multifunction DAQ example": [[71, null]], "Non-buffer measurements": [[106, "Non-buffer-measurements"]], "Output a SYNC pulse": [[77, "Output-a-SYNC-pulse"]], "Overview of channels": [[77, "Overview-of-channels"]], "Parameters definition": [[122, "Parameters-definition"]], "Performing simple measurements": [[115, "Performing-simple-measurements"]], "Plot": [[122, "Plot"], [122, "id1"]], "Preparing for reading the buffer and measurement": [[106, "Preparing-for-reading-the-buffer-and-measurement"]], "Prerequisites": [[125, "prerequisites"]], "Print a snapshot": [[72, "Print-a-snapshot"]], "Proteox system integration with QCoDeS": [[75, null]], "PyVisa direct use of QDAC-II": [[87, null]], "QCoDeS Example with Gentec Maestro": [[61, null]], "QCoDeS Example with HP8594E": [[62, null]], "QCoDeS Example with Newport AG-UC8 Piezo Motion Controller": [[74, null]], "QCoDeS Example with QDevil_QDAC": [[77, null]], "QCoDeS Example with R&S HMC 8043 Power Supply": [[103, null]], "QCoDeS Example with R&S HMP4040 Power Supply": [[104, null]], "QCoDeS Example with Tektronix Keithley Digital Multimeter DMM6500": [[115, null]], "QCoDeS contrib drivers": [[125, "qcodes-contrib-drivers"]], "QCoDeS example with Attocube ANC300": [[56, null]], "QCoDeS example with Rigol DSG3136B": [[102, null]], "QCoDeS example with Rohe&Schwarz SMW200A": [[105, null]], "QCoDeS example with Thorlabs KLS1550 laser source": [[117, null]], "QCoDeS example with Valon 5015": [[120, null]], "QCoDeS examples of how to use QDAC-I": [[78, null]], "QCoDeS examples of how to use QDAC-II": [[97, null]], "QCoDeS examples of how to use QSwitch": [[100, null]], "QDAC-II 1D & 2D scan": [[88, null]], "QDAC-II 2D diode scan": [[89, null], [96, null]], "QDAC-II arbitrary-waveform generator": [[79, null]], "QDAC-II constant voltage": [[81, null]], "QDAC-II debugging": [[82, null]], "QDAC-II multiple generators per channel": [[86, null]], "QDAC-II sine waves": [[90, null]], "QDAC-II square waves": [[91, null]], "QDAC-II triangle waves": [[94, null]], "QDAC-II trigger chaining": [[80, null]], "QDAC-II virtual gates": [[95, null]], "QDAC-II voltage lists": [[85, null]], "QDAC-II voltage sweep": [[92, null]], "QDevil drivers": [[101, null]], "QSwitch debugging": [[98, null]], "QSwitch usage": [[99, null]], "Qcodes example for National Instruments PXIe-2597 RF Switch": [[72, null]], "Qcodes example for Vaunix LDA step attenuator": [[121, null]], "Qcodes example with Andor DU401 BU2": [[55, null]], "Qcodes example with Aviosys IP Power 9258S": [[57, null]], "Qcodes example with Lakeshore 311": [[69, null]], "Qcodes example with Shamrock SR750": [[107, null]], "Qcodes example with Standa 10MWA168": [[111, null]], "Qcodes example with Swabian Instruments Time Tagger": [[112, null]], "Qcodes example with Thorlabs K10CR1": [[116, null]], "Qcodes example with Thorlabs MFF10x": [[118, null]], "Qcodes example with Thorlabs PRM1Z8": [[119, null]], "Qcodes example with the NI RFSG signal generator driver": [[73, null]], "Quench detection": [[70, "Quench-detection"]], "Querying the active terminal": [[115, "Querying-the-active-terminal"]], "Ramp a single channel step by step and record and plot the current sensor reading": [[77, "Ramp-a-single-channel-step-by-step-and-record-and-plot-the-current-sensor-reading"]], "Ramp one or more channels simultaneously": [[77, "Ramp-one-or-more-channels-simultaneously"]], "Ramp rate": [[70, "Ramp-rate"]], "Read temperatures": [[69, "Read-temperatures"]], "Read the current position": [[118, "Read-the-current-position"], [119, "Read-the-current-position"]], "Read the laser power": [[61, "Read-the-laser-power"]], "Read the power status": [[57, "Read-the-power-status"]], "Readout instrument parameters": [[76, "Readout-instrument-parameters"]], "Resetting the driver and the QDAC": [[77, "Resetting-the-driver-and-the-QDAC"]], "Retrieve digitizer data and plot result": [[68, "Retrieve-digitizer-data-and-plot-result"]], "Rohde & Schwarz ZVL13 Vector Network Analyzer example": [[122, null]], "Run a self test": [[60, "Run-a-self-test"]], "Running a 1D scan": [[102, "Running-a-1D-scan"]], "Save settings": [[121, "Save-settings"]], "Set": [[65, "Set"]], "Set a frequency and turn on": [[60, "Set-a-frequency-and-turn-on"]], "Set parameters": [[108, "Set-parameters"], [121, "Set-parameters"]], "Set the power status": [[57, "Set-the-power-status"]], "Set the wavelength to get the right calibration": [[61, "Set-the-wavelength-to-get-the-right-calibration"]], "Setting the laser output power": [[117, "Setting-the-laser-output-power"]], "Setting up the experiment": [[102, "Setting-up-the-experiment"]], "Setting voltages and reading currents": [[77, "Setting-voltages-and-reading-currents"]], "Setup": [[102, "Setup"]], "Setup and testing": [[102, "Setup-and-testing"]], "Setup db and station for test measurerment": [[59, "Setup-db-and-station-for-test-measurerment"], [109, "Setup-db-and-station-for-test-measurerment"]], "Smooth ramping between voltages": [[77, "Smooth-ramping-between-voltages"]], "Start, Stop, Center and Span": [[62, "Start,-Stop,-Center-and-Span"]], "Stop RF generation": [[73, "Stop-RF-generation"]], "Submodules": [[0, "submodules"], [1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"], [8, "submodules"], [9, "submodules"], [10, "submodules"], [11, "submodules"], [12, "submodules"], [13, "submodules"], [14, "submodules"], [15, "submodules"], [16, "submodules"], [17, "submodules"], [18, "submodules"], [19, "submodules"], [20, "submodules"], [21, "submodules"], [22, "submodules"], [23, "submodules"], [24, "submodules"], [25, "submodules"], [26, "submodules"], [27, "submodules"], [28, "submodules"], [29, "submodules"], [30, "submodules"], [31, "submodules"], [32, "submodules"], [33, "submodules"], [34, "submodules"], [35, "submodules"], [36, "submodules"], [37, "submodules"], [38, "submodules"], [39, "submodules"], [40, "submodules"], [41, "submodules"], [42, "submodules"], [43, "submodules"], [44, "submodules"], [45, "submodules"], [46, "submodules"], [47, "submodules"], [48, "submodules"], [49, "submodules"], [50, "submodules"], [51, "submodules"], [52, "submodules"]], "Subpackages": [[0, "subpackages"], [6, "subpackages"], [19, "subpackages"], [21, "subpackages"], [33, "subpackages"], [39, "subpackages"], [43, "subpackages"], [47, "subpackages"]], "Sweep mode": [[60, "Sweep-mode"]], "Synchronise multiple QDAC-IIs": [[93, null]], "Synchronized measurements": [[112, "Synchronized-measurements"]], "Take a snapshot": [[55, "Take-a-snapshot"], [73, "Take-a-snapshot"], [107, "Take-a-snapshot"]], "Take a spectrum in the accumulate acquisition mode": [[55, "Take-a-spectrum-in-the-accumulate-acquisition-mode"]], "Take a spectrum in the single scan acquisition mode": [[55, "Take-a-spectrum-in-the-single-scan-acquisition-mode"]], "Tektronix AFG3000 series arbitrary function generator": [[113, null]], "Temperature sensors": [[77, "Temperature-sensors"]], "Test the connection": [[102, "Test-the-connection"]], "Testing basic parameters": [[102, "Testing-basic-parameters"]], "The test controller is equiped with two ANM150 axis modules": [[56, "The-test-controller-is-equiped-with-two-ANM150-axis-modules"]], "The \u201cmode\u201d parameter: controlling voltage and current ranges:": [[77, "The-%22mode%22-parameter:-controlling-voltage-and-current-ranges:"]], "This is the power supply used for the Bluefors 4 K stage warmup heater.": [[54, "This-is-the-power-supply-used-for-the-Bluefors-4-K-stage-warmup-heater."]], "Trace acquisition in Network Analyzer Mode": [[122, "Trace-acquisition-in-Network-Analyzer-Mode"]], "Trace acquisition in Spectrum Analyzer Mode": [[122, "Trace-acquisition-in-Spectrum-Analyzer-Mode"]], "Transfer type": [[62, "Transfer-type"]], "Trigger AWGs": [[67, "Trigger-AWGs"]], "Trigger AWGs and digitizer": [[68, "Trigger-AWGs-and-digitizer"]], "Turn of all sockets": [[57, "Turn-of-all-sockets"]], "Turning the laser output on/off": [[117, "Turning-the-laser-output-on/off"]], "Upload an arbitrary waveform to the AFG and output it": [[113, "Upload-an-arbitrary-waveform-to-the-AFG-and-output-it"]], "Usage of the two main parameters": [[114, "Usage-of-the-two-main-parameters"]], "Using the 2000-SCAN scanning card": [[115, "Using-the-2000-SCAN-scanning-card"]], "Using the instrument in an experiment": [[102, "Using-the-instrument-in-an-experiment"]], "Using the instrument\u2019s sweep mode": [[102, "Using-the-instrument's-sweep-mode"]], "Virtual Channels": [[112, "Virtual-Channels"]], "Welcome to QCoDeS Contributed Drivers\u2019s documentation!": [[125, null]], "When \u201cmode\u201d change results in change of voltage range": [[77, "When-%22mode%22-change-results-in-change-of-voltage-range"]], "Zurich Instruments HF2LI example": [[123, null]], "configure digitizer to capture signals": [[68, "configure-digitizer-to-capture-signals"]], "overview over all parameters": [[114, null]], "qcodes_contrib_drivers.drivers package": [[0, null]], "qcodes_contrib_drivers.drivers.Advantech package": [[1, null]], "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751 module": [[1, "module-qcodes_contrib_drivers.drivers.Advantech.PCIE_1751"]], "qcodes_contrib_drivers.drivers.Agilent package": [[2, null]], "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A module": [[2, "module-qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A"]], "qcodes_contrib_drivers.drivers.AimTTi package": [[3, null]], "qcodes_contrib_drivers.drivers.AimTTi.EL320P module": [[3, "module-qcodes_contrib_drivers.drivers.AimTTi.EL320P"]], "qcodes_contrib_drivers.drivers.Ametek package": [[4, null]], "qcodes_contrib_drivers.drivers.Ametek.SR_7270 module": [[4, "module-qcodes_contrib_drivers.drivers.Ametek.SR_7270"]], "qcodes_contrib_drivers.drivers.Andor package": [[5, null]], "qcodes_contrib_drivers.drivers.Andor.DU401 module": [[5, "module-qcodes_contrib_drivers.drivers.Andor.DU401"]], "qcodes_contrib_drivers.drivers.Attocube package": [[6, null]], "qcodes_contrib_drivers.drivers.Attocube.AMC100 module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.AMC100"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300 module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300sim"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350 module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib package": [[7, null]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface module": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3 module": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4 module": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4"]], "qcodes_contrib_drivers.drivers.Aviosys package": [[8, null]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S module": [[8, "module-qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S"]], "qcodes_contrib_drivers.drivers.Bilt package": [[9, null]], "qcodes_contrib_drivers.drivers.Bilt.ITest module": [[9, "module-qcodes_contrib_drivers.drivers.Bilt.ITest"]], "qcodes_contrib_drivers.drivers.BlueFors package": [[10, null]], "qcodes_contrib_drivers.drivers.BlueFors.BlueFors module": [[10, "module-qcodes_contrib_drivers.drivers.BlueFors.BlueFors"]], "qcodes_contrib_drivers.drivers.CMTS5048 module": [[0, "module-qcodes_contrib_drivers.drivers.CMTS5048"]], "qcodes_contrib_drivers.drivers.CopperMountain package": [[11, null]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180 module": [[11, "module-qcodes_contrib_drivers.drivers.CopperMountain.M5180"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048 module": [[11, "module-qcodes_contrib_drivers.drivers.CopperMountain.S5048"]], "qcodes_contrib_drivers.drivers.Cryocon package": [[12, null]], "qcodes_contrib_drivers.drivers.Cryocon.cryocon_26 module": [[12, "module-qcodes_contrib_drivers.drivers.Cryocon.cryocon_26"]], "qcodes_contrib_drivers.drivers.Cryogenic package": [[13, null]], "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C module": [[13, "module-qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C"]], "qcodes_contrib_drivers.drivers.DaylightSolutions package": [[14, null]], "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat module": [[14, "module-qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat"]], "qcodes_contrib_drivers.drivers.ERAInstruments package": [[15, null]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth module": [[15, "module-qcodes_contrib_drivers.drivers.ERAInstruments.erasynth"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave package": [[16, null]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349 module": [[16, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349"]], "qcodes_contrib_drivers.drivers.Gentec package": [[17, null]], "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro module": [[17, "module-qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro"]], "qcodes_contrib_drivers.drivers.Holzworth package": [[18, null]], "qcodes_contrib_drivers.drivers.Holzworth.HS900 module": [[18, "module-qcodes_contrib_drivers.drivers.Holzworth.HS900"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B module": [[18, "module-qcodes_contrib_drivers.drivers.Holzworth.HS9008B"]], "qcodes_contrib_drivers.drivers.Horiba package": [[19, null]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR module": [[19, "module-qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR"]], "qcodes_contrib_drivers.drivers.Horiba.private package": [[20, null]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client module": [[20, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_client"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server module": [[20, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_server"]], "qcodes_contrib_drivers.drivers.Keysight package": [[21, null]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211 module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A"]], "qcodes_contrib_drivers.drivers.Keysight.M3202A module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.M3202A"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common package": [[22, null]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG module": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async module": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG module": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module module": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager module": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager"]], "qcodes_contrib_drivers.drivers.Lakeshore package": [[23, null]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_331 module": [[23, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_331"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_625 module": [[23, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_625"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics package": [[24, null]], "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G module": [[24, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G"]], "qcodes_contrib_drivers.drivers.M2 package": [[25, null]], "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3 module": [[25, "module-qcodes_contrib_drivers.drivers.M2.M2_Solstis_3"]], "qcodes_contrib_drivers.drivers.Minicircuits package": [[26, null]], "qcodes_contrib_drivers.drivers.Minicircuits.ZTM module": [[26, "module-qcodes_contrib_drivers.drivers.Minicircuits.ZTM"]], "qcodes_contrib_drivers.drivers.MontanaInstruments package": [[27, null]], "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation module": [[27, "module-qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation"]], "qcodes_contrib_drivers.drivers.NationalInstruments package": [[28, null]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ module": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.DAQ"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597 module": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654 module": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654"]], "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG module": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.RFSG"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch module": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.Switch"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper module": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper"]], "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument module": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument"]], "qcodes_contrib_drivers.drivers.NationalInstruments.visa_types module": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.visa_types"]], "qcodes_contrib_drivers.drivers.Newport package": [[29, null]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8 module": [[29, "module-qcodes_contrib_drivers.drivers.Newport.AG_UC8"]], "qcodes_contrib_drivers.drivers.OxfordInstruments package": [[30, null]], "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200 module": [[30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120 module": [[30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox module": [[30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton module": [[30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.Triton"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox module": [[30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox"]], "qcodes_contrib_drivers.drivers.QDevil package": [[31, null]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1 module": [[31, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC1"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2 module": [[31, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array module": [[31, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array"]], "qcodes_contrib_drivers.drivers.QDevil.QSwitch module": [[31, "module-qcodes_contrib_drivers.drivers.QDevil.QSwitch"]], "qcodes_contrib_drivers.drivers.QuTech package": [[32, null]], "qcodes_contrib_drivers.drivers.QuTech.D4 module": [[32, "module-qcodes_contrib_drivers.drivers.QuTech.D4"]], "qcodes_contrib_drivers.drivers.QuTech.D5a module": [[32, "module-qcodes_contrib_drivers.drivers.QuTech.D5a"]], "qcodes_contrib_drivers.drivers.QuTech.F1d module": [[32, "module-qcodes_contrib_drivers.drivers.QuTech.F1d"]], "qcodes_contrib_drivers.drivers.QuTech.IVVI module": [[32, "module-qcodes_contrib_drivers.drivers.QuTech.IVVI"]], "qcodes_contrib_drivers.drivers.QuTech.M2j module": [[32, "module-qcodes_contrib_drivers.drivers.QuTech.M2j"]], "qcodes_contrib_drivers.drivers.QuTech.S5i module": [[32, "module-qcodes_contrib_drivers.drivers.QuTech.S5i"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz package": [[33, null]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041 module": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042 module": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043 module": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020 module": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030 module": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030 module": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040 module": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A module": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40 module": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A module": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim module": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13 module": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private package": [[34, null]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x module": [[34, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP module": [[34, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP"]], "qcodes_contrib_drivers.drivers.Shamrock package": [[35, null]], "qcodes_contrib_drivers.drivers.Shamrock.SR750 module": [[35, "module-qcodes_contrib_drivers.drivers.Shamrock.SR750"]], "qcodes_contrib_drivers.drivers.Siglent package": [[36, null]], "qcodes_contrib_drivers.drivers.Siglent.sdg module": [[36, "module-qcodes_contrib_drivers.drivers.Siglent.sdg"]], "qcodes_contrib_drivers.drivers.Siglent.sdg_channel module": [[36, "module-qcodes_contrib_drivers.drivers.Siglent.sdg_channel"]], "qcodes_contrib_drivers.drivers.Siglent.sds module": [[36, "module-qcodes_contrib_drivers.drivers.Siglent.sds"]], "qcodes_contrib_drivers.drivers.Siglent.sdx module": [[36, "module-qcodes_contrib_drivers.drivers.Siglent.sdx"]], "qcodes_contrib_drivers.drivers.SignalCore package": [[37, null]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore module": [[37, "module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore"]], "qcodes_contrib_drivers.drivers.SingleQuantum package": [[38, null]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum module": [[38, "module-qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum"]], "qcodes_contrib_drivers.drivers.Spectrum package": [[39, null]], "qcodes_contrib_drivers.drivers.Spectrum.M4i module": [[39, "module-qcodes_contrib_drivers.drivers.Spectrum.M4i"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header package": [[40, null]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py module": [[40, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs module": [[40, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.regs"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr module": [[40, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr"]], "qcodes_contrib_drivers.drivers.Standa package": [[41, null]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168 module": [[41, "module-qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems package": [[42, null]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580 module": [[42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645 module": [[42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928 module": [[42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570 module": [[42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844 module": [[42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844"]], "qcodes_contrib_drivers.drivers.SwabianInstruments package": [[43, null]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger module": [[43, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private package": [[44, null]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger module": [[44, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger"]], "qcodes_contrib_drivers.drivers.Tektronix package": [[45, null]], "qcodes_contrib_drivers.drivers.Tektronix.AFG3000 module": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.AFG3000"]], "qcodes_contrib_drivers.drivers.Tektronix.AWG520 module": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.AWG520"]], "qcodes_contrib_drivers.drivers.Tektronix.FCA3100 module": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.FCA3100"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan module": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700 module": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430 module": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500 module": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500"]], "qcodes_contrib_drivers.drivers.Thermotek package": [[46, null]], "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p module": [[46, "module-qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p"]], "qcodes_contrib_drivers.drivers.Thorlabs package": [[47, null]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1 module": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.K10CR1"]], "qcodes_contrib_drivers.drivers.Thorlabs.KDC101 module": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.KDC101"]], "qcodes_contrib_drivers.drivers.Thorlabs.KLS1550 module": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.KLS1550"]], "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x module": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.MFF10x"]], "qcodes_contrib_drivers.drivers.Thorlabs.PM100D module": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.PM100D"]], "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8 module": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8"]], "qcodes_contrib_drivers.drivers.Thorlabs.TDC001 module": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.TDC001"]], "qcodes_contrib_drivers.drivers.Thorlabs.private package": [[48, null]], "qcodes_contrib_drivers.drivers.Thorlabs.private.APT module": [[48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.APT"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.CC module": [[48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.CC"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.LS module": [[48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.LS"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.kinesis module": [[48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.kinesis"]], "qcodes_contrib_drivers.drivers.Valon package": [[49, null]], "qcodes_contrib_drivers.drivers.Valon.Valon_5015 module": [[49, "module-qcodes_contrib_drivers.drivers.Valon.Valon_5015"]], "qcodes_contrib_drivers.drivers.Vaunix package": [[50, null]], "qcodes_contrib_drivers.drivers.Vaunix.LDA module": [[50, "module-qcodes_contrib_drivers.drivers.Vaunix.LDA"]], "qcodes_contrib_drivers.drivers.ZurichInstruments package": [[51, null]], "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI module": [[51, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8 module": [[51, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8"]], "qcodes_contrib_drivers.drivers.physik_instrumente package": [[52, null]], "qcodes_contrib_drivers.drivers.physik_instrumente.mercury module": [[52, "module-qcodes_contrib_drivers.drivers.physik_instrumente.mercury"]]}, "docnames": ["api/generated/qcodes_contrib_drivers.drivers", "api/generated/qcodes_contrib_drivers.drivers.Advantech", "api/generated/qcodes_contrib_drivers.drivers.Agilent", "api/generated/qcodes_contrib_drivers.drivers.AimTTi", "api/generated/qcodes_contrib_drivers.drivers.Ametek", "api/generated/qcodes_contrib_drivers.drivers.Andor", "api/generated/qcodes_contrib_drivers.drivers.Attocube", "api/generated/qcodes_contrib_drivers.drivers.Attocube.ANC350Lib", "api/generated/qcodes_contrib_drivers.drivers.Aviosys", "api/generated/qcodes_contrib_drivers.drivers.Bilt", "api/generated/qcodes_contrib_drivers.drivers.BlueFors", "api/generated/qcodes_contrib_drivers.drivers.CopperMountain", "api/generated/qcodes_contrib_drivers.drivers.Cryocon", "api/generated/qcodes_contrib_drivers.drivers.Cryogenic", "api/generated/qcodes_contrib_drivers.drivers.DaylightSolutions", "api/generated/qcodes_contrib_drivers.drivers.ERAInstruments", "api/generated/qcodes_contrib_drivers.drivers.GeneralMicrowave", "api/generated/qcodes_contrib_drivers.drivers.Gentec", "api/generated/qcodes_contrib_drivers.drivers.Holzworth", "api/generated/qcodes_contrib_drivers.drivers.Horiba", "api/generated/qcodes_contrib_drivers.drivers.Horiba.private", "api/generated/qcodes_contrib_drivers.drivers.Keysight", "api/generated/qcodes_contrib_drivers.drivers.Keysight.SD_common", "api/generated/qcodes_contrib_drivers.drivers.Lakeshore", "api/generated/qcodes_contrib_drivers.drivers.LighthousePhotonics", "api/generated/qcodes_contrib_drivers.drivers.M2", "api/generated/qcodes_contrib_drivers.drivers.Minicircuits", "api/generated/qcodes_contrib_drivers.drivers.MontanaInstruments", "api/generated/qcodes_contrib_drivers.drivers.NationalInstruments", "api/generated/qcodes_contrib_drivers.drivers.Newport", "api/generated/qcodes_contrib_drivers.drivers.OxfordInstruments", "api/generated/qcodes_contrib_drivers.drivers.QDevil", "api/generated/qcodes_contrib_drivers.drivers.QuTech", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.private", "api/generated/qcodes_contrib_drivers.drivers.Shamrock", "api/generated/qcodes_contrib_drivers.drivers.Siglent", "api/generated/qcodes_contrib_drivers.drivers.SignalCore", "api/generated/qcodes_contrib_drivers.drivers.SingleQuantum", "api/generated/qcodes_contrib_drivers.drivers.Spectrum", "api/generated/qcodes_contrib_drivers.drivers.Spectrum.py_header", "api/generated/qcodes_contrib_drivers.drivers.Standa", "api/generated/qcodes_contrib_drivers.drivers.StanfordResearchSystems", "api/generated/qcodes_contrib_drivers.drivers.SwabianInstruments", "api/generated/qcodes_contrib_drivers.drivers.SwabianInstruments.private", "api/generated/qcodes_contrib_drivers.drivers.Tektronix", "api/generated/qcodes_contrib_drivers.drivers.Thermotek", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs.private", "api/generated/qcodes_contrib_drivers.drivers.Valon", "api/generated/qcodes_contrib_drivers.drivers.Vaunix", "api/generated/qcodes_contrib_drivers.drivers.ZurichInstruments", "api/generated/qcodes_contrib_drivers.drivers.physik_instrumente", "examples/Agilent_N9000A", "examples/AimTTi_EL320P", "examples/Andor_DU401", "examples/Attocube_ANC300", "examples/Aviosys_IP_Power_9258S", "examples/BlueFors", "examples/CopperMountain_M5180", "examples/ERASynth", "examples/Gentec_Maestro", "examples/HP/HP8594E", "examples/Holzworth_HS900", "examples/Horiba_FHR", "examples/ITest", "examples/Keithley_6430", "examples/Keysight_M3202A", "examples/Keysight_M3202A with digitizer", "examples/Lakeshore_311", "examples/Lakeshore_625", "examples/NationalInstruments_DAQ", "examples/NationalInstruments_PXIe_2597", "examples/NationalInstruments_RFSG", "examples/Newport_AG-UC8", "examples/OxfordInstruments_Proteox", "examples/OxfordTriton", "examples/QDevil/QDAC1/QCodes example with QDevil_QDAC", "examples/QDevil/QDAC1/index", "examples/QDevil/QDAC2/AWG", "examples/QDevil/QDAC2/Chaining", "examples/QDevil/QDAC2/DC_Constant", "examples/QDevil/QDAC2/Debugging", "examples/QDevil/QDAC2/GateLeakage", "examples/QDevil/QDAC2/GateLeakageMultipleQDACs", "examples/QDevil/QDAC2/List", "examples/QDevil/QDAC2/MultiGenerator", "examples/QDevil/QDAC2/PyvisaAwg", "examples/QDevil/QDAC2/Scan", "examples/QDevil/QDAC2/Scan2DDiode", "examples/QDevil/QDAC2/Sine", "examples/QDevil/QDAC2/Square", "examples/QDevil/QDAC2/Sweep", "examples/QDevil/QDAC2/SyncMultipleQDACs", "examples/QDevil/QDAC2/Triangle", "examples/QDevil/QDAC2/VirtualGates", "examples/QDevil/QDAC2/do2dScan", "examples/QDevil/QDAC2/index", "examples/QDevil/QSwitch/Debugging", "examples/QDevil/QSwitch/Usage", "examples/QDevil/QSwitch/index", "examples/QDevil/index", "examples/Rigol_DSG3136B", "examples/Rohde_Schwarz_HMC8043", "examples/Rohde_Schwarz_HMP4040", "examples/Rohde_Schwarz_SMW200A", "examples/SR844", "examples/Shamrock_SR750", "examples/SignalCore", "examples/SignalRecovery_7270", "examples/SingleQuantum", "examples/Standa_10MWA168", "examples/SwabianInstruments_TimeTagger", "examples/Tektronix_AFG3000_series", "examples/Tektronix_FCA3100", "examples/Tektronix_Keithley_6500", "examples/Thorlabs_K10CR1", "examples/Thorlabs_KLS1550", "examples/Thorlabs_MFF10x", "examples/Thorlabs_PRM1Z8", "examples/Valon_5015", "examples/Vaunix_LDA", "examples/ZVL13", "examples/ZurichInstruments_HF2LI", "examples/index", "index"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["api/generated/qcodes_contrib_drivers.drivers.rst", "api/generated/qcodes_contrib_drivers.drivers.Advantech.rst", "api/generated/qcodes_contrib_drivers.drivers.Agilent.rst", "api/generated/qcodes_contrib_drivers.drivers.AimTTi.rst", "api/generated/qcodes_contrib_drivers.drivers.Ametek.rst", "api/generated/qcodes_contrib_drivers.drivers.Andor.rst", "api/generated/qcodes_contrib_drivers.drivers.Attocube.rst", "api/generated/qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.rst", "api/generated/qcodes_contrib_drivers.drivers.Aviosys.rst", "api/generated/qcodes_contrib_drivers.drivers.Bilt.rst", "api/generated/qcodes_contrib_drivers.drivers.BlueFors.rst", "api/generated/qcodes_contrib_drivers.drivers.CopperMountain.rst", "api/generated/qcodes_contrib_drivers.drivers.Cryocon.rst", "api/generated/qcodes_contrib_drivers.drivers.Cryogenic.rst", "api/generated/qcodes_contrib_drivers.drivers.DaylightSolutions.rst", "api/generated/qcodes_contrib_drivers.drivers.ERAInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.GeneralMicrowave.rst", "api/generated/qcodes_contrib_drivers.drivers.Gentec.rst", "api/generated/qcodes_contrib_drivers.drivers.Holzworth.rst", "api/generated/qcodes_contrib_drivers.drivers.Horiba.rst", "api/generated/qcodes_contrib_drivers.drivers.Horiba.private.rst", "api/generated/qcodes_contrib_drivers.drivers.Keysight.rst", "api/generated/qcodes_contrib_drivers.drivers.Keysight.SD_common.rst", "api/generated/qcodes_contrib_drivers.drivers.Lakeshore.rst", "api/generated/qcodes_contrib_drivers.drivers.LighthousePhotonics.rst", "api/generated/qcodes_contrib_drivers.drivers.M2.rst", "api/generated/qcodes_contrib_drivers.drivers.Minicircuits.rst", "api/generated/qcodes_contrib_drivers.drivers.MontanaInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.NationalInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.Newport.rst", "api/generated/qcodes_contrib_drivers.drivers.OxfordInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.QDevil.rst", "api/generated/qcodes_contrib_drivers.drivers.QuTech.rst", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.rst", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.private.rst", "api/generated/qcodes_contrib_drivers.drivers.Shamrock.rst", "api/generated/qcodes_contrib_drivers.drivers.Siglent.rst", "api/generated/qcodes_contrib_drivers.drivers.SignalCore.rst", "api/generated/qcodes_contrib_drivers.drivers.SingleQuantum.rst", "api/generated/qcodes_contrib_drivers.drivers.Spectrum.rst", "api/generated/qcodes_contrib_drivers.drivers.Spectrum.py_header.rst", "api/generated/qcodes_contrib_drivers.drivers.Standa.rst", "api/generated/qcodes_contrib_drivers.drivers.StanfordResearchSystems.rst", "api/generated/qcodes_contrib_drivers.drivers.SwabianInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.SwabianInstruments.private.rst", "api/generated/qcodes_contrib_drivers.drivers.Tektronix.rst", "api/generated/qcodes_contrib_drivers.drivers.Thermotek.rst", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs.rst", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs.private.rst", "api/generated/qcodes_contrib_drivers.drivers.Valon.rst", "api/generated/qcodes_contrib_drivers.drivers.Vaunix.rst", "api/generated/qcodes_contrib_drivers.drivers.ZurichInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.physik_instrumente.rst", "examples/Agilent_N9000A.ipynb", "examples/AimTTi_EL320P.ipynb", "examples/Andor_DU401.ipynb", "examples/Attocube_ANC300.ipynb", "examples/Aviosys_IP_Power_9258S.ipynb", "examples/BlueFors.ipynb", "examples/CopperMountain_M5180.ipynb", "examples/ERASynth.ipynb", "examples/Gentec_Maestro.ipynb", "examples/HP/HP8594E.ipynb", "examples/Holzworth_HS900.ipynb", "examples/Horiba_FHR.ipynb", "examples/ITest.ipynb", "examples/Keithley_6430.ipynb", "examples/Keysight_M3202A.ipynb", "examples/Keysight_M3202A with digitizer.ipynb", "examples/Lakeshore_311.ipynb", "examples/Lakeshore_625.ipynb", "examples/NationalInstruments_DAQ.ipynb", "examples/NationalInstruments_PXIe_2597.ipynb", "examples/NationalInstruments_RFSG.ipynb", "examples/Newport_AG-UC8.ipynb", "examples/OxfordInstruments_Proteox.ipynb", "examples/OxfordTriton.ipynb", "examples/QDevil/QDAC1/QCodes example with QDevil_QDAC.ipynb", "examples/QDevil/QDAC1/index.rst", "examples/QDevil/QDAC2/AWG.ipynb", "examples/QDevil/QDAC2/Chaining.ipynb", "examples/QDevil/QDAC2/DC_Constant.ipynb", "examples/QDevil/QDAC2/Debugging.ipynb", "examples/QDevil/QDAC2/GateLeakage.ipynb", "examples/QDevil/QDAC2/GateLeakageMultipleQDACs.ipynb", "examples/QDevil/QDAC2/List.ipynb", "examples/QDevil/QDAC2/MultiGenerator.ipynb", "examples/QDevil/QDAC2/PyvisaAwg.ipynb", "examples/QDevil/QDAC2/Scan.ipynb", "examples/QDevil/QDAC2/Scan2DDiode.ipynb", "examples/QDevil/QDAC2/Sine.ipynb", "examples/QDevil/QDAC2/Square.ipynb", "examples/QDevil/QDAC2/Sweep.ipynb", "examples/QDevil/QDAC2/SyncMultipleQDACs.ipynb", "examples/QDevil/QDAC2/Triangle.ipynb", "examples/QDevil/QDAC2/VirtualGates.ipynb", "examples/QDevil/QDAC2/do2dScan.ipynb", "examples/QDevil/QDAC2/index.rst", "examples/QDevil/QSwitch/Debugging.ipynb", "examples/QDevil/QSwitch/Usage.ipynb", "examples/QDevil/QSwitch/index.rst", "examples/QDevil/index.rst", "examples/Rigol_DSG3136B.ipynb", "examples/Rohde_Schwarz_HMC8043.ipynb", "examples/Rohde_Schwarz_HMP4040.ipynb", "examples/Rohde_Schwarz_SMW200A.ipynb", "examples/SR844.ipynb", "examples/Shamrock_SR750.ipynb", "examples/SignalCore.ipynb", "examples/SignalRecovery_7270.ipynb", "examples/SingleQuantum.ipynb", "examples/Standa_10MWA168.ipynb", "examples/SwabianInstruments_TimeTagger.ipynb", "examples/Tektronix_AFG3000_series.ipynb", "examples/Tektronix_FCA3100.ipynb", "examples/Tektronix_Keithley_6500.ipynb", "examples/Thorlabs_K10CR1.ipynb", "examples/Thorlabs_KLS1550.ipynb", "examples/Thorlabs_MFF10x.ipynb", "examples/Thorlabs_PRM1Z8.ipynb", "examples/Valon_5015.ipynb", "examples/Vaunix_LDA.ipynb", "examples/ZVL13.ipynb", "examples/ZurichInstruments_HF2LI.ipynb", "examples/index.rst", "index.rst"], "indexentries": {"__init__() (qcodes_contrib_drivers.drivers.agilent.agilent_n9000a.agilent_n9000a method)": [[2, "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300triggerout method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v3liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.bluefors.bluefors.bluefors method)": [[10, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.frequencysweepmagphase method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointiq method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointIQ.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointmagphase method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs900.hs900 method)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs900.hs900channel method)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900Channel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs9008b.hs9008b method)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs9008b.hs9008bchannel method)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008BChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.keysight.keysight_e36313a.e36313achannel method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313AChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.oxfordinstruments.triton.triton method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton.Triton.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdacchannel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qutech.d5a.d5a method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qutech.m2j.m2j method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.signalcore.signalcore.sc5521a method)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggermodule method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerModule.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.fca3100.completetimestatistics method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.CompleteTimeStatistics.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.fca3100.fca3100 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.FCA3100.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.fca3100.timestatistics method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.TimeStatistics.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_2000_scan.keithley_2000_scan_channel method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan.Keithley_2000_Scan_Channel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_6500.keithley_6500 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_6500.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_6500.keithley_sense method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_Sense.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter method)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaworkingfrequency method)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.__init__", false]], "abort() (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.abort", false]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.abort", false]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.abort", false]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.abort", false]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.abort", false]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.abort", false]], "abort() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.abort", false]], "ac (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.ac", false]], "acquire_cnts_t() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.acquire_cnts_t", false]], "active_channels() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.active_channels", false]], "active_grating (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.horibafhr attribute)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR.active_grating", false]], "actual_values_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.virtual_sweep_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context.actual_values_V", false]], "actual_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.actual_voltages", false]], "actuator (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.actuator", false]], "actuator_name (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.actuator_name", false]], "add_correction() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.add_correction", false]], "add_labelprops() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.add_labelProps", false]], "address (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.aviosysippower9258s attribute)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.AviosysIPPower9258S.address", false]], "adjust_parameter_validator() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.adjust_parameter_validator", false]], "advantech_pcie_1751 (class in qcodes_contrib_drivers.drivers.advantech.pcie_1751)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751", false]], "afg3000 (class in qcodes_contrib_drivers.drivers.tektronix.afg3000)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000", false]], "afg3252 (class in qcodes_contrib_drivers.drivers.tektronix.afg3000)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3252", false]], "agilent_n9000a (class in qcodes_contrib_drivers.drivers.agilent.agilent_n9000a)": [[2, "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A", false]], "alarm_state() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[46, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.alarm_state", false]], "all_waveforms (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.all_waveforms", false]], "allocate() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.allocate", false]], "allocate_trace() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.allocate_trace", false]], "allocate_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.allocate_trigger", false]], "allocate_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.allocate_trigger", false]], "allocation_ref (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot attribute)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.allocation_ref", false]], "allocation_state() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.allocation_state", false]], "amc100axis (class in qcodes_contrib_drivers.drivers.attocube.amc100)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AMC100Axis", false]], "amplifiermodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[26, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.AmplifierModule", false]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.amplitude", false]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.amplitude", false]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libamplitudecontrolmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode.Amplitude", false]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libamplitudecontrolmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode.Amplitude", false]], "amplitudemodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation", false]], "anc300 (class in qcodes_contrib_drivers.drivers.attocube.anc300)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300", false]], "anc300axis (class in qcodes_contrib_drivers.drivers.attocube.anc300)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis", false]], "anc300triggerout (class in qcodes_contrib_drivers.drivers.attocube.anc300)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut", false]], "anc350 (class in qcodes_contrib_drivers.drivers.attocube.anc350)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350", false]], "anc350axis (class in qcodes_contrib_drivers.drivers.attocube.anc350)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis", false]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType", false]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType", false]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType", false]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType", false]], "anc350libamplitudecontrolmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode", false]], "anc350libamplitudecontrolmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode", false]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType", false]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType", false]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType", false]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType", false]], "anc350liberror": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError", false], [7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError", false], [7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError", false], [7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError", false]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode", false]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode", false]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode", false]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode", false]], "anc350libsignaledge (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge", false]], "anc350libsignaledge (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge", false]], "anc350libtriggerinputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode", false]], "anc350libtriggerinputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode", false]], "anc350libtriggeroutputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode", false]], "anc350libtriggeroutputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode", false]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity", false]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity", false]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity", false]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity", false]], "anc350v3lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib", false]], "anc350v3lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib", false]], "anc350v3liberror": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError", false], [7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError", false], [7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError", false]], "anc350v4lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib", false]], "anc350v4lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib", false]], "andor_du401 (class in qcodes_contrib_drivers.drivers.andor.du401)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin property)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggerinstrumentbase property)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerInstrumentBase.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggermodule property)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerModule.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggersynchronizedmeasurements property)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerSynchronizedMeasurements.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.coincidencevirtualchannel attribute)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CoincidenceVirtualChannel.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.combinervirtualchannel attribute)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CombinerVirtualChannel.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.correlationmeasurement attribute)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CorrelationMeasurement.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countermeasurement attribute)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countratemeasurement attribute)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CountRateMeasurement.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger property)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.api", false]], "api_tagger (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggermodule property)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerModule.api_tagger", false]], "api_tagger (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggersynchronizedmeasurements property)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerSynchronizedMeasurements.api_tagger", false]], "append() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.append", false]], "apt (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.apt", false]], "apt (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.apt", false]], "apt (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.apt", false]], "apt_clean_up() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.apt_clean_up", false]], "apt_init() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.apt_init", false]], "arbitrary_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.arbitrary_wave", false]], "argtype (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.namedargtype attribute)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType.argtype", false]], "arm() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.arm", false]], "arrange() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.arrange", false]], "arrange() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.arrange", false]], "arrange() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.arrange", false]], "arrangement_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context", false]], "array_arrangement_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2_array)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context", false]], "arraylikevalidator (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.ArrayLikeValidator", false]], "ask() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.ask", false]], "ask() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.ask", false]], "ask() (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg method)": [[24, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.ask", false]], "ask() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_channel method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel.ask", false]], "ask() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.ask", false]], "ask() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.ask", false]], "ask() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.ask", false]], "ask() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.ask", false]], "ask() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.ask", false]], "ask() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[46, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.ask", false]], "ask_channel() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.ask_channel", false]], "ask_channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.ask_channel", false]], "ask_module() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.ask_module", false]], "ask_raw() (qcodes_contrib_drivers.drivers.ametek.sr_7270.signalrecovery7270 method)": [[4, "qcodes_contrib_drivers.drivers.Ametek.SR_7270.Signalrecovery7270.ask_raw", false]], "ask_raw() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.ask_raw", false]], "ask_raw() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.ask_raw", false]], "asynchronous() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.asynchronous", false]], "atmcd64d (class in qcodes_contrib_drivers.drivers.andor.du401)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d", false]], "atten_value (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.atten_value", false]], "attenuator (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.attenuator", false]], "attocubeamc100 (class in qcodes_contrib_drivers.drivers.attocube.amc100)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AttocubeAMC100", false]], "attributewrapper (class in qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper", false]], "auto (qcodes_contrib_drivers.drivers.siglent.sds.triggermode attribute)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.TriggerMode.AUTO", false]], "auto_cali_bias_currents() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.auto_cali_bias_currents", false]], "auto_cali_finished() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.auto_cali_finished", false]], "auto_pwr_disable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.auto_pwr_disable", false]], "available_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.available_A", false]], "aviosys_ip_power_9258s (class in qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.Aviosys_IP_Power_9258S", false]], "aviosysippower9258s (class in qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.AviosysIPPower9258S", false]], "awg_config_external_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_config_external_trigger", false]], "awg_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context", false]], "awg_flush() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_flush", false]], "awg_flush() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_flush", false]], "awg_from_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_from_array", false]], "awg_from_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_from_array", false]], "awg_from_file() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_from_file", false]], "awg_from_file() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_from_file", false]], "awg_is_running() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_is_running", false]], "awg_jump_next_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_jump_next_waveform", false]], "awg_name (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference property)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.awg_name", false]], "awg_pause() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_pause", false]], "awg_pause_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_pause_multiple", false]], "awg_queue_config() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_queue_config", false]], "awg_queue_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_queue_waveform", false]], "awg_queue_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_queue_waveform", false]], "awg_resume() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_resume", false]], "awg_resume_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_resume_multiple", false]], "awg_start() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_start", false]], "awg_start_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_start_multiple", false]], "awg_stop() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_stop", false]], "awg_stop_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_stop_multiple", false]], "awg_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_trigger", false]], "awg_trigger_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_trigger_multiple", false]], "axis_1 (qcodes_contrib_drivers.drivers.attocube.amc100.multiaxisposition attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPosition.axis_1", false]], "axis_2 (qcodes_contrib_drivers.drivers.attocube.amc100.multiaxisposition attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPosition.axis_2", false]], "axis_3 (qcodes_contrib_drivers.drivers.attocube.amc100.multiaxisposition attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPosition.axis_3", false]], "bandwidth (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.bandwidth", false]], "bbd10x (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BBD10x", false]], "bdc101 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BDC101", false]], "blockavg_hardware_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.blockavg_hardware_trigger_acquisition", false]], "bluefors (class in qcodes_contrib_drivers.drivers.bluefors.bluefors)": [[10, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors", false]], "bool_to_str() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.bool_to_str", false]], "breakout() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.breakout", false]], "bsc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BSC001", false]], "bsc002 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BSC002", false]], "bsc101 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BSC101", false]], "buffer_points (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.buffer_points", false]], "byte_to_bits() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 static method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.byte_to_bits", false]], "c_str() (in module qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.c_str", false]], "cached_api_object() (in module qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.cached_api_object", false]], "calibration() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.calibration", false]], "capacitance (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.capacitance", false]], "chan_to_ic() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.chan_to_ic", false]], "chan_to_id() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.chan_to_id", false]], "change_folder() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.change_folder", false]], "channel (qcodes_contrib_drivers.drivers.lakeshore.model_331.sensorchannel attribute)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.SensorChannel.channel", false]], "channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.channel", false]], "channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.channel", false]], "channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.channel", false]], "channel_ids (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.powerchannel attribute)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel.CHANNEL_IDS", false]], "channel_list_to_state() (in module qcodes_contrib_drivers.drivers.qdevil.qswitch)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.channel_list_to_state", false]], "channel_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.CHANNEL_MAPPING", false]], "channel_names (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.powerchannel attribute)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel.CHANNEL_NAMES", false]], "channel_number (qcodes_contrib_drivers.drivers.siglent.sdx.siglentchannel property)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentChannel.channel_number", false]], "channel_numbers (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.channel_numbers", false]], "channelarray (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.ChannelArray", false]], "channeltrace (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace", false]], "check() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.check", false]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror class method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.check_error", false]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror class method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.check_error", false]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror class method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.check_error", false]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror class method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.check_error", false]], "check_error() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.check_error", false]], "check_module_errors() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.check_module_errors", false]], "check_tune() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.check_tune", false]], "clear() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.clear", false]], "clear() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.clear", false]], "clear() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.clear", false]], "clear() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.clear", false]], "clear_alarm() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.clear_alarm", false]], "clear_measurements() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.clear_measurements", false]], "clear_read_buffer() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.clear_read_buffer", false]], "clear_read_queue() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.clear_read_queue", false]], "clear_read_queue() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.clear_read_queue", false]], "clear_read_queue() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.clear_read_queue", false]], "clear_waveforms() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.clear_waveforms", false]], "clear_zero_offset() (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro method)": [[17, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.clear_zero_offset", false]], "close() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.close", false]], "close() (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.close", false]], "close() (qcodes_contrib_drivers.drivers.attocube.amc100.attocubeamc100 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AttocubeAMC100.close", false]], "close() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.close", false]], "close() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.close", false]], "close() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350.close", false]], "close() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.horibafhr method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR.close", false]], "close() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.close", false]], "close() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.close", false]], "close() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.close", false]], "close() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.ni_switch method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch.close", false]], "close() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.close", false]], "close() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.close", false]], "close() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.close", false]], "close() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2trigger_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.virtual_sweep_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.close", false]], "close() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.close", false]], "close() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.close", false]], "close() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.close", false]], "close() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqcounts method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts.close", false]], "close() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.close", false]], "close() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.close", false]], "close() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.close", false]], "close() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.close", false]], "close_relay() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.close_relay", false]], "close_relays() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.close_relays", false]], "close_soft() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.close_soft", false]], "close_switch() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.close_switch", false]], "cmdbuffreespace (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CmdBufFreeSpace", false]], "cmddef (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.cmddef", false]], "cmddef (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.cmddef", false]], "cmtintparser() (in module qcodes_contrib_drivers.drivers.coppermountain.s5048)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTIntParser", false]], "cmts5048 (class in qcodes_contrib_drivers.drivers.coppermountain.s5048)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048", false]], "cmts5048trace (class in qcodes_contrib_drivers.drivers.coppermountain.s5048)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace", false]], "coarse (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerinputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode.Coarse", false]], "coarse (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerinputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode.Coarse", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.code", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError.code", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.code", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.code", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError.code", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.code", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v3liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError.code", false]], "coincidencevirtualchannel (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CoincidenceVirtualChannel", false]], "combinervirtualchannel (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CombinerVirtualChannel", false]], "comma_sequence_to_list() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.comma_sequence_to_list", false]], "comma_sequence_to_list_of_floats() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.comma_sequence_to_list_of_floats", false]], "command_delay (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.command_delay", false]], "command_move() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.command_move", false]], "common_trigger_in (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.common_trigger_in", false]], "communicationhandler (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler", false]], "compilererror": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.CompilerError", false]], "completetimestatistics (class in qcodes_contrib_drivers.drivers.tektronix.fca3100)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.CompleteTimeStatistics", false]], "complexsweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep", false]], "compress_channel_list() (in module qcodes_contrib_drivers.drivers.qdevil.qswitch)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.compress_channel_list", false]], "config_amplitude_modulation() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_amplitude_modulation", false]], "config_angle_modulation() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_angle_modulation", false]], "config_clock_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_clock_io", false]], "config_fpga_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_fpga_trigger", false]], "config_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_trigger_io", false]], "configure_a_quad_b_in() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_a_quad_b_in", false]], "configure_a_quad_b_in() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_a_quad_b_in", false]], "configure_a_quad_b_out() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_a_quad_b_out", false]], "configure_a_quad_b_out() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_a_quad_b_out", false]], "configure_duty_cycle() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_duty_cycle", false]], "configure_duty_cycle() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_duty_cycle", false]], "configure_ext_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_ext_trigger", false]], "configure_ext_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_ext_trigger", false]], "configure_nsl_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_nsl_trigger", false]], "configure_nsl_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_nsl_trigger", false]], "configure_nsl_trigger_axis() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_nsl_trigger_axis", false]], "configure_nsl_trigger_axis() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_nsl_trigger_axis", false]], "configure_rng_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_rng_trigger", false]], "configure_rng_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_rng_trigger", false]], "configure_rng_trigger_eps() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_rng_trigger_eps", false]], "configure_rng_trigger_eps() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_rng_trigger_eps", false]], "configure_rng_trigger_pol() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_rng_trigger_pol", false]], "configure_rng_trigger_pol() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_rng_trigger_pol", false]], "connect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.connect", false]], "connect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.connect", false]], "connect() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.connect", false]], "connect_external_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.connect_external_trigger", false]], "connect_external_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.connect_external_trigger", false]], "connect_message() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.connect_message", false]], "connect_to() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.switchchannel method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel.connect_to", false]], "contact_names (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.contact_names", false]], "contact_names (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.contact_names", false]], "controller (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.controller", false]], "convert_prescaler_to_sample_rate() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.convert_prescaler_to_sample_rate", false]], "convert_sample_rate_to_prescaler() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.convert_sample_rate_to_prescaler", false]], "convert_to_voltage() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.convert_to_voltage", false]], "cooler_off() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.cooler_off", false]], "cooler_on() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.cooler_on", false]], "correction_matrix (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.correction_matrix", false]], "correlationmeasurement (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CorrelationMeasurement", false]], "countermeasurement (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement", false]], "countratemeasurement (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CountRateMeasurement", false]], "coupling (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.coupling", false]], "coupling_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.coupling_mode", false]], "coupling_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.coupling_mode", false]], "coupling_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.coupling_mode", false]], "create_parameters_from_node_tree() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.create_parameters_from_node_tree", false]], "createspe() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.CreateSpe", false]], "createspe() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.CreateSpe", false]], "crest_factor (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.crest_factor", false]], "crs_aux_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.crs_aux_pll_ld", false]], "crs_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.crs_pll_ld", false]], "crs_ref_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.crs_ref_pll_ld", false]], "cryocon_26 (class in qcodes_contrib_drivers.drivers.cryocon.cryocon_26)": [[12, "qcodes_contrib_drivers.drivers.Cryocon.cryocon_26.Cryocon_26", false]], "cryogenicsms120c (class in qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c)": [[13, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C", false]], "cs580 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580", false]], "curposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CurPosition", false]], "current (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.current", false]], "currents_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.currents_A", false]], "currents_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.currents_A", false]], "curspeed (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CurSpeed", false]], "curt (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CurT", false]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.cycles_remaining", false]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.cycles_remaining", false]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.cycles_remaining", false]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.cycles_remaining", false]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.cycles_remaining", false]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.cycles_remaining", false]], "d4 (class in qcodes_contrib_drivers.drivers.qutech.d4)": [[32, "qcodes_contrib_drivers.drivers.QuTech.D4.D4", false]], "d5a (class in qcodes_contrib_drivers.drivers.qutech.d5a)": [[32, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a", false]], "dac_quata (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.dac_quata", false]], "daq_flush() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_flush", false]], "daq_flush_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_flush_multiple", false]], "daq_read() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_read", false]], "daq_start() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_start", false]], "daq_start_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_start_multiple", false]], "daq_stop() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_stop", false]], "daq_stop_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_stop_multiple", false]], "daq_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_trigger", false]], "daq_trigger_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_trigger_multiple", false]], "daqanaloginputs (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputs", false]], "daqanaloginputvoltages (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputVoltages", false]], "daqanalogoutputs (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputs", false]], "daqanalogoutputvoltage (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage", false]], "daqdigitaloutputs (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputs", false]], "daqdigitaloutputstate (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputState", false]], "daqnaviexception": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.DAQNaviException", false]], "daqnaviwarning": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.DAQNaviWarning", false]], "day (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.day", false]], "dc (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.dc", false]], "dc_list() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.dc_list", false]], "dc_sweep() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.dc_sweep", false]], "dcc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.DCC001", false]], "dcchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.DCChannel", false]], "debug_messages_en (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.debug_messages_en", false]], "decrement_sensitivity() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.decrement_sensitivity", false]], "default_current_ramp_limit (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c attribute)": [[13, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.default_current_ramp_limit", false]], "default_max_current_ramp_limit (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c attribute)": [[13, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.default_max_current_ramp_limit", false]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.DEFAULT_PATH_TO_DLL", false]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.DEFAULT_PATH_TO_DLL", false]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.DEFAULT_PATH_TO_DLL", false]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.DEFAULT_PATH_TO_DLL", false]], "default_timeout (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.default_timeout", false]], "deg_to_rad() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d static method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.deg_to_rad", false]], "delay (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.delay", false]], "delete_all_waveforms_from_list() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.delete_all_waveforms_from_list", false]], "deletespe() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.DeleteSpe", false]], "deletespe() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.DeleteSpe", false]], "depth (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.depth", false]], "deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.deviation", false]], "deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.deviation", false]], "deviation_ratio (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.deviation_ratio", false]], "deviation_ratio (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.deviation_ratio", false]], "device_access (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.device_access", false]], "device_id (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.device_id", false]], "device_info (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[24, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.device_info", false]], "device_interfaces (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.device_interfaces", false]], "device_standby (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.device_standby", false]], "deviceinformation (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation", false]], "deviceinfot (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT", false]], "devicerfparamst (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT", false]], "devicestatust (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT", false]], "dg645 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645", false]], "diff_matrix() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.diff_matrix", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerinputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerinputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode.Disable", false]], "disable_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.disable_auto_move", false]], "disable_channel() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.disable_channel", false]], "disable_hw_channel() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.disable_hw_channel", false]], "disarm() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.disarm", false]], "disconnect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.disconnect", false]], "disconnect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.disconnect", false]], "disconnect() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.horibafhr method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR.disconnect", false]], "disconnect_all() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.ni_switch method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch.disconnect_all", false]], "disconnect_from() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.switchchannel method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel.disconnect_from", false]], "disconnect_from_all() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.switchchannel method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel.disconnect_from_all", false]], "discover() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.discover", false]], "discover() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.discover", false]], "dispatcher (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.Dispatcher", false]], "display_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.DISPLAY_MAPPING", false]], "dll (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.dll", false]], "dll (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif attribute)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.dll", false]], "dll (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.dll", false]], "dll_path (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat attribute)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.dll_path", false]], "dll_path (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg attribute)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.dll_path", false]], "dll_path (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda attribute)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.dll_path", false]], "do_get_frequency() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_frequency", false]], "do_get_power() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_power", false]], "do_get_pulse_delay() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_pulse_delay", false]], "do_get_status() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_status", false]], "do_get_status_of_alc() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_status_of_ALC", false]], "do_get_status_of_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_status_of_modulation", false]], "do_set_frequency() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_frequency", false]], "do_set_power() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_power", false]], "do_set_pulse_delay() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_pulse_delay", false]], "do_set_status() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_status", false]], "do_set_status_of_alc() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_status_of_ALC", false]], "do_set_status_of_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_status_of_modulation", false]], "double_delay (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.double_delay", false]], "double_width (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.double_width", false]], "download_device_node_tree() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.download_device_node_tree", false]], "drsdaylightsolutions_mircat (class in qcodes_contrib_drivers.drivers.daylightsolutions.mircat)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat", false]], "dtype (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.attributewrapper attribute)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper.dtype", false]], "dualmtsmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[26, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.DualMTSModule", false]], "dualspdtmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[26, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.DualSPDTModule", false]], "dwell (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.dwell", false]], "dwell (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.dwell", false]], "dwell (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.dwell", false]], "e36313a (class in qcodes_contrib_drivers.drivers.keysight.keysight_e36313a)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313A", false]], "e36313achannel (class in qcodes_contrib_drivers.drivers.keysight.keysight_e36313a)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313AChannel", false]], "edge (qcodes_contrib_drivers.drivers.signalcore.signalcore.hwtriggert attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT.edge", false]], "el320p (class in qcodes_contrib_drivers.drivers.aimtti.el320p)": [[3, "qcodes_contrib_drivers.drivers.AimTTi.EL320P.EL320P", false]], "embedded_version (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.embedded_version", false]], "enable_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.enable_auto_move", false]], "enable_channel() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.enable_channel", false]], "enable_detectors() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.enable_detectors", false]], "enable_event_dlg() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.enable_event_dlg", false]], "enable_hw_channel() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.enable_hw_channel", false]], "enable_ref_auto_reset() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.enable_ref_auto_reset", false]], "enable_ref_auto_reset() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.enable_ref_auto_reset", false]], "enable_ref_auto_update() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.enable_ref_auto_update", false]], "enable_ref_auto_update() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.enable_ref_auto_update", false]], "enable_sensor() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.enable_sensor", false]], "enable_sensor() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.enable_sensor", false]], "enabled (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[24, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.enabled", false]], "enabled (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p attribute)": [[46, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.enabled", false]], "encposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.getposition attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition.EncPosition", false]], "encposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.EncPosition", false]], "encsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.EncSts", false]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.end_marker", false]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.end_marker", false]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.end_marker", false]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.end_marker", false]], "enter_persistent_mode() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.enter_persistent_mode", false]], "enumerate_devices() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.enumerate_devices", false]], "erasynth (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynth", false]], "erasynthbase (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase", false]], "erasynthplus (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlus", false]], "erasynthplusplus (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlusPlus", false]], "error() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.error", false]], "error() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.error", false]], "error() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.error", false]], "error_check() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.error_check", false]], "error_check() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.dispatcher method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.Dispatcher.error_check", false]], "error_check() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.error_check", false]], "error_check() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.error_check", false]], "error_check() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.error_check", false]], "error_message() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.error_message", false]], "errormsg (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 attribute)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.ERRORMSG", false]], "errors() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.errors", false]], "errors() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.errors", false]], "esp8266_upload_mode() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.esp8266_upload_mode", false]], "examine() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.examine", false]], "exception_type (qcodes_contrib_drivers.drivers.attocube.amc100.attocubeamc100 property)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AttocubeAMC100.exception_type", false]], "execute (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.execute", false]], "execute (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.execute", false]], "execute (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.execute", false]], "expand_channel_list() (in module qcodes_contrib_drivers.drivers.qdevil.qswitch)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.expand_channel_list", false]], "ext_ref_detect (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.ext_ref_detect", false]], "ext_ref_lock_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.ext_ref_lock_enable", false]], "f1d (class in qcodes_contrib_drivers.drivers.qutech.f1d)": [[32, "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d", false]], "factory_reset() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.factory_reset", false]], "falling (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libsignaledge attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge.Falling", false]], "falling (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libsignaledge attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge.Falling", false]], "fca3100 (class in qcodes_contrib_drivers.drivers.tektronix.fca3100)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.FCA3100", false]], "fhrclient (class in qcodes_contrib_drivers.drivers.horiba.private.fhr_client)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient", false]], "fhrserver (class in qcodes_contrib_drivers.drivers.horiba.private.fhr_server)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer", false]], "filter (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.filter", false]], "find_modules() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.find_modules", false]], "fine_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.fine_pll_ld", false]], "firmware (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.firmware", false]], "firmware_build (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.firmware_build", false]], "firmware_revision (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.firmware_revision", false]], "firmware_version (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.firmware_version", false]], "firmware_version (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro attribute)": [[17, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.firmware_version", false]], "flags (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Flags", false]], "floats_to_comma_separated_list() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.floats_to_comma_separated_list", false]], "flush_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.flush_waveform", false]], "flush_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.flush_waveform", false]], "force_logicjump() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.force_logicjump", false]], "force_trigger() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.force_trigger", false]], "forward (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.homelimitswitch attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch.FORWARD", false]], "forward (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.rotationdirection attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection.FORWARD", false]], "forward_and_back() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.forward_and_back", false]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Fps", false]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Fps", false]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Fps", false]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Fps", false]], "free_all_triggers() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.free_all_triggers", false]], "free_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.free_trigger", false]], "freq_manual (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.freq_manual", false]], "freq_max (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.freq_max", false]], "freq_min (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.freq_min", false]], "frequency (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.frequency", false]], "frequency (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.frequency", false]], "frequency (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.frequency", false]], "frequency (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.frequency", false]], "frequency (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.frequency", false]], "frequencymodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation", false]], "frequencysweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep", false]], "frequencysweepmagphase (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase", false]], "frequencysweepmagphase (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase", false]], "full_range (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.full_range", false]], "gain (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.gain", false]], "gated_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.gated_trigger_acquisition", false]], "gen_trigger_pulse() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.gen_trigger_pulse", false]], "generate_csv_sequence_program() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 static method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.generate_csv_sequence_program", false]], "generatedsetpoints (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints", false]], "generatedsetpoints (class in qcodes_contrib_drivers.drivers.tektronix.fca3100)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.GeneratedSetPoints", false]], "generator (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Generator", false]], "gentec_maestro (class in qcodes_contrib_drivers.drivers.gentec.gentec_maestro)": [[17, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro", false]], "get_acquired_data() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_acquired_data", false]], "get_acquisition_timings() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_acquisition_timings", false]], "get_actuator_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_actuator_name", false]], "get_actuator_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_actuator_name", false]], "get_actuator_type() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_actuator_type", false]], "get_actuator_type() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_actuator_type", false]], "get_all() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.get_all", false]], "get_all() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.get_all", false]], "get_all() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.get_all", false]], "get_all() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.get_all", false]], "get_all() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.get_all", false]], "get_all() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_all", false]], "get_all() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.get_all", false]], "get_all_labels() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.get_all_labels", false]], "get_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_amplitude", false]], "get_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_amplitude", false]], "get_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.get_attribute", false]], "get_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.get_attribute", false]], "get_axis_status() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_axis_status", false]], "get_axis_status() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_axis_status", false]], "get_bias_current() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_bias_current", false]], "get_bias_voltage() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_bias_voltage", false]], "get_buffer_length() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.get_buffer_length", false]], "get_buffers_enabled() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_buffers_enabled", false]], "get_calibration() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_calibration", false]], "get_camera_handle() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_camera_handle", false]], "get_camera_serial_number() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_camera_serial_number", false]], "get_capture_duration() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggermeasurement method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerMeasurement.get_capture_duration", false]], "get_card_memory() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_card_memory", false]], "get_card_type() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_card_type", false]], "get_channel() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggervirtualchannel method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerVirtualChannel.get_channel", false]], "get_channel_waveform() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_channel_waveform", false]], "get_channel_waveform_data() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_channel_waveform_data", false]], "get_channels() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggervirtualchannel method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerVirtualChannel.get_channels", false]], "get_chassis() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_chassis", false]], "get_clock_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_clock_frequency", false]], "get_clock_sync_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_clock_sync_frequency", false]], "get_configuration() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.get_configuration", false]], "get_configuration() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggerinstrumentbase method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerInstrumentBase.get_configuration", false]], "get_coupling() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_coupling", false]], "get_current_folder_name() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_current_folder_name", false]], "get_data() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_data", false]], "get_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.get_dc_voltage", false]], "get_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.get_dc_voltage", false]], "get_detector() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_detector", false]], "get_device_config() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_device_config", false]], "get_device_config() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_device_config", false]], "get_device_info() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_device_info", false]], "get_device_info() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_device_info", false]], "get_device_name() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.get_device_name", false]], "get_diagnostic_status() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.get_diagnostic_status", false]], "get_display_value() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.get_display_value", false]], "get_error() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.get_error", false]], "get_error_info32bit() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_error_info32bit", false]], "get_filenames() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_filenames", false]], "get_filter_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_filter_mode", false]], "get_filter_value() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_filter_value", false]], "get_firmware_version() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_firmware_version", false]], "get_firmware_version() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_firmware_version", false]], "get_firmware_version() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_firmware_version", false]], "get_firmware_version() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_firmware_version", false]], "get_folder_contents() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_folder_contents", false]], "get_fpga_pc_port() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_fpga_pc_port", false]], "get_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_frequency", false]], "get_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_frequency", false]], "get_full_scale() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_full_scale", false]], "get_grating() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_grating", false]], "get_grating_info() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_grating_info", false]], "get_hardware_version() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_hardware_version", false]], "get_hardware_version() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_hardware_version", false]], "get_hardware_version() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_hardware_version", false]], "get_head_model() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_head_model", false]], "get_hvi_register() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_hvi_register", false]], "get_hw_info() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.get_hw_info", false]], "get_hw_serial_num_ex() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.get_hw_serial_num_ex", false]], "get_id() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.motorchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel.get_id", false]], "get_id() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.get_id", false]], "get_idn() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.ametek.sr_7270.signalrecovery7270 method)": [[4, "qcodes_contrib_drivers.drivers.Ametek.SR_7270.Signalrecovery7270.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.attocube.amc100.attocubeamc100 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AttocubeAMC100.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.aviosysippower9258s method)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.AviosysIPPower9258S.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c method)": [[13, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro method)": [[17, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.horibafhr method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.keysight.keysight_e36313a.e36313a method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313A.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg method)": [[24, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[25, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[27, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.ni_switch method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.d5a.d5a method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.f1d.f1d method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.m2j.m2j method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.s5i.s5i method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.signalcore.signalcore.sc5521a method)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580.cs580 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr570.sr570 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570.SR570.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[46, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 method)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x method)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 method)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.get_idn", false]], "get_impedance() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_impedance", false]], "get_input_delay() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.get_input_delay", false]], "get_jumpmode() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_jumpmode", false]], "get_label() (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.get_label", false]], "get_label() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.get_label", false]], "get_last_error() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.get_last_error", false]], "get_limits() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.get_limits", false]], "get_lut_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.get_lut_name", false]], "get_lut_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.get_lut_name", false]], "get_math_vdiv() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_math_vdiv", false]], "get_math_waveform() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_math_waveform", false]], "get_max_current() (qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp.rohdeschwarzhmpchannel method)": [[34, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel.get_max_current", false]], "get_max_sample_rate() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_max_sample_rate", false]], "get_measurement_periode() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_measurement_periode", false]], "get_mode() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_mode", false]], "get_module_count() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_module_count", false]], "get_module_idn() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.get_module_idn", false]], "get_module_status() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.get_module_status", false]], "get_n() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqcounts method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts.get_n", false]], "get_num_samples() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_num_samples", false]], "get_number_devices() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_number_devices", false]], "get_number_gratings() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_number_gratings", false]], "get_number_of_detectors() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_number_of_detectors", false]], "get_number_pixels() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_number_pixels", false]], "get_ofst() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_ofst", false]], "get_open() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_open", false]], "get_options() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.get_options", false]], "get_overload() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580.cs580 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580.get_overload", false]], "get_pixel_width() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_pixel_width", false]], "get_pol_dac() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.get_pol_dac", false]], "get_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_position", false]], "get_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_position", false]], "get_position() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.get_position", false]], "get_prescaler() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_prescaler", false]], "get_pressure() (qcodes_contrib_drivers.drivers.bluefors.bluefors.bluefors method)": [[10, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors.get_pressure", false]], "get_pressure() (qcodes_contrib_drivers.drivers.oxfordinstruments.triton.triton method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton.Triton.get_pressure", false]], "get_product_name() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_product_name", false]], "get_product_name_by_index() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_product_name_by_index", false]], "get_product_name_by_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_product_name_by_slot", false]], "get_pulse_parameters() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.get_pulse_parameters", false]], "get_pxi_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_pxi_trigger", false]], "get_ranges() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.get_ranges", false]], "get_raw() (qcodes_contrib_drivers.drivers.andor.du401.spectrum method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.attocube.amc100.multiaxispositionparameter method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPositionParameter.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.m5180.frequencysweepmagphase method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointiq method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointIQ.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointmagphase method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048trace method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.generalmicrowave.gm349.gm349attenuation method)": [[16, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqanaloginputvoltages method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputVoltages.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqanalogoutputvoltage method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.magnetcurrentparameters method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagnetCurrentParameters.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.magneticfieldparameters method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagneticFieldParameters.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdacmultichannelparameter method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacMultiChannelParameter.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.complexsweep method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweep method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweepmagphase method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.safrequencysweep method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.channelarray method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.ChannelArray.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.timearray method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.TimeArray.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.generatedsetpoints method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.tektronix.fca3100.completetimestatistics method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.CompleteTimeStatistics.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.tektronix.fca3100.generatedsetpoints method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.GeneratedSetPoints.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.tektronix.fca3100.timestatistics method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.TimeStatistics.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter method)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.get_raw", false]], "get_raw_analog_waveform_data() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_raw_analog_waveform_data", false]], "get_raw_digital_waveform_data() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_raw_digital_waveform_data", false]], "get_raw_math_waveform_data() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_raw_math_waveform_data", false]], "get_recorded_scpi_commands() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.get_recorded_scpi_commands", false]], "get_recorded_scpi_commands() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.get_recorded_scpi_commands", false]], "get_ref_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_ref_position", false]], "get_ref_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_ref_position", false]], "get_remote_settings() (qcodes_contrib_drivers.drivers.qutech.f1d.f1d method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d.get_remote_settings", false]], "get_s() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.get_s", false]], "get_sample_rate() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_sample_rate", false]], "get_serial_number() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_serial_number", false]], "get_serial_number() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_serial_number", false]], "get_serial_number_by_index() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_serial_number_by_index", false]], "get_serial_number_by_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_serial_number_by_slot", false]], "get_slit() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_slit", false]], "get_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_slot", false]], "get_state() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_state", false]], "get_status() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_status", false]], "get_status() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_status", false]], "get_status() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[25, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.get_status", false]], "get_status() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.get_status", false]], "get_temperature() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_temperature", false]], "get_temperature() (qcodes_contrib_drivers.drivers.bluefors.bluefors.bluefors method)": [[10, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors.get_temperature", false]], "get_temperature() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_temperature", false]], "get_temperature() (qcodes_contrib_drivers.drivers.oxfordinstruments.triton.triton method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton.Triton.get_temperature", false]], "get_temperature_range() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_temperature_range", false]], "get_test_signal() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.get_test_signal", false]], "get_time_base() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_time_base", false]], "get_trig_mode() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_trig_mode", false]], "get_trigger_by_name() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.get_trigger_by_name", false]], "get_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_trigger_io", false]], "get_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_trigger_io", false]], "get_trigger_level() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_trigger_level", false]], "get_trigger_level() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.get_trigger_level", false]], "get_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_trigger_mode", false]], "get_trigger_threshold() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_trigger_threshold", false]], "get_type() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_type", false]], "get_type_by_index() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_type_by_index", false]], "get_type_by_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_type_by_slot", false]], "get_uninitialized_slots() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.get_uninitialized_slots", false]], "get_validator() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaworkingfrequency class method)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency.get_validator", false]], "get_vdiv() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_vdiv", false]], "get_voltage() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.get_voltage", false]], "get_waveform_setup() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_waveform_setup", false]], "get_waveform_status() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_waveform_status", false]], "get_waveform_type() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_waveform_type", false]], "get_wavelength() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_wavelength", false]], "get_wavelength_limits() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_wavelength_limits", false]], "getall() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.getall", false]], "getall() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.getall", false]], "getposition (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition", false]], "giga() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[40, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.GIGA", false]], "giga_b() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[40, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.GIGA_B", false]], "gm349 (class in qcodes_contrib_drivers.drivers.generalmicrowave.gm349)": [[16, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349", false]], "gm349attenuation (class in qcodes_contrib_drivers.drivers.generalmicrowave.gm349)": [[16, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation", false]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType.Goniometer", false]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType.Goniometer", false]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType.Goniometer", false]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType.Goniometer", false]], "goto_root() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.goto_root", false]], "gpioflags (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.GPIOFlags", false]], "gratingchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.GratingChannel", false]], "ground() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.ground", false]], "half_range (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.half_range", false]], "hardware_revision (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.hardware_revision", false]], "harmonic_ss (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.harmonic_ss", false]], "head_model (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.head_model", false]], "heater_off() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.heater_off", false]], "heater_on() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.heater_on", false]], "hf2li (class in qcodes_contrib_drivers.drivers.zurichinstruments.hf2li)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI", false]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity.High", false]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity.High", false]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity.High", false]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity.High", false]], "histogramlogbinsmeasurement (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement", false]], "hold() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.hold", false]], "hold_field() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.hold_field", false]], "homelimitswitch (class in qcodes_contrib_drivers.drivers.thorlabs.k10cr1)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch", false]], "horibafhr (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR", false]], "hour (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.hour", false]], "hs900 (class in qcodes_contrib_drivers.drivers.holzworth.hs900)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900", false]], "hs9008b (class in qcodes_contrib_drivers.drivers.holzworth.hs9008b)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B", false]], "hs9008bchannel (class in qcodes_contrib_drivers.drivers.holzworth.hs9008b)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008BChannel", false]], "hs900channel (class in qcodes_contrib_drivers.drivers.holzworth.hs900)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900Channel", false]], "hw_trigger (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.hw_trigger", false]], "hwtriggert (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT", false]], "i_bias (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.i_bias", false]], "i_offset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.i_offset", false]], "ichaus (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.IcHaus", false]], "ichaus (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.IcHaus", false]], "identify() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.identify", false]], "identify() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.identify", false]], "impedance (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.impedance", false]], "implementations() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggermodule class method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerModule.implementations", false]], "increment_sensitivity() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.increment_sensitivity", false]], "init() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.precisionmotorchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel.init", false]], "init() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.init", false]], "init() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.init", false]], "init() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.init", false]], "init_hw_device() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.init_hw_device", false]], "initialize() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.initialize", false]], "initialize() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.initialize", false]], "initialize_channels() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.initialize_channels", false]], "initiate() (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.initiate", false]], "initiate_correction() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.initiate_correction", false]], "ints_to_comma_separated_list() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.ints_to_comma_separated_list", false]], "invalidate_trace() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.invalidate_trace", false]], "ipwr (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Ipwr", false]], "iqchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel", false]], "iqmodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation", false]], "is_cooler_on() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.is_cooler_on", false]], "is_running() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.is_running", false]], "is_uploaded() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.is_uploaded", false]], "itest (class in qcodes_contrib_drivers.drivers.bilt.itest)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest", false]], "itestchannel (class in qcodes_contrib_drivers.drivers.bilt.itest)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel", false]], "itestmultichannelparameter (class in qcodes_contrib_drivers.drivers.bilt.itest)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestMultiChannelParameter", false]], "iusb (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Iusb", false]], "ivvi (class in qcodes_contrib_drivers.drivers.qutech.ivvi)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI", false]], "jog() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.jog", false]], "k10cr1 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.K10CR1", false]], "kdc101 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.KDC101", false]], "keithley_2000_scan_channel (class in qcodes_contrib_drivers.drivers.tektronix.keithley_2000_scan)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan.Keithley_2000_Scan_Channel", false]], "keithley_2700 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700", false]], "keithley_6430 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_6430)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430", false]], "keithley_6500 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_6500)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_6500", false]], "keithley_sense (class in qcodes_contrib_drivers.drivers.tektronix.keithley_6500)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_Sense", false]], "keysight_e8267d (class in qcodes_contrib_drivers.drivers.keysight.keysight_e8267d)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D", false]], "keysight_j7211 (class in qcodes_contrib_drivers.drivers.keysight.keysight_j7211)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211.Keysight_J7211", false]], "keysight_m3201a (class in qcodes_contrib_drivers.drivers.keysight.keysight_m3201a)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A.Keysight_M3201A", false]], "kilo() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[40, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.KILO", false]], "kilo_b() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[40, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.KILO_B", false]], "l490mz (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.L490MZ", false]], "lakeshore625 (class in qcodes_contrib_drivers.drivers.lakeshore.model_625)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.Model_625.Lakeshore625", false]], "lda (in module qcodes_contrib_drivers.drivers.vaunix.lda)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LDA", false]], "ldaattenuation (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaAttenuation", false]], "ldachannel (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaChannel", false]], "ldaparameter (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter", false]], "ldaworkingfrequency (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency", false]], "leakage() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.leakage", false]], "leakage() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.leakage", false]], "leave_persistent_mode() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.leave_persistent_mode", false]], "leave_persistent_mode() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.leave_persistent_mode", false]], "level (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.level", false]], "level (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.level", false]], "level_dac_value (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.level_dac_value", false]], "lfoutputchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel", false]], "lfoutputsweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep", false]], "libximc (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc", false]], "lighthousephotonicssproutg (class in qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g)": [[24, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG", false]], "lin_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.lin_step", false]], "lin_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.lin_step", false]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType.Linear", false]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType.Linear", false]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType.Linear", false]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType.Linear", false]], "linspace() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.linspace", false]], "list_available_devices() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.list_available_devices", false]], "list_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context", false]], "list_mode_running (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.list_mode_running", false]], "list_mode_t (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT.list_mode_t", false]], "listmodet (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT", false]], "load_and_set_sequence() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.load_and_set_sequence", false]], "load_fpga_image() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.load_fpga_image", false]], "load_fpga_image() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.load_fpga_image", false]], "load_lut_file() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.load_lut_file", false]], "load_lut_file() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.load_lut_file", false]], "load_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.load_waveform", false]], "load_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.load_waveform", false]], "load_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.load_waveform_int16", false]], "load_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.load_waveform_int16", false]], "local() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.local", false]], "local() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.local", false]], "local() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.local", false]], "local() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.local", false]], "log_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.log_step", false]], "log_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.log_step", false]], "log_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.log_step", false]], "losc_input (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_input", false]], "losc_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_mode", false]], "losc_output (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_output", false]], "losc_state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_state", false]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity.Low", false]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity.Low", false]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity.Low", false]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity.Low", false]], "ltsxxx (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.LTSxxx", false]], "m2j (class in qcodes_contrib_drivers.drivers.qutech.m2j)": [[32, "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j", false]], "m2solstis3 (class in qcodes_contrib_drivers.drivers.m2.m2_solstis_3)": [[25, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3", false]], "m3202a (class in qcodes_contrib_drivers.drivers.keysight.m3202a)": [[21, "qcodes_contrib_drivers.drivers.Keysight.M3202A.M3202A", false]], "m3300a_awg (class in qcodes_contrib_drivers.drivers.keysight.keysight_m3300a)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A.M3300A_AWG", false]], "m3300a_dig (class in qcodes_contrib_drivers.drivers.keysight.keysight_m3300a)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A.M3300A_DIG", false]], "m4i (class in qcodes_contrib_drivers.drivers.spectrum.m4i)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i", false]], "m5180 (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180", false]], "mac() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.mac", false]], "magnetcurrentparameters (class in qcodes_contrib_drivers.drivers.oxfordinstruments.proteox)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagnetCurrentParameters", false]], "magneticfieldparameters (class in qcodes_contrib_drivers.drivers.oxfordinstruments.proteox)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagneticFieldParameters", false]], "main() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.h2py)": [[40, "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py.main", false]], "major (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Major", false]], "make_directory() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.make_directory", false]], "man_date (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.man_date", false]], "mandate (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate", false]], "manufacturer (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Manufacturer", false]], "manufacturerid (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.ManufacturerId", false]], "max_status_age (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac attribute)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.max_status_age", false]], "measure_capacitance() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.measure_capacitance", false]], "measure_capacitance() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.measure_capacitance", false]], "measure_position() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.measure_position", false]], "measurement() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.measurement", false]], "measurement_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context", false]], "measurementcontrolmixin (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin", false]], "mega() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[40, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.MEGA", false]], "mega_b() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[40, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.MEGA_B", false]], "mem_usage() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.mem_usage", false]], "memory_manager (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot attribute)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.memory_manager", false]], "memory_sizes (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager attribute)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.memory_sizes", false]], "memorymanager (class in qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager", false]], "memorymanager.allocatedslot (class in qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot", false]], "mercury (class in qcodes_contrib_drivers.drivers.physik_instrumente.mercury)": [[52, "qcodes_contrib_drivers.drivers.physik_instrumente.mercury.mercury", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.message", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError.message", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.message", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.message", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError.message", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.message", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v3liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError.message", false]], "mff10x (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.MFF10x", false]], "minicircuitsmodularsystem (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[26, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.MiniCircuitsModularSystem", false]], "minicircuitsmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[26, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.MiniCircuitsModule", false]], "minor (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Minor", false]], "mixing_chamber_heater_off() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.mixing_chamber_heater_off", false]], "mockvisa (class in qcodes_contrib_drivers.drivers.attocube.anc300sim)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisa", false]], "mockvisa (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisa", false]], "mockvisahandle (class in qcodes_contrib_drivers.drivers.attocube.anc300sim)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle", false]], "mockvisahandle (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle", false]], "mode (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode", false]], "mode (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.mode", false]], "model (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro attribute)": [[17, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.model", false]], "model (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.model", false]], "model (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.model", false]], "model (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.model", false]], "model (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.model", false]], "model_331 (class in qcodes_contrib_drivers.drivers.lakeshore.model_331)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.Model_331", false]], "modulation_am_depth (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_am_depth", false]], "modulation_en (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_en", false]], "modulation_fm_deviation (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_fm_deviation", false]], "modulation_freq (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_freq", false]], "modulation_pulse_period (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_pulse_period", false]], "modulation_pulse_width (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_pulse_width", false]], "modulation_signal_waveform (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_signal_waveform", false]], "modulation_source (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_source", false]], "modulation_type (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_type", false]], "module": [[0, "module-qcodes_contrib_drivers.drivers", false], [0, "module-qcodes_contrib_drivers.drivers.CMTS5048", false], [1, "module-qcodes_contrib_drivers.drivers.Advantech", false], [1, "module-qcodes_contrib_drivers.drivers.Advantech.PCIE_1751", false], [2, "module-qcodes_contrib_drivers.drivers.Agilent", false], [2, "module-qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A", false], [3, "module-qcodes_contrib_drivers.drivers.AimTTi", false], [3, "module-qcodes_contrib_drivers.drivers.AimTTi.EL320P", false], [4, "module-qcodes_contrib_drivers.drivers.Ametek", false], [4, "module-qcodes_contrib_drivers.drivers.Ametek.SR_7270", false], [5, "module-qcodes_contrib_drivers.drivers.Andor", false], [5, "module-qcodes_contrib_drivers.drivers.Andor.DU401", false], [6, "module-qcodes_contrib_drivers.drivers.Attocube", false], [6, "module-qcodes_contrib_drivers.drivers.Attocube.AMC100", false], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300", false], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300sim", false], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350", false], [7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib", false], [7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface", false], [7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3", false], [7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4", false], [8, "module-qcodes_contrib_drivers.drivers.Aviosys", false], [8, "module-qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S", false], [9, "module-qcodes_contrib_drivers.drivers.Bilt", false], [9, "module-qcodes_contrib_drivers.drivers.Bilt.ITest", false], [10, "module-qcodes_contrib_drivers.drivers.BlueFors", false], [10, "module-qcodes_contrib_drivers.drivers.BlueFors.BlueFors", false], [11, "module-qcodes_contrib_drivers.drivers.CopperMountain", false], [11, "module-qcodes_contrib_drivers.drivers.CopperMountain.M5180", false], [11, "module-qcodes_contrib_drivers.drivers.CopperMountain.S5048", false], [12, "module-qcodes_contrib_drivers.drivers.Cryocon", false], [12, "module-qcodes_contrib_drivers.drivers.Cryocon.cryocon_26", false], [13, "module-qcodes_contrib_drivers.drivers.Cryogenic", false], [13, "module-qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C", false], [14, "module-qcodes_contrib_drivers.drivers.DaylightSolutions", false], [14, "module-qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat", false], [15, "module-qcodes_contrib_drivers.drivers.ERAInstruments", false], [15, "module-qcodes_contrib_drivers.drivers.ERAInstruments.erasynth", false], [16, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave", false], [16, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349", false], [17, "module-qcodes_contrib_drivers.drivers.Gentec", false], [17, "module-qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro", false], [18, "module-qcodes_contrib_drivers.drivers.Holzworth", false], [18, "module-qcodes_contrib_drivers.drivers.Holzworth.HS900", false], [18, "module-qcodes_contrib_drivers.drivers.Holzworth.HS9008B", false], [19, "module-qcodes_contrib_drivers.drivers.Horiba", false], [19, "module-qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR", false], [20, "module-qcodes_contrib_drivers.drivers.Horiba.private", false], [20, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_client", false], [20, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_server", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight.M3202A", false], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common", false], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG", false], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async", false], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG", false], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module", false], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager", false], [23, "module-qcodes_contrib_drivers.drivers.Lakeshore", false], [23, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_331", false], [23, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_625", false], [24, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics", false], [24, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G", false], [25, "module-qcodes_contrib_drivers.drivers.M2", false], [25, "module-qcodes_contrib_drivers.drivers.M2.M2_Solstis_3", false], [26, "module-qcodes_contrib_drivers.drivers.Minicircuits", false], [26, "module-qcodes_contrib_drivers.drivers.Minicircuits.ZTM", false], [27, "module-qcodes_contrib_drivers.drivers.MontanaInstruments", false], [27, "module-qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation", false], [28, "module-qcodes_contrib_drivers.drivers.NationalInstruments", false], [28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.DAQ", false], [28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597", false], [28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654", false], [28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.RFSG", false], [28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.Switch", false], [28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper", false], [28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument", false], [28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.visa_types", false], [29, "module-qcodes_contrib_drivers.drivers.Newport", false], [29, "module-qcodes_contrib_drivers.drivers.Newport.AG_UC8", false], [30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments", false], [30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200", false], [30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120", false], [30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox", false], [30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.Triton", false], [30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox", false], [31, "module-qcodes_contrib_drivers.drivers.QDevil", false], [31, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC1", false], [31, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2", false], [31, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array", false], [31, "module-qcodes_contrib_drivers.drivers.QDevil.QSwitch", false], [32, "module-qcodes_contrib_drivers.drivers.QuTech", false], [32, "module-qcodes_contrib_drivers.drivers.QuTech.D4", false], [32, "module-qcodes_contrib_drivers.drivers.QuTech.D5a", false], [32, "module-qcodes_contrib_drivers.drivers.QuTech.F1d", false], [32, "module-qcodes_contrib_drivers.drivers.QuTech.IVVI", false], [32, "module-qcodes_contrib_drivers.drivers.QuTech.M2j", false], [32, "module-qcodes_contrib_drivers.drivers.QuTech.S5i", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim", false], [33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13", false], [34, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private", false], [34, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x", false], [34, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP", false], [35, "module-qcodes_contrib_drivers.drivers.Shamrock", false], [35, "module-qcodes_contrib_drivers.drivers.Shamrock.SR750", false], [36, "module-qcodes_contrib_drivers.drivers.Siglent", false], [36, "module-qcodes_contrib_drivers.drivers.Siglent.sdg", false], [36, "module-qcodes_contrib_drivers.drivers.Siglent.sdg_channel", false], [36, "module-qcodes_contrib_drivers.drivers.Siglent.sds", false], [36, "module-qcodes_contrib_drivers.drivers.Siglent.sdx", false], [37, "module-qcodes_contrib_drivers.drivers.SignalCore", false], [37, "module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore", false], [38, "module-qcodes_contrib_drivers.drivers.SingleQuantum", false], [38, "module-qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum", false], [39, "module-qcodes_contrib_drivers.drivers.Spectrum", false], [39, "module-qcodes_contrib_drivers.drivers.Spectrum.M4i", false], [40, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header", false], [40, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py", false], [40, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.regs", false], [40, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr", false], [41, "module-qcodes_contrib_drivers.drivers.Standa", false], [41, "module-qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168", false], [42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems", false], [42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580", false], [42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645", false], [42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928", false], [42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570", false], [42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844", false], [43, "module-qcodes_contrib_drivers.drivers.SwabianInstruments", false], [43, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger", false], [44, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.private", false], [44, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger", false], [45, "module-qcodes_contrib_drivers.drivers.Tektronix", false], [45, "module-qcodes_contrib_drivers.drivers.Tektronix.AFG3000", false], [45, "module-qcodes_contrib_drivers.drivers.Tektronix.AWG520", false], [45, "module-qcodes_contrib_drivers.drivers.Tektronix.FCA3100", false], [45, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan", false], [45, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700", false], [45, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430", false], [45, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500", false], [46, "module-qcodes_contrib_drivers.drivers.Thermotek", false], [46, "module-qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p", false], [47, "module-qcodes_contrib_drivers.drivers.Thorlabs", false], [47, "module-qcodes_contrib_drivers.drivers.Thorlabs.K10CR1", false], [47, "module-qcodes_contrib_drivers.drivers.Thorlabs.KDC101", false], [47, "module-qcodes_contrib_drivers.drivers.Thorlabs.KLS1550", false], [47, "module-qcodes_contrib_drivers.drivers.Thorlabs.MFF10x", false], [47, "module-qcodes_contrib_drivers.drivers.Thorlabs.PM100D", false], [47, "module-qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8", false], [47, "module-qcodes_contrib_drivers.drivers.Thorlabs.TDC001", false], [48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private", false], [48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.APT", false], [48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.CC", false], [48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.LS", false], [48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.kinesis", false], [49, "module-qcodes_contrib_drivers.drivers.Valon", false], [49, "module-qcodes_contrib_drivers.drivers.Valon.Valon_5015", false], [50, "module-qcodes_contrib_drivers.drivers.Vaunix", false], [50, "module-qcodes_contrib_drivers.drivers.Vaunix.LDA", false], [51, "module-qcodes_contrib_drivers.drivers.ZurichInstruments", false], [51, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI", false], [51, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8", false], [52, "module-qcodes_contrib_drivers.drivers.physik_instrumente", false], [52, "module-qcodes_contrib_drivers.drivers.physik_instrumente.mercury", false]], "montanainstruments_cryostation (class in qcodes_contrib_drivers.drivers.montanainstruments.cryostation)": [[27, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation", false]], "month (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.month", false]], "mot_get_home_parameters() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_get_home_parameters", false]], "mot_get_position() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_get_position", false]], "mot_get_status_bits() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_get_status_bits", false]], "mot_get_velocity_parameters() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_get_velocity_parameters", false]], "mot_move_absolute_ex() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_move_absolute_ex", false]], "mot_move_home() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_move_home", false]], "mot_move_jog() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_move_jog", false]], "mot_move_velocity() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_move_velocity", false]], "mot_set_home_parameters() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_set_home_parameters", false]], "mot_set_velocity_parameters() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_set_velocity_parameters", false]], "mot_stop_profiled() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_stop_profiled", false]], "motorchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel", false]], "move (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.move", false]], "move_abs() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.move_abs", false]], "move_limit() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.move_limit", false]], "move_reference() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.move_reference", false]], "move_reference() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.move_reference", false]], "move_rel() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.move_rel", false]], "move_to_reference_position() (qcodes_contrib_drivers.drivers.attocube.amc100.amc100axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AMC100Axis.move_to_reference_position", false]], "movests (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.MoveSts", false]], "mst601 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.MST601", false]], "mtsmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[26, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.MTSModule", false]], "multiaxisposition (class in qcodes_contrib_drivers.drivers.attocube.amc100)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPosition", false]], "multiaxispositionparameter (class in qcodes_contrib_drivers.drivers.attocube.amc100)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPositionParameter", false]], "multiple_steps() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.multiple_steps", false]], "multiple_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.multiple_trigger_acquisition", false]], "mvcmdsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.MvCmdSts", false]], "n_available() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.n_available", false]], "n_channels() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_channels", false]], "n_cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.n_cycles_remaining", false]], "n_errors() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_errors", false]], "n_external_inputs() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 static method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_external_inputs", false]], "n_external_outputs() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_external_outputs", false]], "n_triggers() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 static method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_triggers", false]], "na_mode() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.na_mode", false]], "name (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.namedargtype attribute)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType.name", false]], "name (qcodes_contrib_drivers.drivers.qdevil.qdac2.trace_context property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context.name", false]], "namedargtype (class in qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType", false]], "names (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.names", false]], "nationalinstruments_pxie_5654 (class in qcodes_contrib_drivers.drivers.nationalinstruments.pxie_5654)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654.NationalInstruments_PXIe_5654", false]], "nationalinstruments_rfsg (class in qcodes_contrib_drivers.drivers.nationalinstruments.rfsg)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG", false]], "new_waveform_from_double() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.new_waveform_from_double", false]], "new_waveform_from_file() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.new_waveform_from_file", false]], "new_waveform_from_int() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.new_waveform_from_int", false]], "newport_ag_uc8 (class in qcodes_contrib_drivers.drivers.newport.ag_uc8)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8", false]], "newport_ag_uc8_axis (class in qcodes_contrib_drivers.drivers.newport.ag_uc8)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis", false]], "newport_ag_uc8_channel (class in qcodes_contrib_drivers.drivers.newport.ag_uc8)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel", false]], "newport_ag_uc8_errorcode": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_ErrorCode", false]], "newport_ag_uc8_exception": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Exception", false]], "ni_pxie_2597 (class in qcodes_contrib_drivers.drivers.nationalinstruments.pxie_2597)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597.NI_PXIe_2597", false]], "ni_pxie_5654 (in module qcodes_contrib_drivers.drivers.nationalinstruments.pxie_5654)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654.NI_PXIe_5654", false]], "ni_rfsg (in module qcodes_contrib_drivers.drivers.nationalinstruments.rfsg)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NI_RFSG", false]], "ni_switch (class in qcodes_contrib_drivers.drivers.nationalinstruments.switch)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch", false]], "nidllinstrument (class in qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument", false]], "nidllwrapper (class in qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper", false]], "normal (qcodes_contrib_drivers.drivers.siglent.sds.triggermode attribute)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.TriggerMode.NORMAL", false]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Nothing", false]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Nothing", false]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Nothing", false]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Nothing", false]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Num", false]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Num", false]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Num", false]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Num", false]], "num_points (qcodes_contrib_drivers.drivers.siglent.sds.waveformsetup attribute)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.WaveformSetup.num_points", false]], "number (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot attribute)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.number", false]], "number (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.number", false]], "number_gratings (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.number_gratings", false]], "odc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.ODC001", false]], "off() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.off", false]], "off() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.off", false]], "off() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.off", false]], "off() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.off", false]], "off() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.off", false]], "off_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.off_modulation", false]], "offset (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.offset", false]], "offset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.offset", false]], "oidecs (class in qcodes_contrib_drivers.drivers.oxfordinstruments.proteox)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS", false]], "on() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.on", false]], "on() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.on", false]], "on() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.on", false]], "on() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.on", false]], "on_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.on_modulation", false]], "oneormore (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch attribute)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.OneOrMore", false]], "open_device() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.open_device", false]], "open_relay() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.open_relay", false]], "open_relays() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.open_relays", false]], "open_switch() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.open_switch", false]], "open_with_serial_number() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.open_with_serial_number", false]], "open_with_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.open_with_slot", false]], "operate_status_t (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT.operate_status_t", false]], "operatestatust (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT", false]], "optimize_for_frequency() (qcodes_contrib_drivers.drivers.qutech.s5i.s5i method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i.optimize_for_frequency", false]], "ost001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.OST001", false]], "output (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.output", false]], "output_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.output_enable", false]], "output_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.OUTPUT_MAPPING", false]], "output_mapping (qcodes_contrib_drivers.drivers.zurichinstruments.hf2li.hf2li attribute)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI.OUTPUT_MAPPING", false]], "output_mode (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[24, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.output_mode", false]], "output_mode() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.output_mode", false]], "output_power (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[24, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.output_power", false]], "output_setpoint (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[24, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.output_setpoint", false]], "outputchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel", false]], "outputfrequencysweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep", false]], "outputlevelsweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep", false]], "over_temp (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.over_temp", false]], "oxfordinstruments_ilm200 (class in qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200", false]], "oxfordinstruments_ips120 (class in qcodes_contrib_drivers.drivers.oxfordinstruments.ips120)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120", false]], "oxfordinstruments_kelvinox_igh (class in qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH", false]], "parameterwithsetsideeffect (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.ParameterWithSetSideEffect", false]], "parse_binary() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.parse_binary", false]], "parse_on_off() (in module qcodes_contrib_drivers.drivers.keysight.keysight_e8267d)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.parse_on_off", false]], "parsebool() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.parsebool", false]], "parseint() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.parseint", false]], "parsestr() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.parsestr", false]], "pci_clk_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.pci_clk_enable", false]], "peek_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.peek_A", false]], "period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.period", false]], "period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.period", false]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.period_end_marker", false]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.period_end_marker", false]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.period_end_marker", false]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.period_end_marker", false]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.period_start_marker", false]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.period_start_marker", false]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.period_start_marker", false]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.period_start_marker", false]], "phasemodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation", false]], "pin_map() (qcodes_contrib_drivers.drivers.generalmicrowave.gm349.gm349 method)": [[16, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349.pin_map", false]], "pll_lmx1_status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.pll_lmx1_status", false]], "pll_lmx2_status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.pll_lmx2_status", false]], "pll_status_t (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT.pll_status_t", false]], "pll_xtal_status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.pll_xtal_status", false]], "pllstatust (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT", false]], "pointiq (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointIQ", false]], "pointmagphase (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase", false]], "points (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.points", false]], "points (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.points", false]], "points (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.points", false]], "points() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.points", false]], "points() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.points", false]], "polarity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.polarity", false]], "polarity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.polarity", false]], "polarity_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.POLARITY_MAPPING", false]], "poll_move_wave_t() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[25, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.poll_move_wave_t", false]], "poll_raw_binary_data() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.poll_raw_binary_data", false]], "poll_wave_m() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[25, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.poll_wave_m", false]], "port_count() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.port_count", false]], "portchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel", false]], "position (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.position", false]], "position (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.Position", false]], "position (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.Position", false]], "position (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.getposition attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition.Position", false]], "power (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.power", false]], "power_level (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.power_level", false]], "power_parser() (qcodes_contrib_drivers.drivers.agilent.agilent_n9000a.agilent_n9000a method)": [[2, "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A.power_parser", false]], "powerchannel (class in qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel", false]], "precisionmotorchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel", false]], "prepare_trace() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048trace method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace.prepare_trace", false]], "prescale_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.PRESCALE_MAPPING", false]], "preset() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.preset", false]], "print_dac_voltages() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.print_dac_voltages", false]], "print_overview() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.print_overview", false]], "print_pyvisa_resources() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase static method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.print_pyvisa_resources", false]], "print_slopes() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.print_slopes", false]], "print_syncs() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.print_syncs", false]], "prm1z8 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.PRM1Z8", false]], "process() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.h2py)": [[40, "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py.process", false]], "product_serial_number (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.product_serial_number", false]], "productdescription (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.ProductDescription", false]], "publish() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.publish", false]], "pulsegenerator (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator", false]], "pulsemodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation", false]], "pwrsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.PWRSts", false]], "pxi_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.hwtriggert attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT.pxi_enable", false]], "pxi_line (qcodes_contrib_drivers.drivers.signalcore.signalcore.hwtriggert attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT.pxi_line", false]], "pytify() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.h2py)": [[40, "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py.pytify", false]], "q_bias (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.q_bias", false]], "q_offset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.q_offset", false]], "qcodes_contrib_drivers.drivers": [[0, "module-qcodes_contrib_drivers.drivers", false]], "qcodes_contrib_drivers.drivers.advantech": [[1, "module-qcodes_contrib_drivers.drivers.Advantech", false]], "qcodes_contrib_drivers.drivers.advantech.pcie_1751": [[1, "module-qcodes_contrib_drivers.drivers.Advantech.PCIE_1751", false]], "qcodes_contrib_drivers.drivers.agilent": [[2, "module-qcodes_contrib_drivers.drivers.Agilent", false]], "qcodes_contrib_drivers.drivers.agilent.agilent_n9000a": [[2, "module-qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A", false]], "qcodes_contrib_drivers.drivers.aimtti": [[3, "module-qcodes_contrib_drivers.drivers.AimTTi", false]], "qcodes_contrib_drivers.drivers.aimtti.el320p": [[3, "module-qcodes_contrib_drivers.drivers.AimTTi.EL320P", false]], "qcodes_contrib_drivers.drivers.ametek": [[4, "module-qcodes_contrib_drivers.drivers.Ametek", false]], "qcodes_contrib_drivers.drivers.ametek.sr_7270": [[4, "module-qcodes_contrib_drivers.drivers.Ametek.SR_7270", false]], "qcodes_contrib_drivers.drivers.andor": [[5, "module-qcodes_contrib_drivers.drivers.Andor", false]], "qcodes_contrib_drivers.drivers.andor.du401": [[5, "module-qcodes_contrib_drivers.drivers.Andor.DU401", false]], "qcodes_contrib_drivers.drivers.attocube": [[6, "module-qcodes_contrib_drivers.drivers.Attocube", false]], "qcodes_contrib_drivers.drivers.attocube.amc100": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.AMC100", false]], "qcodes_contrib_drivers.drivers.attocube.anc300": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300", false]], "qcodes_contrib_drivers.drivers.attocube.anc300sim": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300sim", false]], "qcodes_contrib_drivers.drivers.attocube.anc350": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350", false]], "qcodes_contrib_drivers.drivers.attocube.anc350lib": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib", false]], "qcodes_contrib_drivers.drivers.attocube.anc350lib.interface": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface", false]], "qcodes_contrib_drivers.drivers.attocube.anc350lib.v3": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3", false]], "qcodes_contrib_drivers.drivers.attocube.anc350lib.v4": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4", false]], "qcodes_contrib_drivers.drivers.aviosys": [[8, "module-qcodes_contrib_drivers.drivers.Aviosys", false]], "qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s": [[8, "module-qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S", false]], "qcodes_contrib_drivers.drivers.bilt": [[9, "module-qcodes_contrib_drivers.drivers.Bilt", false]], "qcodes_contrib_drivers.drivers.bilt.itest": [[9, "module-qcodes_contrib_drivers.drivers.Bilt.ITest", false]], "qcodes_contrib_drivers.drivers.bluefors": [[10, "module-qcodes_contrib_drivers.drivers.BlueFors", false]], "qcodes_contrib_drivers.drivers.bluefors.bluefors": [[10, "module-qcodes_contrib_drivers.drivers.BlueFors.BlueFors", false]], "qcodes_contrib_drivers.drivers.cmts5048": [[0, "module-qcodes_contrib_drivers.drivers.CMTS5048", false]], "qcodes_contrib_drivers.drivers.coppermountain": [[11, "module-qcodes_contrib_drivers.drivers.CopperMountain", false]], "qcodes_contrib_drivers.drivers.coppermountain.m5180": [[11, "module-qcodes_contrib_drivers.drivers.CopperMountain.M5180", false]], "qcodes_contrib_drivers.drivers.coppermountain.s5048": [[11, "module-qcodes_contrib_drivers.drivers.CopperMountain.S5048", false]], "qcodes_contrib_drivers.drivers.cryocon": [[12, "module-qcodes_contrib_drivers.drivers.Cryocon", false]], "qcodes_contrib_drivers.drivers.cryocon.cryocon_26": [[12, "module-qcodes_contrib_drivers.drivers.Cryocon.cryocon_26", false]], "qcodes_contrib_drivers.drivers.cryogenic": [[13, "module-qcodes_contrib_drivers.drivers.Cryogenic", false]], "qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c": [[13, "module-qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C", false]], "qcodes_contrib_drivers.drivers.daylightsolutions": [[14, "module-qcodes_contrib_drivers.drivers.DaylightSolutions", false]], "qcodes_contrib_drivers.drivers.daylightsolutions.mircat": [[14, "module-qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat", false]], "qcodes_contrib_drivers.drivers.erainstruments": [[15, "module-qcodes_contrib_drivers.drivers.ERAInstruments", false]], "qcodes_contrib_drivers.drivers.erainstruments.erasynth": [[15, "module-qcodes_contrib_drivers.drivers.ERAInstruments.erasynth", false]], "qcodes_contrib_drivers.drivers.generalmicrowave": [[16, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave", false]], "qcodes_contrib_drivers.drivers.generalmicrowave.gm349": [[16, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349", false]], "qcodes_contrib_drivers.drivers.gentec": [[17, "module-qcodes_contrib_drivers.drivers.Gentec", false]], "qcodes_contrib_drivers.drivers.gentec.gentec_maestro": [[17, "module-qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro", false]], "qcodes_contrib_drivers.drivers.holzworth": [[18, "module-qcodes_contrib_drivers.drivers.Holzworth", false]], "qcodes_contrib_drivers.drivers.holzworth.hs900": [[18, "module-qcodes_contrib_drivers.drivers.Holzworth.HS900", false]], "qcodes_contrib_drivers.drivers.holzworth.hs9008b": [[18, "module-qcodes_contrib_drivers.drivers.Holzworth.HS9008B", false]], "qcodes_contrib_drivers.drivers.horiba": [[19, "module-qcodes_contrib_drivers.drivers.Horiba", false]], "qcodes_contrib_drivers.drivers.horiba.horiba_fhr": [[19, "module-qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR", false]], "qcodes_contrib_drivers.drivers.horiba.private": [[20, "module-qcodes_contrib_drivers.drivers.Horiba.private", false]], "qcodes_contrib_drivers.drivers.horiba.private.fhr_client": [[20, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_client", false]], "qcodes_contrib_drivers.drivers.horiba.private.fhr_server": [[20, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_server", false]], "qcodes_contrib_drivers.drivers.keysight": [[21, "module-qcodes_contrib_drivers.drivers.Keysight", false]], "qcodes_contrib_drivers.drivers.keysight.keysight_e36313a": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A", false]], "qcodes_contrib_drivers.drivers.keysight.keysight_e8267d": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D", false]], "qcodes_contrib_drivers.drivers.keysight.keysight_j7211": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211", false]], "qcodes_contrib_drivers.drivers.keysight.keysight_m3201a": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A", false]], "qcodes_contrib_drivers.drivers.keysight.keysight_m3300a": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A", false]], "qcodes_contrib_drivers.drivers.keysight.m3202a": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.M3202A", false]], "qcodes_contrib_drivers.drivers.keysight.sd_common": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common", false]], "qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager", false]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG", false]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async", false]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG", false]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module", false]], "qcodes_contrib_drivers.drivers.lakeshore": [[23, "module-qcodes_contrib_drivers.drivers.Lakeshore", false]], "qcodes_contrib_drivers.drivers.lakeshore.model_331": [[23, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_331", false]], "qcodes_contrib_drivers.drivers.lakeshore.model_625": [[23, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_625", false]], "qcodes_contrib_drivers.drivers.lighthousephotonics": [[24, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics", false]], "qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g": [[24, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G", false]], "qcodes_contrib_drivers.drivers.m2": [[25, "module-qcodes_contrib_drivers.drivers.M2", false]], "qcodes_contrib_drivers.drivers.m2.m2_solstis_3": [[25, "module-qcodes_contrib_drivers.drivers.M2.M2_Solstis_3", false]], "qcodes_contrib_drivers.drivers.minicircuits": [[26, "module-qcodes_contrib_drivers.drivers.Minicircuits", false]], "qcodes_contrib_drivers.drivers.minicircuits.ztm": [[26, "module-qcodes_contrib_drivers.drivers.Minicircuits.ZTM", false]], "qcodes_contrib_drivers.drivers.montanainstruments": [[27, "module-qcodes_contrib_drivers.drivers.MontanaInstruments", false]], "qcodes_contrib_drivers.drivers.montanainstruments.cryostation": [[27, "module-qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation", false]], "qcodes_contrib_drivers.drivers.nationalinstruments": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.daq": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.DAQ", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.pxie_2597": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.pxie_5654": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.rfsg": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.RFSG", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.switch": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.Switch", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.visa_types": [[28, "module-qcodes_contrib_drivers.drivers.NationalInstruments.visa_types", false]], "qcodes_contrib_drivers.drivers.newport": [[29, "module-qcodes_contrib_drivers.drivers.Newport", false]], "qcodes_contrib_drivers.drivers.newport.ag_uc8": [[29, "module-qcodes_contrib_drivers.drivers.Newport.AG_UC8", false]], "qcodes_contrib_drivers.drivers.oxfordinstruments": [[30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments", false]], "qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200": [[30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200", false]], "qcodes_contrib_drivers.drivers.oxfordinstruments.ips120": [[30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120", false]], "qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox": [[30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox", false]], "qcodes_contrib_drivers.drivers.oxfordinstruments.proteox": [[30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox", false]], "qcodes_contrib_drivers.drivers.oxfordinstruments.triton": [[30, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.Triton", false]], "qcodes_contrib_drivers.drivers.physik_instrumente": [[52, "module-qcodes_contrib_drivers.drivers.physik_instrumente", false]], "qcodes_contrib_drivers.drivers.physik_instrumente.mercury": [[52, "module-qcodes_contrib_drivers.drivers.physik_instrumente.mercury", false]], "qcodes_contrib_drivers.drivers.qdevil": [[31, "module-qcodes_contrib_drivers.drivers.QDevil", false]], "qcodes_contrib_drivers.drivers.qdevil.qdac1": [[31, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC1", false]], "qcodes_contrib_drivers.drivers.qdevil.qdac2": [[31, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2", false]], "qcodes_contrib_drivers.drivers.qdevil.qdac2_array": [[31, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array", false]], "qcodes_contrib_drivers.drivers.qdevil.qswitch": [[31, "module-qcodes_contrib_drivers.drivers.QDevil.QSwitch", false]], "qcodes_contrib_drivers.drivers.qutech": [[32, "module-qcodes_contrib_drivers.drivers.QuTech", false]], "qcodes_contrib_drivers.drivers.qutech.d4": [[32, "module-qcodes_contrib_drivers.drivers.QuTech.D4", false]], "qcodes_contrib_drivers.drivers.qutech.d5a": [[32, "module-qcodes_contrib_drivers.drivers.QuTech.D5a", false]], "qcodes_contrib_drivers.drivers.qutech.f1d": [[32, "module-qcodes_contrib_drivers.drivers.QuTech.F1d", false]], "qcodes_contrib_drivers.drivers.qutech.ivvi": [[32, "module-qcodes_contrib_drivers.drivers.QuTech.IVVI", false]], "qcodes_contrib_drivers.drivers.qutech.m2j": [[32, "module-qcodes_contrib_drivers.drivers.QuTech.M2j", false]], "qcodes_contrib_drivers.drivers.qutech.s5i": [[32, "module-qcodes_contrib_drivers.drivers.QuTech.S5i", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8041": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8042": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8043": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2020": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2030": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4030": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4040": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.private": [[34, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmc804x": [[34, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp": [[34, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smr40": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13": [[33, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13", false]], "qcodes_contrib_drivers.drivers.shamrock": [[35, "module-qcodes_contrib_drivers.drivers.Shamrock", false]], "qcodes_contrib_drivers.drivers.shamrock.sr750": [[35, "module-qcodes_contrib_drivers.drivers.Shamrock.SR750", false]], "qcodes_contrib_drivers.drivers.siglent": [[36, "module-qcodes_contrib_drivers.drivers.Siglent", false]], "qcodes_contrib_drivers.drivers.siglent.sdg": [[36, "module-qcodes_contrib_drivers.drivers.Siglent.sdg", false]], "qcodes_contrib_drivers.drivers.siglent.sdg_channel": [[36, "module-qcodes_contrib_drivers.drivers.Siglent.sdg_channel", false]], "qcodes_contrib_drivers.drivers.siglent.sds": [[36, "module-qcodes_contrib_drivers.drivers.Siglent.sds", false]], "qcodes_contrib_drivers.drivers.siglent.sdx": [[36, "module-qcodes_contrib_drivers.drivers.Siglent.sdx", false]], "qcodes_contrib_drivers.drivers.signalcore": [[37, "module-qcodes_contrib_drivers.drivers.SignalCore", false]], "qcodes_contrib_drivers.drivers.signalcore.signalcore": [[37, "module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore", false]], "qcodes_contrib_drivers.drivers.singlequantum": [[38, "module-qcodes_contrib_drivers.drivers.SingleQuantum", false]], "qcodes_contrib_drivers.drivers.singlequantum.singlequantum": [[38, "module-qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum", false]], "qcodes_contrib_drivers.drivers.spectrum": [[39, "module-qcodes_contrib_drivers.drivers.Spectrum", false]], "qcodes_contrib_drivers.drivers.spectrum.m4i": [[39, "module-qcodes_contrib_drivers.drivers.Spectrum.M4i", false]], "qcodes_contrib_drivers.drivers.spectrum.py_header": [[40, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header", false]], "qcodes_contrib_drivers.drivers.spectrum.py_header.h2py": [[40, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py", false]], "qcodes_contrib_drivers.drivers.spectrum.py_header.regs": [[40, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.regs", false]], "qcodes_contrib_drivers.drivers.spectrum.py_header.spcerr": [[40, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr", false]], "qcodes_contrib_drivers.drivers.standa": [[41, "module-qcodes_contrib_drivers.drivers.Standa", false]], "qcodes_contrib_drivers.drivers.standa.standa_10mwa168": [[41, "module-qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168", false]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems": [[42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems", false]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580": [[42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580", false]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645": [[42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645", false]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928": [[42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928", false]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr570": [[42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570", false]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844": [[42, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844", false]], "qcodes_contrib_drivers.drivers.swabianinstruments": [[43, "module-qcodes_contrib_drivers.drivers.SwabianInstruments", false]], "qcodes_contrib_drivers.drivers.swabianinstruments.private": [[44, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.private", false]], "qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger": [[44, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger", false]], "qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger": [[43, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger", false]], "qcodes_contrib_drivers.drivers.tektronix": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix", false]], "qcodes_contrib_drivers.drivers.tektronix.afg3000": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.AFG3000", false]], "qcodes_contrib_drivers.drivers.tektronix.awg520": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.AWG520", false]], "qcodes_contrib_drivers.drivers.tektronix.fca3100": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.FCA3100", false]], "qcodes_contrib_drivers.drivers.tektronix.keithley_2000_scan": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan", false]], "qcodes_contrib_drivers.drivers.tektronix.keithley_2700": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700", false]], "qcodes_contrib_drivers.drivers.tektronix.keithley_6430": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430", false]], "qcodes_contrib_drivers.drivers.tektronix.keithley_6500": [[45, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500", false]], "qcodes_contrib_drivers.drivers.thermotek": [[46, "module-qcodes_contrib_drivers.drivers.Thermotek", false]], "qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p": [[46, "module-qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p", false]], "qcodes_contrib_drivers.drivers.thorlabs": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs", false]], "qcodes_contrib_drivers.drivers.thorlabs.k10cr1": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.K10CR1", false]], "qcodes_contrib_drivers.drivers.thorlabs.kdc101": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.KDC101", false]], "qcodes_contrib_drivers.drivers.thorlabs.kls1550": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.KLS1550", false]], "qcodes_contrib_drivers.drivers.thorlabs.mff10x": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.MFF10x", false]], "qcodes_contrib_drivers.drivers.thorlabs.pm100d": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.PM100D", false]], "qcodes_contrib_drivers.drivers.thorlabs.private": [[48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private", false]], "qcodes_contrib_drivers.drivers.thorlabs.private.apt": [[48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.APT", false]], "qcodes_contrib_drivers.drivers.thorlabs.private.cc": [[48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.CC", false]], "qcodes_contrib_drivers.drivers.thorlabs.private.kinesis": [[48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.kinesis", false]], "qcodes_contrib_drivers.drivers.thorlabs.private.ls": [[48, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.LS", false]], "qcodes_contrib_drivers.drivers.thorlabs.prm1z8": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8", false]], "qcodes_contrib_drivers.drivers.thorlabs.tdc001": [[47, "module-qcodes_contrib_drivers.drivers.Thorlabs.TDC001", false]], "qcodes_contrib_drivers.drivers.valon": [[49, "module-qcodes_contrib_drivers.drivers.Valon", false]], "qcodes_contrib_drivers.drivers.valon.valon_5015": [[49, "module-qcodes_contrib_drivers.drivers.Valon.Valon_5015", false]], "qcodes_contrib_drivers.drivers.vaunix": [[50, "module-qcodes_contrib_drivers.drivers.Vaunix", false]], "qcodes_contrib_drivers.drivers.vaunix.lda": [[50, "module-qcodes_contrib_drivers.drivers.Vaunix.LDA", false]], "qcodes_contrib_drivers.drivers.zurichinstruments": [[51, "module-qcodes_contrib_drivers.drivers.ZurichInstruments", false]], "qcodes_contrib_drivers.drivers.zurichinstruments.hf2li": [[51, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI", false]], "qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8": [[51, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8", false]], "qdac (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac", false]], "qdac2 (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2", false]], "qdac2_array (class in qcodes_contrib_drivers.drivers.qdevil.qdac2_array)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array", false]], "qdac2channel (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel", false]], "qdac2externaltrigger (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2ExternalTrigger", false]], "qdac2trigger_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context", false]], "qdac_names() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.qdac_names", false]], "qdacchannel (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel", false]], "qdacmultichannelparameter (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacMultiChannelParameter", false]], "qswitch (class in qcodes_contrib_drivers.drivers.qdevil.qswitch)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch", false]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerinputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode.Quadratur", false]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.Quadratur", false]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerinputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode.Quadratur", false]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.Quadratur", false]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode.Quadrature", false]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode.Quadrature", false]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode.Quadrature", false]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode.Quadrature", false]], "query() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.query", false]], "query() (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c method)": [[13, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.query", false]], "query() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.query", false]], "rad_to_deg() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d static method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.rad_to_deg", false]], "ramp_up() (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg method)": [[24, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.ramp_up", false]], "ramp_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.ramp_voltages", false]], "ramp_voltages_2d() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.ramp_voltages_2d", false]], "ratio (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.ratio", false]], "read() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.read", false]], "read() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.read", false]], "read() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.read", false]], "read() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.read", false]], "read_fpga() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.read_fpga", false]], "read_fpga_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.read_fpga_array", false]], "read_pin() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.read_pin", false]], "read_port() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.read_port", false]], "recall() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.recall", false]], "ref_100_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.ref_100_pll_ld", false]], "ref_10_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.ref_10_pll_ld", false]], "ref_osc_source (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.ref_osc_source", false]], "ref_out_select (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.ref_out_select", false]], "refer_to_api_doc() (in module qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.refer_to_api_doc", false]], "reference_tcxo_ocxo (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynth attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynth.reference_tcxo_ocxo", false]], "reference_tcxo_ocxo (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthplus attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlus.reference_tcxo_ocxo", false]], "reference_tcxo_ocxo (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthplusplus attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlusPlus.reference_tcxo_ocxo", false]], "register_external_ip() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.register_external_ip", false]], "register_external_ip() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.register_external_ip", false]], "register_measurement() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggersynchronizedmeasurements method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerSynchronizedMeasurements.register_measurement", false]], "release (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Release", false]], "release() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.release", false]], "release() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.release", false]], "release() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.release", false]], "release_all() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.release_all", false]], "release_waveform_memory() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.release_waveform_memory", false]], "reload_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reload_waveform", false]], "reload_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.reload_waveform", false]], "reload_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reload_waveform_int16", false]], "reload_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.reload_waveform_int16", false]], "remote() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.remote", false]], "remote() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.remote", false]], "remote() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.remote", false]], "remote() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.remote", false]], "remove_all_measurements() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.remove_all_measurements", false]], "remove_all_virtual_channels() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.remove_all_virtual_channels", false]], "remove_traces() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.remove_traces", false]], "request32() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.request32", false]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Res", false]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Res", false]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Res", false]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Res", false]], "resend_waveform() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.resend_waveform", false]], "reset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.reset", false]], "reset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.reset", false]], "reset() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.reset", false]], "reset() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.reset", false]], "reset() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.reset", false]], "reset() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.reset", false]], "reset() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.reset", false]], "reset() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.reset", false]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.reset", false]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.reset", false]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.reset", false]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.reset", false]], "reset() (qcodes_contrib_drivers.drivers.siglent.sdx.siglentsdx method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentSDx.reset", false]], "reset() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.reset", false]], "reset() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580.cs580 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580.reset", false]], "reset() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.reset", false]], "reset() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr570.sr570 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570.SR570.reset", false]], "reset() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.reset", false]], "reset() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.reset", false]], "reset() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.reset", false]], "reset_averages() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.reset_averages", false]], "reset_channel_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reset_channel_phase", false]], "reset_clock_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reset_clock_phase", false]], "reset_clock_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.reset_clock_phase", false]], "reset_delay (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.reset_delay", false]], "reset_edit_memory() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.reset_edit_memory", false]], "reset_module() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.reset_module", false]], "reset_multiple_channel_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reset_multiple_channel_phase", false]], "reset_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.reset_position", false]], "reset_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.reset_position", false]], "resolution (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.resolution", false]], "result (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.task property)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task.result", false]], "result_parser() (in module qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.result_parser", false]], "retrace (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.retrace", false]], "retrace (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.retrace", false]], "retrace (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.retrace", false]], "retrieve_data() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.retrieve_data", false]], "return_self() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.return_self", false]], "return_to_start (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.return_to_start", false]], "reverse (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.homelimitswitch attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch.REVERSE", false]], "reverse (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.rotationdirection attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection.REVERSE", false]], "rf1_lock_mode (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.rf1_lock_mode", false]], "rf1_loop_gain (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.rf1_loop_gain", false]], "rf_mode (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.rf_mode", false]], "rf_phase_offset (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.rf_phase_offset", false]], "rising (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libsignaledge attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge.Rising", false]], "rising (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libsignaledge attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge.Rising", false]], "rohdeschwarz_smb100a (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A", false]], "rohdeschwarz_smr40 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smr40)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40", false]], "rohdeschwarz_smw200a (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A", false]], "rohdeschwarzhmc8041 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8041)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041.RohdeSchwarzHMC8041", false]], "rohdeschwarzhmc8042 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8042)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042.RohdeSchwarzHMC8042", false]], "rohdeschwarzhmc8043 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8043)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043.RohdeSchwarzHMC8043", false]], "rohdeschwarzhmc804xchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmc804x)": [[34, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x.RohdeSchwarzHMC804xChannel", false]], "rohdeschwarzhmp4030 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4030)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030.RohdeSchwarzHMP4030", false]], "rohdeschwarzhmp4040 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2020)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020.RohdeSchwarzHMP4040", false]], "rohdeschwarzhmp4040 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2030)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030.RohdeSchwarzHMP4040", false]], "rohdeschwarzhmp4040 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4040)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040.RohdeSchwarzHMP4040", false]], "rohdeschwarzhmpchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp)": [[34, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel", false]], "rotate_nvalve() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.rotate_Nvalve", false]], "rotationdirection (class in qcodes_contrib_drivers.drivers.thorlabs.k10cr1)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection", false]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType.Rotator", false]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType.Rotator", false]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType.Rotator", false]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType.Rotator", false]], "round_dac() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.round_dac", false]], "run() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.task method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task.run", false]], "run() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqcounts method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts.run", false]], "run() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.run", false]], "run_continously() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.run_continously", false]], "run_n_times() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.run_N_times", false]], "run_self_test() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.run_self_test", false]], "run_self_test() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.run_self_test", false]], "run_self_tests() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.run_self_tests", false]], "run_to_field() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.run_to_field", false]], "run_to_field_wait() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.run_to_field_wait", false]], "running (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.running", false]], "running (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.running", false]], "running (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.running", false]], "s5i (class in qcodes_contrib_drivers.drivers.qutech.s5i)": [[32, "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i", false]], "sa_mode() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.sa_mode", false]], "safrequencysweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep", false]], "sample() (qcodes_contrib_drivers.drivers.zurichinstruments.hf2li.hf2li method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI.sample", false]], "save() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.save", false]], "save_params() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350.save_params", false]], "save_params() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.save_params", false]], "save_params() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.save_params", false]], "save_settings() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.save_settings", false]], "save_settings() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.save_settings", false]], "sc5521a (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A", false]], "scaling (qcodes_contrib_drivers.drivers.vaunix.lda.ldaattenuation attribute)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaAttenuation.scaling", false]], "scaling (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter attribute)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.scaling", false]], "scaling (qcodes_contrib_drivers.drivers.vaunix.lda.ldaworkingfrequency attribute)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency.scaling", false]], "scc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.SCC001", false]], "scdp_bmp_bytes() (qcodes_contrib_drivers.drivers.siglent.sdx.siglentsdx method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentSDx.scdp_bmp_bytes", false]], "screen_dump_bmp() (qcodes_contrib_drivers.drivers.siglent.sdx.siglentsdx method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentSDx.screen_dump_bmp", false]], "sd_awg (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG", false]], "sd_awg_async (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async", false]], "sd_dig (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG", false]], "sd_module (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module", false]], "select_actuator() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.select_actuator", false]], "select_actuator() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.select_actuator", false]], "self_calibrate() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.self_calibrate", false]], "self_calibrate() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.self_calibrate", false]], "self_test() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.self_test", false]], "self_test() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.self_test", false]], "send() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.send", false]], "send_cmd() (qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp.rohdeschwarzhmpchannel method)": [[34, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel.send_cmd", false]], "send_message() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[25, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.send_message", false]], "send_pattern() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_pattern", false]], "send_sequence() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_sequence", false]], "send_sequence2() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_sequence2", false]], "send_waveform() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_waveform", false]], "sensitivity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.sensitivity", false]], "sensitivity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.sensitivity", false]], "sensitivity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.sensitivity", false]], "sensitivity_value_map (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 attribute)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.sensitivity_value_map", false]], "sensorchannel (class in qcodes_contrib_drivers.drivers.lakeshore.model_331)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.SensorChannel", false]], "serial (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.serial", false]], "serial_number (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.serial_number", false]], "serial_number (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.serial_number", false]], "serial_number (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.serial_number", false]], "serial_number (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.serial_number", false]], "serial_number (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.serial_number", false]], "set_accumulation_cycle_time() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_accumulation_cycle_time", false]], "set_acquisition_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_acquisition_mode", false]], "set_address() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisa method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisa.set_address", false]], "set_address() (qcodes_contrib_drivers.drivers.holzworth.hs9008b.hs9008b method)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B.set_address", false]], "set_address() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisa method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisa.set_address", false]], "set_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_amplitude", false]], "set_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_amplitude", false]], "set_analog_trigger_mask() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_analog_trigger_mask", false]], "set_asynchronous() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.set_asynchronous", false]], "set_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.set_attribute", false]], "set_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.set_attribute", false]], "set_axis_output() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_axis_output", false]], "set_axis_output() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_axis_output", false]], "set_baud_rate() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.portchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel.set_baud_rate", false]], "set_bias_current() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_bias_current", false]], "set_channel_amplitude() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_amplitude", false]], "set_channel_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_frequency", false]], "set_channel_grouping() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.set_channel_grouping", false]], "set_channel_offset() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_offset", false]], "set_channel_or_trigger_settings() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.set_channel_OR_trigger_settings", false]], "set_channel_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_phase", false]], "set_channel_settings() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.set_channel_settings", false]], "set_channel_wave_shape() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_wave_shape", false]], "set_clksys_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig static method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_clksys_frequency", false]], "set_clock_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_clock_frequency", false]], "set_coupling() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_coupling", false]], "set_current_camera() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_current_camera", false]], "set_current_folder_name() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_current_folder_name", false]], "set_dac_unit() (qcodes_contrib_drivers.drivers.qutech.d5a.d5a method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a.set_dac_unit", false]], "set_dacs_zero() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.set_dacs_zero", false]], "set_dacs_zero() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.set_dacs_zero", false]], "set_daq_trigger_delay() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_daq_trigger_delay", false]], "set_daq_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_daq_trigger_mode", false]], "set_dark_counts_auto_iv() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_dark_counts_auto_iv", false]], "set_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_dc_voltage", false]], "set_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_dc_voltage", false]], "set_defaults() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.set_defaults", false]], "set_digital_filter_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_digital_filter_mode", false]], "set_digital_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_digital_trigger_mode", false]], "set_digital_trigger_source() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_digital_trigger_source", false]], "set_exposure_time() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_exposure_time", false]], "set_ext0_or_trigger_settings() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.set_ext0_OR_trigger_settings", false]], "set_ext_trig() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.set_ext_trig", false]], "set_ext_trigger_behaviour() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_ext_trigger_behaviour", false]], "set_ext_trigger_source() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_ext_trigger_source", false]], "set_field() (qcodes_contrib_drivers.drivers.lakeshore.model_625.lakeshore625 method)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.Model_625.Lakeshore625.set_field", false]], "set_filter_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_filter_mode", false]], "set_fpga_pc_port() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.set_fpga_pc_port", false]], "set_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_frequency", false]], "set_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_frequency", false]], "set_full_scale() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_full_scale", false]], "set_grating() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_grating", false]], "set_hvi_register() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.set_hvi_register", false]], "set_id() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.motorchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel.set_id", false]], "set_impedance() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_impedance", false]], "set_ini_params() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.gratingchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.GratingChannel.set_ini_params", false]], "set_input_delay() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.set_input_delay", false]], "set_iq_modulation() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_iq_modulation", false]], "set_jumpmode() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_jumpmode", false]], "set_magnet_state() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.set_magnet_state", false]], "set_magnet_target() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.set_magnet_target", false]], "set_marker_config() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_marker_config", false]], "set_measurement_periode() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_measurement_periode", false]], "set_mix_chamber_heater_mode() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.set_mix_chamber_heater_mode", false]], "set_mix_chamber_heater_power_range() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.set_mix_chamber_heater_power_range", false]], "set_mode() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.set_mode", false]], "set_mode_volt_dc() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.set_mode_volt_dc", false]], "set_n_cycles() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_n_cycles", false]], "set_n_points() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_n_points", false]], "set_number_accumulations() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_number_accumulations", false]], "set_number_pixels() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_number_pixels", false]], "set_output_current_target() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.set_output_current_target", false]], "set_parameter_bounds() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.set_parameter_bounds", false]], "set_persistent() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.set_persistent", false]], "set_pixel_width() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_pixel_width", false]], "set_points_per_cycle() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_points_per_cycle", false]], "set_pol_dacrack() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.set_pol_dacrack", false]], "set_prescaler() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_prescaler", false]], "set_pulse_parameters() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.set_pulse_parameters", false]], "set_pxi_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.set_pxi_trigger", false]], "set_raw() (qcodes_contrib_drivers.drivers.andor.du401.spectrum method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.attocube.amc100.multiaxispositionparameter method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPositionParameter.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.generalmicrowave.gm349.gm349attenuation method)": [[16, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqanalogoutputvoltage method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqdigitaloutputstate method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputState.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.magnetcurrentparameters method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagnetCurrentParameters.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.magneticfieldparameters method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagneticFieldParameters.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.generatedsetpoints method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter method)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.set_raw", false]], "set_read_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_read_mode", false]], "set_remote_status() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.set_remote_status", false]], "set_sequence() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_sequence", false]], "set_setup() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.precisionmotorchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel.set_setup", false]], "set_setup_filename() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_setup_filename", false]], "set_shutter() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_shutter", false]], "set_slit() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_slit", false]], "set_smooth() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.set_smooth", false]], "set_sweep() (qcodes_contrib_drivers.drivers.coppermountain.m5180.frequencysweepmagphase method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase.set_sweep", false]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.complexsweep method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep.set_sweep", false]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweep method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep.set_sweep", false]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweepmagphase method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase.set_sweep", false]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.safrequencysweep method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep.set_sweep", false]], "set_sweep_parameters() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.set_sweep_parameters", false]], "set_target_ground() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.set_target_ground", false]], "set_target_ground() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.set_target_ground", false]], "set_target_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_target_position", false]], "set_target_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_target_position", false]], "set_target_range() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_target_range", false]], "set_target_range() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_target_range", false]], "set_temp_and_wait() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[27, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.set_temp_and_wait", false]], "set_temperature() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_temperature", false]], "set_test_signal() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.set_test_signal", false]], "set_timeout() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.portchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel.set_timeout", false]], "set_timeout() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_timeout", false]], "set_to_fast() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.set_to_fast", false]], "set_to_fft() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.set_to_fft", false]], "set_to_slow() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.set_to_slow", false]], "set_trig_mode() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.set_trig_mode", false]], "set_trigger_immediate() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.set_trigger_immediate", false]], "set_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_trigger_io", false]], "set_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_trigger_io", false]], "set_trigger_level() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_trigger_level", false]], "set_trigger_level() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.set_trigger_level", false]], "set_trigger_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_trigger_mode", false]], "set_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_trigger_mode", false]], "set_trigger_threshold() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_trigger_threshold", false]], "set_virtual_voltage() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.set_virtual_voltage", false]], "set_virtual_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.set_virtual_voltages", false]], "set_virtual_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.set_virtual_voltages", false]], "set_voltage() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.set_voltage", false]], "set_waveform_limit() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.set_waveform_limit", false]], "set_waveform_limit() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.set_waveform_limit", false]], "set_waveform_setup() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.set_waveform_setup", false]], "set_wavelength() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_wavelength", false]], "set_zero_offset() (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro method)": [[17, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.set_zero_offset", false]], "setup_multi_recording() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.setup_multi_recording", false]], "shamrock_sr750 (class in qcodes_contrib_drivers.drivers.shamrock.sr750)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750", false]], "shamrockcif (class in qcodes_contrib_drivers.drivers.shamrock.sr750)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF", false]], "shamrockcif (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.ShamrockCIF", false]], "shape (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.shape", false]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape", false]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.shape", false]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.shape", false]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.shape", false]], "shape_duty_cycle (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape_duty_cycle", false]], "shape_period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape_period", false]], "shape_width (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape_width", false]], "shut_down() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.shut_down", false]], "siglent_sdg_2042x (class in qcodes_contrib_drivers.drivers.siglent.sdg)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sdg.Siglent_SDG_2042X", false]], "siglent_sdg_20xx (class in qcodes_contrib_drivers.drivers.siglent.sdg)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sdg.Siglent_SDG_20xx", false]], "siglent_sdg_6022x (class in qcodes_contrib_drivers.drivers.siglent.sdg)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sdg.Siglent_SDG_6022X", false]], "siglent_sdg_60xx (class in qcodes_contrib_drivers.drivers.siglent.sdg)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sdg.Siglent_SDG_60xx", false]], "siglent_sds_120nxe (class in qcodes_contrib_drivers.drivers.siglent.sds)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE", false]], "siglentchannel (class in qcodes_contrib_drivers.drivers.siglent.sdx)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentChannel", false]], "siglentsdgchannel (class in qcodes_contrib_drivers.drivers.siglent.sdg_channel)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sdg_channel.SiglentSDGChannel", false]], "siglentsdgx (class in qcodes_contrib_drivers.drivers.siglent.sdg)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sdg.SiglentSDGx", false]], "siglentsdx (class in qcodes_contrib_drivers.drivers.siglent.sdx)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentSDx", false]], "signalrecovery7270 (class in qcodes_contrib_drivers.drivers.ametek.sr_7270)": [[4, "qcodes_contrib_drivers.drivers.Ametek.SR_7270.Signalrecovery7270", false]], "sim928 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928", false]], "sine (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.sine", false]], "sine_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context", false]], "sine_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.sine_wave", false]], "single (qcodes_contrib_drivers.drivers.siglent.sds.triggermode attribute)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.TriggerMode.SINGLE", false]], "single_software_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.single_software_trigger_acquisition", false]], "single_software_trigger_acquisition_boxcar() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.single_software_trigger_acquisition_boxcar", false]], "single_step() (qcodes_contrib_drivers.drivers.attocube.amc100.amc100axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AMC100Axis.single_step", false]], "single_step() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.single_step", false]], "single_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.single_trigger_acquisition", false]], "size (qcodes_contrib_drivers.drivers.qdevil.qdac2.trace_context property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context.size", false]], "slitchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.SlitChannel", false]], "slow_command_timeout (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.slow_command_timeout", false]], "snap() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.snap", false]], "snap_parameters (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 attribute)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.SNAP_PARAMETERS", false]], "snapshot() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.snapshot", false]], "snapshot_base() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[25, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.snapshot_base", false]], "snapshot_base() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.snapshot_base", false]], "snapshot_base() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdacchannel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel.snapshot_base", false]], "snapshot_base() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggerinstrumentbase method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerInstrumentBase.snapshot_base", false]], "snapshot_base() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.snapshot_base", false]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.source", false]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.source", false]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.source", false]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.source", false]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.source", false]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.source", false]], "source_path (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.source_path", false]], "sp4tmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[26, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.SP4TModule", false]], "sp6tmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[26, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.SP6TModule", false]], "sp8tmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[26, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.SP8TModule", false]], "spacing (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.spacing", false]], "spacing (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.spacing", false]], "spacing (qcodes_contrib_drivers.drivers.siglent.sds.waveformsetup attribute)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.WaveformSetup.spacing", false]], "spdtmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[26, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.SPDTModule", false]], "specommand() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.SpeCommand", false]], "specommand() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.SpeCommand", false]], "specommandiniparams() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.SpeCommandIniParams", false]], "specommandiniparams() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.SpeCommandIniParams", false]], "specommandsetup() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.SpeCommandSetup", false]], "specommandsetup() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.SpeCommandSetup", false]], "spectrum (class in qcodes_contrib_drivers.drivers.andor.du401)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum", false]], "speed (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libamplitudecontrolmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode.Speed", false]], "speed (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libamplitudecontrolmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode.Speed", false]], "speed_table (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis attribute)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.SPEED_TABLE", false]], "speerror": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.SpeError", false]], "split_version_string_into_components() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.split_version_string_into_components", false]], "sqcounts (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts", false]], "sqtalk (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk", false]], "square (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.square", false]], "square_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context", false]], "square_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.square_wave", false]], "sr570 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr570)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570.SR570", false]], "sr844 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844", false]], "staircase (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.staircase", false]], "standa_10mwa168 (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Standa_10MWA168", false]], "standby() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[27, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.standby", false]], "start (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.start", false]], "start() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.virtual_sweep_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.start", false]], "start() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.start", false]], "start_acquisition() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.start_acquisition", false]], "start_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.start_acquisition", false]], "start_all() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.start_all", false]], "start_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.start_auto_move", false]], "start_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.start_auto_move", false]], "start_awg() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.start_awg", false]], "start_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.start_continuous_move", false]], "start_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.start_continuous_move", false]], "start_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.start_continuous_move", false]], "start_cooldown() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[27, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.start_cooldown", false]], "start_for() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.start_for", false]], "start_idx (qcodes_contrib_drivers.drivers.siglent.sds.waveformsetup attribute)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.WaveformSetup.start_idx", false]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_marker", false]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_marker", false]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_marker", false]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_marker", false]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_on", false]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_on", false]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_on", false]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_on", false]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_on", false]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_on_external", false]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_on_external", false]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_on_external", false]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_on_external", false]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_on_external", false]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_once_on", false]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_once_on", false]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_once_on", false]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_once_on", false]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_once_on", false]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_once_on_external", false]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_once_on_external", false]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_once_on_external", false]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_once_on_external", false]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_once_on_external", false]], "start_recording_scpi() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.start_recording_scpi", false]], "start_recording_scpi() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.start_recording_scpi", false]], "start_single_step() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.start_single_step", false]], "start_single_step() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.start_single_step", false]], "start_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.start_sweep", false]], "start_triggered() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.start_triggered", false]], "start_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.start_V", false]], "start_warmup() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[27, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.start_warmup", false]], "startup() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.startup", false]], "state (qcodes_contrib_drivers.drivers.attocube.anc300.anc300triggerout attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.state", false]], "state_force_update() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.state_force_update", false]], "state_to_compressed_list() (in module qcodes_contrib_drivers.drivers.qdevil.qswitch)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.state_to_compressed_list", false]], "state_to_expanded_list() (in module qcodes_contrib_drivers.drivers.qdevil.qswitch)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.state_to_expanded_list", false]], "status (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status", false]], "status (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.status", false]], "status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.status", false]], "status (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[24, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.status", false]], "status() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[46, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.status", false]], "step_on_hw_trig (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.step_on_hw_trig", false]], "stepsize (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libamplitudecontrolmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode.StepSize", false]], "stepsize (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libamplitudecontrolmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode.StepSize", false]], "still_heater_off() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.still_heater_off", false]], "stop (qcodes_contrib_drivers.drivers.siglent.sds.triggermode attribute)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.TriggerMode.STOP", false]], "stop() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.stop", false]], "stop() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.motorchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel.stop", false]], "stop() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.stop", false]], "stop() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.stop", false]], "stop() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.stop", false]], "stop_automation() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[27, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.stop_automation", false]], "stop_awg() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.stop_awg", false]], "stop_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.stop_continuous_move", false]], "stop_move_wave_t() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[25, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.stop_move_wave_t", false]], "stop_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.stop_V", false]], "stop_wave_m() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[25, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.stop_wave_m", false]], "stopall() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.stopall", false]], "stopmove() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.stopMove", false]], "sub_jsons() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.sub_jsons", false]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.SUCCESS_CODES", false]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.SUCCESS_CODES", false]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.SUCCESS_CODES", false]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.SUCCESS_CODES", false]], "sum_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.sum_pll_ld", false]], "swap (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.swap", false]], "sweep_center (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_center", false]], "sweep_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context", false]], "sweep_cycles (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_cycles", false]], "sweep_dir (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.sweep_dir", false]], "sweep_dwell (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.sweep_dwell", false]], "sweep_dwell_time (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_dwell_time", false]], "sweep_en (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.sweep_en", false]], "sweep_field() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.sweep_field", false]], "sweep_mode (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.sweep_mode", false]], "sweep_psu_output() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.sweep_psu_output", false]], "sweep_small_field_step() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.sweep_small_field_step", false]], "sweep_span (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_span", false]], "sweep_start (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_start", false]], "sweep_start_freq (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_start_freq", false]], "sweep_step_freq (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_step_freq", false]], "sweep_stop (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_stop", false]], "sweep_stop_freq (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_stop_freq", false]], "sweep_trigger (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.sweep_trigger", false]], "switchable() (in module qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.switchable", false]], "switchchannel (class in qcodes_contrib_drivers.drivers.nationalinstruments.switch)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel", false]], "sync() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.sync", false]], "synchronize_phase() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.synchronize_phase", false]], "synthesizer_mode (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.synthesizer_mode", false]], "sztypetoname() (in module qcodes_contrib_drivers.drivers.spectrum.m4i)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.szTypeToName", false]], "target_position (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.target_position", false]], "target_range (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.target_range", false]], "task (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task", false]], "tdc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.TDC001", false]], "tektronix_awg520 (class in qcodes_contrib_drivers.drivers.tektronix.awg520)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520", false]], "temperature (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.temperature", false]], "thermotekt255p (class in qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p)": [[46, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p", false]], "thorlab_pm100d (class in qcodes_contrib_drivers.drivers.thorlabs.pm100d)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.PM100D.Thorlab_PM100D", false]], "thorlabs_apt (class in qcodes_contrib_drivers.drivers.thorlabs.private.apt)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT", false]], "thorlabs_k10cr1 (class in qcodes_contrib_drivers.drivers.thorlabs.k10cr1)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1", false]], "thorlabs_kdc101 (class in qcodes_contrib_drivers.drivers.thorlabs.kdc101)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.KDC101.Thorlabs_KDC101", false]], "thorlabs_kls1550 (class in qcodes_contrib_drivers.drivers.thorlabs.kls1550)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.KLS1550.Thorlabs_KLS1550", false]], "thorlabs_mff10x (class in qcodes_contrib_drivers.drivers.thorlabs.mff10x)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x", false]], "thorlabs_prm1z8 (class in qcodes_contrib_drivers.drivers.thorlabs.prm1z8)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8", false]], "thorlabs_tdc001 (class in qcodes_contrib_drivers.drivers.thorlabs.tdc001)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.TDC001.Thorlabs_TDC001", false]], "thorlabsexception": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsException", false]], "thorlabshwtype (class in qcodes_contrib_drivers.drivers.thorlabs.private.apt)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType", false]], "threaded() (in module qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.threaded", false]], "time_s() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.time_s", false]], "timearray (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.TimeArray", false]], "timestatistics (class in qcodes_contrib_drivers.drivers.tektronix.fca3100)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.TimeStatistics", false]], "timetagger (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[43, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger", false]], "timetaggerinstrumentbase (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerInstrumentBase", false]], "timetaggermeasurement (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerMeasurement", false]], "timetaggermodule (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerModule", false]], "timetaggersynchronizedmeasurements (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerSynchronizedMeasurements", false]], "timetaggervirtualchannel (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerVirtualChannel", false]], "to_setpoint() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.to_setpoint", false]], "to_zero() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.to_zero", false]], "total_depth (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.total_depth", false]], "total_deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.total_deviation", false]], "total_deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.total_deviation", false]], "trace_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context", false]], "tracenotready": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.TraceNotReady", false]], "traces() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.traces", false]], "transition_type (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.transition_type", false]], "trapez_fall (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_fall", false]], "trapez_height (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_height", false]], "trapez_period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_period", false]], "trapez_rise (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_rise", false]], "tri_waveform (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.tri_waveform", false]], "triangle (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.triangle", false]], "triangle_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context", false]], "triangle_period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.triangle_period", false]], "triangle_rise (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.triangle_rise", false]], "triangle_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.triangle_wave", false]], "trig_out_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.trig_out_enable", false]], "trig_out_on_cycle (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.trig_out_on_cycle", false]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode.Trigger", false]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode.Trigger", false]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode.Trigger", false]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode.Trigger", false]], "trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.trigger", false]], "trigger() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.trigger", false]], "trigger_impedance (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.trigger_impedance", false]], "trigger_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.TRIGGER_MAPPING", false]], "trigger_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.trigger_mode", false]], "trigger_out (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.trigger_out", false]], "triggerdown (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.triggerDown", false]], "triggermode (class in qcodes_contrib_drivers.drivers.siglent.sds)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.TriggerMode", false]], "triggerup (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.triggerUp", false]], "triton (class in qcodes_contrib_drivers.drivers.oxfordinstruments.triton)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton.Triton", false]], "tst001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.TST001", false]], "type (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.type", false]], "type() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.motorchannel class method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel.type", false]], "typevalidator (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TypeValidator", false]], "ucurposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.uCurPosition", false]], "ucurspeed (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.uCurSpeed", false]], "unit (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.gratingchannel property)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.GratingChannel.unit", false]], "unit (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.precisionmotorchannel property)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel.unit", false]], "unit (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.slitchannel property)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.SlitChannel.unit", false]], "unregister_measurement() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggersynchronizedmeasurements method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerSynchronizedMeasurements.unregister_measurement", false]], "update_ch_unit() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.update_ch_unit", false]], "update_lin_traces() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.update_lin_traces", false]], "update_traces() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.update_traces", false]], "update_unit() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.update_unit", false]], "update_units_if_constant_sample_rate() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.generatedsetpoints method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints.update_units_if_constant_sample_rate", false]], "upload_sequence_program() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.upload_sequence_program", false]], "upload_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.upload_waveform", false]], "upload_waveform() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.upload_waveform", false]], "upload_waveform() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.upload_waveform", false]], "uploader_ready() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.uploader_ready", false]], "uposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.getposition attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition.uPosition", false]], "upwr (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Upwr", false]], "uusb (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Uusb", false]], "validate() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.arraylikevalidator method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.ArrayLikeValidator.validate", false]], "validate() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.typevalidator method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TypeValidator.validate", false]], "valon5015 (class in qcodes_contrib_drivers.drivers.valon.valon_5015)": [[49, "qcodes_contrib_drivers.drivers.Valon.Valon_5015.Valon5015", false]], "value (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.attributewrapper attribute)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper.value", false]], "value (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2trigger_context property)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context.value", false]], "value_sensitivity_map (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 attribute)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.value_sensitivity_map", false]], "values_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.values_V", false]], "values_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.values_V", false]], "vaunix_lda (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[50, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA", false]], "vcl2csv() (qcodes_contrib_drivers.drivers.oxfordinstruments.triton.triton method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton.Triton.vcl2csv", false]], "vendor (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.vendor", false]], "verbose (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.verbose", false]], "verbose (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager attribute)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.verbose", false]], "verbose (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.task attribute)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task.verbose", false]], "verbose (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif attribute)": [[35, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.verbose", false]], "verbose (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt attribute)": [[48, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.verbose", false]], "version (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.version", false]], "version (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.version", false]], "version (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[47, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.version", false]], "version() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.version", false]], "vhigh_ihigh (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode attribute)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.vhigh_ihigh", false]], "vhigh_ilow (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode attribute)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.vhigh_ilow", false]], "video_polarity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.video_polarity", false]], "virtual_detune() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_detune", false]], "virtual_sweep() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_sweep", false]], "virtual_sweep2d() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_sweep2d", false]], "virtual_sweep_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context", false]], "virtual_voltage() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_voltage", false]], "virtual_voltage() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.virtual_voltage", false]], "vlow_ilow (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode attribute)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.vlow_ilow", false]], "voltage (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.voltage", false]], "voltage (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.voltage", false]], "voltage (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.voltage", false]], "voltage (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.voltage", false]], "wait() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.wait", false]], "wait() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[45, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.wait", false]], "wait_for_acquisition() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.wait_for_acquisition", false]], "wait_ready() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[39, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.wait_ready", false]], "wait_stability() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[27, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.wait_stability", false]], "wait_until_field_depersisted() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.wait_until_field_depersisted", false]], "wait_until_field_persistent() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.wait_until_field_persistent", false]], "wait_until_field_stable() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.wait_until_field_stable", false]], "wait_until_finished() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin method)": [[44, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.wait_until_finished", false]], "wait_until_temperature_stable_std_control() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[30, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.wait_until_temperature_stable_std_control", false]], "wait_uploaded() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.wait_uploaded", false]], "waitmove() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.waitMove", false]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.WARNING_CODES", false]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.WARNING_CODES", false]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.WARNING_CODES", false]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.WARNING_CODES", false]], "wave_number (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference property)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.wave_number", false]], "waveform (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform", false]], "waveform() (qcodes_contrib_drivers.drivers.qdevil.qdac2.trace_context method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context.waveform", false]], "waveform_to_csv() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.waveform_to_csv", false]], "waveform_to_wave() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.waveform_to_wave", false]], "waveformreference (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference", false]], "waveformsetup (class in qcodes_contrib_drivers.drivers.siglent.sds)": [[36, "qcodes_contrib_drivers.drivers.Siglent.sds.WaveformSetup", false]], "websqcontrolqcode (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[38, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.WebSQControlqcode", false]], "wideband (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.wideband", false]], "width (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.width", false]], "wifi_gateway_address (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_gateway_address", false]], "wifi_hotspot_password (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_hotspot_password", false]], "wifi_hotspot_ssid (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_hotspot_ssid", false]], "wifi_ip_address (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_ip_address", false]], "wifi_mode (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_mode", false]], "wifi_off() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_off", false]], "wifi_on() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_on", false]], "wifi_rssi (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_rssi", false]], "wifi_station_password (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_station_password", false]], "wifi_station_ssid (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_station_ssid", false]], "wifi_subnet_address (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_subnet_address", false]], "windsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[41, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.WindSts", false]], "work_hours (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[24, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.work_hours", false]], "wrap_dll_function() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.wrap_dll_function", false]], "wrap_dll_function_checked() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[28, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.wrap_dll_function_checked", false]], "write() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.write", false]], "write() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.write", false]], "write() (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg method)": [[24, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.write", false]], "write() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.write", false]], "write() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_channel method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel.write", false]], "write() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.write", false]], "write() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.write", false]], "write() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.write", false]], "write() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.write", false]], "write() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[32, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.write", false]], "write() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.write", false]], "write() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[46, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.write", false]], "write_channel() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.write_channel", false]], "write_channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.write_channel", false]], "write_channel_floats() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.write_channel_floats", false]], "write_floats() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[31, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.write_floats", false]], "write_fpga() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.write_fpga", false]], "write_fpga_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.write_fpga_array", false]], "write_module() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[42, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.write_module", false]], "write_pin() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.write_pin", false]], "write_port() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.write_port", false]], "write_raw() (qcodes_contrib_drivers.drivers.ametek.sr_7270.signalrecovery7270 method)": [[4, "qcodes_contrib_drivers.drivers.Ametek.SR_7270.Signalrecovery7270.write_raw", false]], "write_raw() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.write_raw", false]], "write_raw() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.write_raw", false]], "x_pixels (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.x_pixels", false]], "y_pixels (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.y_pixels", false]], "year (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[37, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.year", false]], "zero_position() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[29, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.zero_position", false]], "zihdawg8 (class in qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8)": [[51, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8", false]], "zvl13 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[33, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13", false]]}, "objects": {"qcodes_contrib_drivers": [[0, 0, 0, "-", "drivers"]], "qcodes_contrib_drivers.drivers": [[1, 0, 0, "-", "Advantech"], [2, 0, 0, "-", "Agilent"], [3, 0, 0, "-", "AimTTi"], [4, 0, 0, "-", "Ametek"], [5, 0, 0, "-", "Andor"], [6, 0, 0, "-", "Attocube"], [8, 0, 0, "-", "Aviosys"], [9, 0, 0, "-", "Bilt"], [10, 0, 0, "-", "BlueFors"], [0, 0, 0, "-", "CMTS5048"], [11, 0, 0, "-", "CopperMountain"], [12, 0, 0, "-", "Cryocon"], [13, 0, 0, "-", "Cryogenic"], [14, 0, 0, "-", "DaylightSolutions"], [15, 0, 0, "-", "ERAInstruments"], [16, 0, 0, "-", "GeneralMicrowave"], [17, 0, 0, "-", "Gentec"], [18, 0, 0, "-", "Holzworth"], [19, 0, 0, "-", "Horiba"], [21, 0, 0, "-", "Keysight"], [23, 0, 0, "-", "Lakeshore"], [24, 0, 0, "-", "LighthousePhotonics"], [25, 0, 0, "-", "M2"], [26, 0, 0, "-", "Minicircuits"], [27, 0, 0, "-", "MontanaInstruments"], [28, 0, 0, "-", "NationalInstruments"], [29, 0, 0, "-", "Newport"], [30, 0, 0, "-", "OxfordInstruments"], [31, 0, 0, "-", "QDevil"], [32, 0, 0, "-", "QuTech"], [33, 0, 0, "-", "RohdeSchwarz"], [35, 0, 0, "-", "Shamrock"], [36, 0, 0, "-", "Siglent"], [37, 0, 0, "-", "SignalCore"], [38, 0, 0, "-", "SingleQuantum"], [39, 0, 0, "-", "Spectrum"], [41, 0, 0, "-", "Standa"], [42, 0, 0, "-", "StanfordResearchSystems"], [43, 0, 0, "-", "SwabianInstruments"], [45, 0, 0, "-", "Tektronix"], [46, 0, 0, "-", "Thermotek"], [47, 0, 0, "-", "Thorlabs"], [49, 0, 0, "-", "Valon"], [50, 0, 0, "-", "Vaunix"], [51, 0, 0, "-", "ZurichInstruments"], [52, 0, 0, "-", "physik_instrumente"]], "qcodes_contrib_drivers.drivers.Advantech": [[1, 0, 0, "-", "PCIE_1751"]], "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751": [[1, 1, 1, "", "Advantech_PCIE_1751"], [1, 4, 1, "", "DAQNaviException"], [1, 4, 1, "", "DAQNaviWarning"]], "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751": [[1, 2, 1, "", "ERRORMSG"], [1, 3, 1, "", "check"], [1, 3, 1, "", "close"], [1, 3, 1, "", "get_idn"], [1, 3, 1, "", "port_count"], [1, 3, 1, "", "read_pin"], [1, 3, 1, "", "read_port"], [1, 3, 1, "", "write_pin"], [1, 3, 1, "", "write_port"]], "qcodes_contrib_drivers.drivers.Agilent": [[2, 0, 0, "-", "Agilent_N9000A"]], "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A": [[2, 1, 1, "", "Agilent_N9000A"]], "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A": [[2, 3, 1, "", "__init__"], [2, 3, 1, "", "power_parser"]], "qcodes_contrib_drivers.drivers.AimTTi": [[3, 0, 0, "-", "EL320P"]], "qcodes_contrib_drivers.drivers.AimTTi.EL320P": [[3, 1, 1, "", "EL320P"]], "qcodes_contrib_drivers.drivers.Ametek": [[4, 0, 0, "-", "SR_7270"]], "qcodes_contrib_drivers.drivers.Ametek.SR_7270": [[4, 1, 1, "", "Signalrecovery7270"]], "qcodes_contrib_drivers.drivers.Ametek.SR_7270.Signalrecovery7270": [[4, 3, 1, "", "ask_raw"], [4, 3, 1, "", "get_idn"], [4, 3, 1, "", "write_raw"]], "qcodes_contrib_drivers.drivers.Andor": [[5, 0, 0, "-", "DU401"]], "qcodes_contrib_drivers.drivers.Andor.DU401": [[5, 1, 1, "", "Andor_DU401"], [5, 1, 1, "", "Spectrum"], [5, 1, 1, "", "atmcd64d"]], "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401": [[5, 3, 1, "", "close"], [5, 2, 1, "", "firmware_build"], [5, 2, 1, "", "firmware_version"], [5, 3, 1, "", "get_idn"], [5, 2, 1, "", "head_model"], [5, 2, 1, "", "serial_number"], [5, 2, 1, "", "x_pixels"], [5, 2, 1, "", "y_pixels"]], "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum": [[5, 3, 1, "", "get_raw"], [5, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d": [[5, 3, 1, "", "cooler_off"], [5, 3, 1, "", "cooler_on"], [5, 2, 1, "", "dll"], [5, 3, 1, "", "error_check"], [5, 3, 1, "", "get_acquired_data"], [5, 3, 1, "", "get_acquisition_timings"], [5, 3, 1, "", "get_camera_handle"], [5, 3, 1, "", "get_camera_serial_number"], [5, 3, 1, "", "get_detector"], [5, 3, 1, "", "get_filter_mode"], [5, 3, 1, "", "get_hardware_version"], [5, 3, 1, "", "get_head_model"], [5, 3, 1, "", "get_status"], [5, 3, 1, "", "get_temperature"], [5, 3, 1, "", "get_temperature_range"], [5, 3, 1, "", "initialize"], [5, 3, 1, "", "is_cooler_on"], [5, 3, 1, "", "set_accumulation_cycle_time"], [5, 3, 1, "", "set_acquisition_mode"], [5, 3, 1, "", "set_current_camera"], [5, 3, 1, "", "set_exposure_time"], [5, 3, 1, "", "set_filter_mode"], [5, 3, 1, "", "set_number_accumulations"], [5, 3, 1, "", "set_read_mode"], [5, 3, 1, "", "set_shutter"], [5, 3, 1, "", "set_temperature"], [5, 3, 1, "", "set_trigger_mode"], [5, 3, 1, "", "shut_down"], [5, 3, 1, "", "start_acquisition"], [5, 2, 1, "", "verbose"], [5, 3, 1, "", "wait_for_acquisition"]], "qcodes_contrib_drivers.drivers.Attocube": [[6, 0, 0, "-", "AMC100"], [6, 0, 0, "-", "ANC300"], [6, 0, 0, "-", "ANC300sim"], [6, 0, 0, "-", "ANC350"], [7, 0, 0, "-", "ANC350Lib"]], "qcodes_contrib_drivers.drivers.Attocube.AMC100": [[6, 1, 1, "", "AMC100Axis"], [6, 1, 1, "", "AttocubeAMC100"], [6, 1, 1, "", "MultiAxisPosition"], [6, 1, 1, "", "MultiAxisPositionParameter"]], "qcodes_contrib_drivers.drivers.Attocube.AMC100.AMC100Axis": [[6, 3, 1, "", "move_to_reference_position"], [6, 3, 1, "", "single_step"]], "qcodes_contrib_drivers.drivers.Attocube.AMC100.AttocubeAMC100": [[6, 3, 1, "", "close"], [6, 5, 1, "", "exception_type"], [6, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPosition": [[6, 2, 1, "", "axis_1"], [6, 2, 1, "", "axis_2"], [6, 2, 1, "", "axis_3"]], "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPositionParameter": [[6, 3, 1, "", "get_raw"], [6, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300": [[6, 1, 1, "", "ANC300"], [6, 1, 1, "", "Anc300Axis"], [6, 1, 1, "", "Anc300TriggerOut"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300": [[6, 3, 1, "", "ask_raw"], [6, 3, 1, "", "close"], [6, 3, 1, "", "getall"], [6, 3, 1, "", "stopall"], [6, 3, 1, "", "version"], [6, 3, 1, "", "write_raw"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis": [[6, 3, 1, "", "__init__"], [6, 2, 1, "", "ac"], [6, 2, 1, "", "amplitude"], [6, 2, 1, "", "dc"], [6, 2, 1, "", "filter"], [6, 2, 1, "", "frequency"], [6, 2, 1, "", "mode"], [6, 2, 1, "", "move"], [6, 2, 1, "", "offset"], [6, 2, 1, "", "start"], [6, 3, 1, "", "stopMove"], [6, 2, 1, "", "triggerDown"], [6, 2, 1, "", "triggerUp"], [6, 2, 1, "", "voltage"], [6, 3, 1, "", "waitMove"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut": [[6, 3, 1, "", "__init__"], [6, 2, 1, "", "state"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim": [[6, 1, 1, "", "MockVisa"], [6, 1, 1, "", "MockVisaHandle"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisa": [[6, 3, 1, "", "set_address"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle": [[6, 3, 1, "", "ask"], [6, 3, 1, "", "clear"], [6, 3, 1, "", "close"], [6, 2, 1, "", "cmddef"], [6, 3, 1, "", "query"], [6, 3, 1, "", "read"], [6, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350": [[6, 1, 1, "", "ANC350"], [6, 1, 1, "", "Anc350Axis"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350": [[6, 3, 1, "", "close"], [6, 3, 1, "", "get_idn"], [6, 3, 1, "", "save_params"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis": [[6, 2, 1, "", "actuator"], [6, 2, 1, "", "actuator_name"], [6, 2, 1, "", "amplitude"], [6, 2, 1, "", "capacitance"], [6, 3, 1, "", "disable_auto_move"], [6, 3, 1, "", "enable_auto_move"], [6, 2, 1, "", "frequency"], [6, 3, 1, "", "multiple_steps"], [6, 2, 1, "", "position"], [6, 3, 1, "", "single_step"], [6, 3, 1, "", "start_continuous_move"], [6, 2, 1, "", "status"], [6, 3, 1, "", "stop_continuous_move"], [6, 2, 1, "", "target_position"], [6, 2, 1, "", "target_range"], [6, 2, 1, "", "voltage"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib": [[7, 1, 1, "", "ANC350LibActuatorType"], [7, 1, 1, "", "ANC350LibAmplitudeControlMode"], [7, 1, 1, "", "ANC350LibDeviceType"], [7, 4, 1, "", "ANC350LibError"], [7, 1, 1, "", "ANC350LibExternalTriggerMode"], [7, 1, 1, "", "ANC350LibSignalEdge"], [7, 1, 1, "", "ANC350LibTriggerInputMode"], [7, 1, 1, "", "ANC350LibTriggerOutputMode"], [7, 1, 1, "", "ANC350LibTriggerPolarity"], [7, 1, 1, "", "ANC350v3Lib"], [7, 4, 1, "", "ANC350v3LibError"], [7, 1, 1, "", "ANC350v4Lib"], [7, 0, 0, "-", "interface"], [7, 0, 0, "-", "v3"], [7, 0, 0, "-", "v4"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType": [[7, 2, 1, "", "Goniometer"], [7, 2, 1, "", "Linear"], [7, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode": [[7, 2, 1, "", "Amplitude"], [7, 2, 1, "", "Speed"], [7, 2, 1, "", "StepSize"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType": [[7, 2, 1, "", "Fps"], [7, 2, 1, "", "Nothing"], [7, 2, 1, "", "Num"], [7, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError": [[7, 2, 1, "", "SUCCESS_CODES"], [7, 2, 1, "", "WARNING_CODES"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "check_error"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode": [[7, 2, 1, "", "Disable"], [7, 2, 1, "", "Quadrature"], [7, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge": [[7, 2, 1, "", "Falling"], [7, 2, 1, "", "Rising"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode": [[7, 2, 1, "", "Coarse"], [7, 2, 1, "", "Disable"], [7, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode": [[7, 2, 1, "", "Disable"], [7, 2, 1, "", "IcHaus"], [7, 2, 1, "", "Position"], [7, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity": [[7, 2, 1, "", "High"], [7, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib": [[7, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "configure_a_quad_b_in"], [7, 3, 1, "", "configure_a_quad_b_out"], [7, 3, 1, "", "configure_duty_cycle"], [7, 3, 1, "", "configure_ext_trigger"], [7, 3, 1, "", "configure_nsl_trigger"], [7, 3, 1, "", "configure_nsl_trigger_axis"], [7, 3, 1, "", "configure_rng_trigger"], [7, 3, 1, "", "configure_rng_trigger_eps"], [7, 3, 1, "", "configure_rng_trigger_pol"], [7, 3, 1, "", "connect"], [7, 3, 1, "", "disconnect"], [7, 3, 1, "", "discover"], [7, 3, 1, "", "enable_ref_auto_reset"], [7, 3, 1, "", "enable_ref_auto_update"], [7, 3, 1, "", "enable_sensor"], [7, 3, 1, "", "get_actuator_name"], [7, 3, 1, "", "get_actuator_type"], [7, 3, 1, "", "get_amplitude"], [7, 3, 1, "", "get_axis_status"], [7, 3, 1, "", "get_device_config"], [7, 3, 1, "", "get_device_info"], [7, 3, 1, "", "get_firmware_version"], [7, 3, 1, "", "get_frequency"], [7, 3, 1, "", "get_position"], [7, 3, 1, "", "get_ref_position"], [7, 3, 1, "", "measure_capacitance"], [7, 3, 1, "", "move_reference"], [7, 3, 1, "", "reset_position"], [7, 3, 1, "", "save_params"], [7, 3, 1, "", "select_actuator"], [7, 3, 1, "", "set_amplitude"], [7, 3, 1, "", "set_axis_output"], [7, 3, 1, "", "set_dc_voltage"], [7, 3, 1, "", "set_frequency"], [7, 3, 1, "", "set_target_position"], [7, 3, 1, "", "set_target_range"], [7, 3, 1, "", "start_auto_move"], [7, 3, 1, "", "start_continuous_move"], [7, 3, 1, "", "start_single_step"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError": [[7, 3, 1, "", "__init__"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib": [[7, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "get_dc_voltage"], [7, 3, 1, "", "get_lut_name"], [7, 3, 1, "", "load_lut_file"], [7, 3, 1, "", "register_external_ip"], [7, 3, 1, "", "set_target_ground"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface": [[7, 1, 1, "", "ANC350LibActuatorType"], [7, 1, 1, "", "ANC350LibAmplitudeControlMode"], [7, 1, 1, "", "ANC350LibDeviceType"], [7, 4, 1, "", "ANC350LibError"], [7, 1, 1, "", "ANC350LibExternalTriggerMode"], [7, 1, 1, "", "ANC350LibSignalEdge"], [7, 1, 1, "", "ANC350LibTriggerInputMode"], [7, 1, 1, "", "ANC350LibTriggerOutputMode"], [7, 1, 1, "", "ANC350LibTriggerPolarity"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType": [[7, 2, 1, "", "Goniometer"], [7, 2, 1, "", "Linear"], [7, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode": [[7, 2, 1, "", "Amplitude"], [7, 2, 1, "", "Speed"], [7, 2, 1, "", "StepSize"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType": [[7, 2, 1, "", "Fps"], [7, 2, 1, "", "Nothing"], [7, 2, 1, "", "Num"], [7, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError": [[7, 2, 1, "", "SUCCESS_CODES"], [7, 2, 1, "", "WARNING_CODES"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "check_error"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode": [[7, 2, 1, "", "Disable"], [7, 2, 1, "", "Quadrature"], [7, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge": [[7, 2, 1, "", "Falling"], [7, 2, 1, "", "Rising"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode": [[7, 2, 1, "", "Coarse"], [7, 2, 1, "", "Disable"], [7, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode": [[7, 2, 1, "", "Disable"], [7, 2, 1, "", "IcHaus"], [7, 2, 1, "", "Position"], [7, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity": [[7, 2, 1, "", "High"], [7, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3": [[7, 1, 1, "", "ANC350LibActuatorType"], [7, 1, 1, "", "ANC350LibDeviceType"], [7, 4, 1, "", "ANC350LibError"], [7, 1, 1, "", "ANC350LibExternalTriggerMode"], [7, 1, 1, "", "ANC350LibTriggerPolarity"], [7, 1, 1, "", "ANC350v3Lib"], [7, 4, 1, "", "ANC350v3LibError"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType": [[7, 2, 1, "", "Goniometer"], [7, 2, 1, "", "Linear"], [7, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType": [[7, 2, 1, "", "Fps"], [7, 2, 1, "", "Nothing"], [7, 2, 1, "", "Num"], [7, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError": [[7, 2, 1, "", "SUCCESS_CODES"], [7, 2, 1, "", "WARNING_CODES"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "check_error"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode": [[7, 2, 1, "", "Disable"], [7, 2, 1, "", "Quadrature"], [7, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity": [[7, 2, 1, "", "High"], [7, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib": [[7, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "configure_a_quad_b_in"], [7, 3, 1, "", "configure_a_quad_b_out"], [7, 3, 1, "", "configure_duty_cycle"], [7, 3, 1, "", "configure_ext_trigger"], [7, 3, 1, "", "configure_nsl_trigger"], [7, 3, 1, "", "configure_nsl_trigger_axis"], [7, 3, 1, "", "configure_rng_trigger"], [7, 3, 1, "", "configure_rng_trigger_eps"], [7, 3, 1, "", "configure_rng_trigger_pol"], [7, 3, 1, "", "connect"], [7, 3, 1, "", "disconnect"], [7, 3, 1, "", "discover"], [7, 3, 1, "", "enable_ref_auto_reset"], [7, 3, 1, "", "enable_ref_auto_update"], [7, 3, 1, "", "enable_sensor"], [7, 3, 1, "", "get_actuator_name"], [7, 3, 1, "", "get_actuator_type"], [7, 3, 1, "", "get_amplitude"], [7, 3, 1, "", "get_axis_status"], [7, 3, 1, "", "get_device_config"], [7, 3, 1, "", "get_device_info"], [7, 3, 1, "", "get_firmware_version"], [7, 3, 1, "", "get_frequency"], [7, 3, 1, "", "get_position"], [7, 3, 1, "", "get_ref_position"], [7, 3, 1, "", "measure_capacitance"], [7, 3, 1, "", "move_reference"], [7, 3, 1, "", "reset_position"], [7, 3, 1, "", "save_params"], [7, 3, 1, "", "select_actuator"], [7, 3, 1, "", "set_amplitude"], [7, 3, 1, "", "set_axis_output"], [7, 3, 1, "", "set_dc_voltage"], [7, 3, 1, "", "set_frequency"], [7, 3, 1, "", "set_target_position"], [7, 3, 1, "", "set_target_range"], [7, 3, 1, "", "start_auto_move"], [7, 3, 1, "", "start_continuous_move"], [7, 3, 1, "", "start_single_step"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError": [[7, 3, 1, "", "__init__"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4": [[7, 1, 1, "", "ANC350LibActuatorType"], [7, 1, 1, "", "ANC350LibDeviceType"], [7, 4, 1, "", "ANC350LibError"], [7, 1, 1, "", "ANC350LibExternalTriggerMode"], [7, 1, 1, "", "ANC350LibTriggerPolarity"], [7, 4, 1, "", "ANC350v3LibError"], [7, 1, 1, "", "ANC350v4Lib"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType": [[7, 2, 1, "", "Goniometer"], [7, 2, 1, "", "Linear"], [7, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType": [[7, 2, 1, "", "Fps"], [7, 2, 1, "", "Nothing"], [7, 2, 1, "", "Num"], [7, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError": [[7, 2, 1, "", "SUCCESS_CODES"], [7, 2, 1, "", "WARNING_CODES"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "check_error"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode": [[7, 2, 1, "", "Disable"], [7, 2, 1, "", "Quadrature"], [7, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity": [[7, 2, 1, "", "High"], [7, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError": [[7, 3, 1, "", "__init__"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib": [[7, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "get_dc_voltage"], [7, 3, 1, "", "get_lut_name"], [7, 3, 1, "", "load_lut_file"], [7, 3, 1, "", "register_external_ip"], [7, 3, 1, "", "set_target_ground"]], "qcodes_contrib_drivers.drivers.Aviosys": [[8, 0, 0, "-", "IP_Power_9258S"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S": [[8, 1, 1, "", "AviosysIPPower9258S"], [8, 1, 1, "", "Aviosys_IP_Power_9258S"], [8, 1, 1, "", "PowerChannel"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.AviosysIPPower9258S": [[8, 2, 1, "", "address"], [8, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel": [[8, 2, 1, "", "CHANNEL_IDS"], [8, 2, 1, "", "CHANNEL_NAMES"]], "qcodes_contrib_drivers.drivers.Bilt": [[9, 0, 0, "-", "ITest"]], "qcodes_contrib_drivers.drivers.Bilt.ITest": [[9, 1, 1, "", "ITest"], [9, 1, 1, "", "iTestChannel"], [9, 1, 1, "", "iTestMultiChannelParameter"]], "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest": [[9, 3, 1, "", "__init__"], [9, 3, 1, "", "chan_to_ic"], [9, 3, 1, "", "chan_to_id"], [9, 3, 1, "", "print_dac_voltages"], [9, 3, 1, "", "set_dacs_zero"]], "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel": [[9, 3, 1, "", "__init__"], [9, 3, 1, "", "clear_alarm"], [9, 3, 1, "", "start"], [9, 3, 1, "", "stop"]], "qcodes_contrib_drivers.drivers.BlueFors": [[10, 0, 0, "-", "BlueFors"]], "qcodes_contrib_drivers.drivers.BlueFors.BlueFors": [[10, 1, 1, "", "BlueFors"]], "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors": [[10, 3, 1, "", "__init__"], [10, 3, 1, "", "get_pressure"], [10, 3, 1, "", "get_temperature"]], "qcodes_contrib_drivers.drivers.CopperMountain": [[11, 0, 0, "-", "M5180"], [11, 0, 0, "-", "S5048"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180": [[11, 1, 1, "", "FrequencySweepMagPhase"], [11, 1, 1, "", "M5180"], [11, 1, 1, "", "PointIQ"], [11, 1, 1, "", "PointMagPhase"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "get_raw"], [11, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "get_s"], [11, 3, 1, "", "reset_averages"], [11, 3, 1, "", "update_lin_traces"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointIQ": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048": [[11, 6, 1, "", "CMTIntParser"], [11, 1, 1, "", "CMTS5048"], [11, 1, 1, "", "CMTS5048Trace"], [11, 4, 1, "", "TraceNotReady"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048": [[11, 3, 1, "", "invalidate_trace"], [11, 3, 1, "", "reset"], [11, 3, 1, "", "run_N_times"], [11, 3, 1, "", "run_continously"], [11, 3, 1, "", "startup"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace": [[11, 3, 1, "", "get_raw"], [11, 3, 1, "", "prepare_trace"]], "qcodes_contrib_drivers.drivers.Cryocon": [[12, 0, 0, "-", "cryocon_26"]], "qcodes_contrib_drivers.drivers.Cryocon.cryocon_26": [[12, 1, 1, "", "Cryocon_26"]], "qcodes_contrib_drivers.drivers.Cryogenic": [[13, 0, 0, "-", "CryogenicSMS120C"]], "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C": [[13, 1, 1, "", "CryogenicSMS120C"]], "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C": [[13, 2, 1, "", "default_current_ramp_limit"], [13, 2, 1, "", "default_max_current_ramp_limit"], [13, 3, 1, "", "get_idn"], [13, 3, 1, "", "query"]], "qcodes_contrib_drivers.drivers.DaylightSolutions": [[14, 0, 0, "-", "MIRcat"]], "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat": [[14, 1, 1, "", "DRSDaylightSolutions_MIRcat"]], "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat": [[14, 3, 1, "", "arm"], [14, 3, 1, "", "check_tune"], [14, 3, 1, "", "disarm"], [14, 2, 1, "", "dll_path"], [14, 3, 1, "", "get_idn"], [14, 3, 1, "", "get_limits"], [14, 3, 1, "", "get_pulse_parameters"], [14, 3, 1, "", "get_ranges"], [14, 3, 1, "", "set_pulse_parameters"]], "qcodes_contrib_drivers.drivers.ERAInstruments": [[15, 0, 0, "-", "erasynth"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth": [[15, 1, 1, "", "ERASynth"], [15, 1, 1, "", "ERASynthBase"], [15, 1, 1, "", "ERASynthPlus"], [15, 1, 1, "", "ERASynthPlusPlus"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynth": [[15, 2, 1, "", "reference_tcxo_ocxo"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase": [[15, 3, 1, "", "__init__"], [15, 3, 1, "", "ask"], [15, 3, 1, "", "ask_raw"], [15, 3, 1, "", "clear_read_buffer"], [15, 2, 1, "", "current"], [15, 2, 1, "", "debug_messages_en"], [15, 2, 1, "", "embedded_version"], [15, 3, 1, "", "esp8266_upload_mode"], [15, 3, 1, "", "factory_reset"], [15, 3, 1, "", "get_configuration"], [15, 3, 1, "", "get_diagnostic_status"], [15, 3, 1, "", "get_idn"], [15, 2, 1, "", "modulation_am_depth"], [15, 2, 1, "", "modulation_en"], [15, 2, 1, "", "modulation_fm_deviation"], [15, 2, 1, "", "modulation_freq"], [15, 2, 1, "", "modulation_pulse_period"], [15, 2, 1, "", "modulation_pulse_width"], [15, 2, 1, "", "modulation_signal_waveform"], [15, 2, 1, "", "modulation_source"], [15, 2, 1, "", "modulation_type"], [15, 3, 1, "", "off"], [15, 3, 1, "", "on"], [15, 2, 1, "", "pll_lmx1_status"], [15, 2, 1, "", "pll_lmx2_status"], [15, 2, 1, "", "pll_xtal_status"], [15, 2, 1, "", "power"], [15, 3, 1, "", "preset"], [15, 3, 1, "", "print_pyvisa_resources"], [15, 2, 1, "", "ref_osc_source"], [15, 3, 1, "", "run_self_test"], [15, 2, 1, "", "status"], [15, 2, 1, "", "sweep_dwell"], [15, 2, 1, "", "sweep_en"], [15, 2, 1, "", "sweep_trigger"], [15, 2, 1, "", "synthesizer_mode"], [15, 2, 1, "", "temperature"], [15, 2, 1, "", "voltage"], [15, 2, 1, "", "wifi_gateway_address"], [15, 2, 1, "", "wifi_hotspot_password"], [15, 2, 1, "", "wifi_hotspot_ssid"], [15, 2, 1, "", "wifi_ip_address"], [15, 2, 1, "", "wifi_mode"], [15, 3, 1, "", "wifi_off"], [15, 3, 1, "", "wifi_on"], [15, 2, 1, "", "wifi_rssi"], [15, 2, 1, "", "wifi_station_password"], [15, 2, 1, "", "wifi_station_ssid"], [15, 2, 1, "", "wifi_subnet_address"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_raw"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlus": [[15, 2, 1, "", "reference_tcxo_ocxo"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlusPlus": [[15, 2, 1, "", "reference_tcxo_ocxo"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave": [[16, 0, 0, "-", "GM349"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349": [[16, 1, 1, "", "GM349"], [16, 1, 1, "", "GM349Attenuation"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349": [[16, 3, 1, "", "pin_map"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation": [[16, 3, 1, "", "get_raw"], [16, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Gentec": [[17, 0, 0, "-", "Gentec_Maestro"]], "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro": [[17, 1, 1, "", "Gentec_Maestro"]], "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro": [[17, 3, 1, "", "clear_zero_offset"], [17, 2, 1, "", "firmware_version"], [17, 3, 1, "", "get_idn"], [17, 2, 1, "", "model"], [17, 3, 1, "", "set_zero_offset"]], "qcodes_contrib_drivers.drivers.Holzworth": [[18, 0, 0, "-", "HS900"], [18, 0, 0, "-", "HS9008B"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900": [[18, 1, 1, "", "HS900"], [18, 1, 1, "", "HS900Channel"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900": [[18, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900Channel": [[18, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B": [[18, 1, 1, "", "HS9008B"], [18, 1, 1, "", "HS9008BChannel"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "set_address"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008BChannel": [[18, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Horiba": [[19, 0, 0, "-", "Horiba_FHR"], [20, 0, 0, "-", "private"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR": [[19, 1, 1, "", "DCChannel"], [19, 1, 1, "", "Dispatcher"], [19, 1, 1, "", "GratingChannel"], [19, 1, 1, "", "HoribaFHR"], [19, 1, 1, "", "MotorChannel"], [19, 1, 1, "", "PortChannel"], [19, 1, 1, "", "PrecisionMotorChannel"], [19, 1, 1, "", "SlitChannel"], [19, 4, 1, "", "SpeError"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.Dispatcher": [[19, 3, 1, "", "error_check"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.GratingChannel": [[19, 3, 1, "", "set_ini_params"], [19, 5, 1, "", "unit"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR": [[19, 2, 1, "", "active_grating"], [19, 3, 1, "", "close"], [19, 3, 1, "", "disconnect"], [19, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel": [[19, 3, 1, "", "get_id"], [19, 3, 1, "", "set_id"], [19, 3, 1, "", "stop"], [19, 3, 1, "", "type"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel": [[19, 3, 1, "", "set_baud_rate"], [19, 3, 1, "", "set_timeout"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel": [[19, 3, 1, "", "init"], [19, 3, 1, "", "set_setup"], [19, 5, 1, "", "unit"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.SlitChannel": [[19, 5, 1, "", "unit"]], "qcodes_contrib_drivers.drivers.Horiba.private": [[20, 0, 0, "-", "fhr_client"], [20, 0, 0, "-", "fhr_server"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client": [[20, 1, 1, "", "FHRClient"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient": [[20, 3, 1, "", "CreateSpe"], [20, 3, 1, "", "DeleteSpe"], [20, 3, 1, "", "SpeCommand"], [20, 3, 1, "", "SpeCommandIniParams"], [20, 3, 1, "", "SpeCommandSetup"], [20, 3, 1, "", "request32"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server": [[20, 1, 1, "", "FHRServer"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer": [[20, 3, 1, "", "CreateSpe"], [20, 3, 1, "", "DeleteSpe"], [20, 3, 1, "", "SpeCommand"], [20, 3, 1, "", "SpeCommandIniParams"], [20, 3, 1, "", "SpeCommandSetup"]], "qcodes_contrib_drivers.drivers.Keysight": [[21, 0, 0, "-", "Keysight_E36313A"], [21, 0, 0, "-", "Keysight_E8267D"], [21, 0, 0, "-", "Keysight_J7211"], [21, 0, 0, "-", "Keysight_M3201A"], [21, 0, 0, "-", "Keysight_M3300A"], [21, 0, 0, "-", "M3202A"], [22, 0, 0, "-", "SD_common"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A": [[21, 1, 1, "", "E36313A"], [21, 1, 1, "", "E36313AChannel"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313A": [[21, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313AChannel": [[21, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D": [[21, 1, 1, "", "Keysight_E8267D"], [21, 6, 1, "", "parse_on_off"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D": [[21, 3, 1, "", "deg_to_rad"], [21, 3, 1, "", "off"], [21, 3, 1, "", "on"], [21, 3, 1, "", "rad_to_deg"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211": [[21, 1, 1, "", "Keysight_J7211"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A": [[21, 1, 1, "", "Keysight_M3201A"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A": [[21, 1, 1, "", "M3300A_AWG"], [21, 1, 1, "", "M3300A_DIG"]], "qcodes_contrib_drivers.drivers.Keysight.M3202A": [[21, 1, 1, "", "M3202A"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common": [[22, 0, 0, "-", "SD_AWG"], [22, 0, 0, "-", "SD_AWG_Async"], [22, 0, 0, "-", "SD_DIG"], [22, 0, 0, "-", "SD_Module"], [22, 0, 0, "-", "memory_manager"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG": [[22, 1, 1, "", "SD_AWG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG": [[22, 3, 1, "", "awg_config_external_trigger"], [22, 3, 1, "", "awg_flush"], [22, 3, 1, "", "awg_from_array"], [22, 3, 1, "", "awg_from_file"], [22, 3, 1, "", "awg_is_running"], [22, 3, 1, "", "awg_jump_next_waveform"], [22, 3, 1, "", "awg_pause"], [22, 3, 1, "", "awg_pause_multiple"], [22, 3, 1, "", "awg_queue_config"], [22, 3, 1, "", "awg_queue_waveform"], [22, 3, 1, "", "awg_resume"], [22, 3, 1, "", "awg_resume_multiple"], [22, 3, 1, "", "awg_start"], [22, 3, 1, "", "awg_start_multiple"], [22, 3, 1, "", "awg_stop"], [22, 3, 1, "", "awg_stop_multiple"], [22, 3, 1, "", "awg_trigger"], [22, 3, 1, "", "awg_trigger_multiple"], [22, 3, 1, "", "config_amplitude_modulation"], [22, 3, 1, "", "config_angle_modulation"], [22, 3, 1, "", "config_clock_io"], [22, 3, 1, "", "config_fpga_trigger"], [22, 3, 1, "", "config_trigger_io"], [22, 3, 1, "", "convert_prescaler_to_sample_rate"], [22, 3, 1, "", "convert_sample_rate_to_prescaler"], [22, 3, 1, "", "flush_waveform"], [22, 3, 1, "", "get_clock_frequency"], [22, 3, 1, "", "get_clock_sync_frequency"], [22, 3, 1, "", "get_trigger_io"], [22, 3, 1, "", "get_waveform_status"], [22, 3, 1, "", "get_waveform_type"], [22, 3, 1, "", "load_fpga_image"], [22, 3, 1, "", "load_waveform"], [22, 3, 1, "", "load_waveform_int16"], [22, 3, 1, "", "new_waveform_from_double"], [22, 3, 1, "", "new_waveform_from_file"], [22, 3, 1, "", "new_waveform_from_int"], [22, 3, 1, "", "off"], [22, 3, 1, "", "read_fpga"], [22, 3, 1, "", "read_fpga_array"], [22, 3, 1, "", "reload_waveform"], [22, 3, 1, "", "reload_waveform_int16"], [22, 3, 1, "", "reset_channel_phase"], [22, 3, 1, "", "reset_clock_phase"], [22, 3, 1, "", "reset_multiple_channel_phase"], [22, 3, 1, "", "set_channel_amplitude"], [22, 3, 1, "", "set_channel_frequency"], [22, 3, 1, "", "set_channel_offset"], [22, 3, 1, "", "set_channel_phase"], [22, 3, 1, "", "set_channel_wave_shape"], [22, 3, 1, "", "set_clock_frequency"], [22, 3, 1, "", "set_digital_filter_mode"], [22, 3, 1, "", "set_iq_modulation"], [22, 3, 1, "", "set_marker_config"], [22, 3, 1, "", "set_trigger_io"], [22, 3, 1, "", "write_fpga"], [22, 3, 1, "", "write_fpga_array"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async": [[22, 1, 1, "", "SD_AWG_Async"], [22, 1, 1, "", "Task"], [22, 1, 1, "", "WaveformReference"], [22, 6, 1, "", "switchable"], [22, 6, 1, "", "threaded"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async": [[22, 3, 1, "", "asynchronous"], [22, 3, 1, "", "awg_flush"], [22, 3, 1, "", "awg_from_array"], [22, 3, 1, "", "awg_from_file"], [22, 3, 1, "", "awg_queue_waveform"], [22, 3, 1, "", "close"], [22, 3, 1, "", "flush_waveform"], [22, 3, 1, "", "load_waveform"], [22, 3, 1, "", "load_waveform_int16"], [22, 3, 1, "", "release_waveform_memory"], [22, 3, 1, "", "reload_waveform"], [22, 3, 1, "", "reload_waveform_int16"], [22, 3, 1, "", "set_asynchronous"], [22, 3, 1, "", "set_waveform_limit"], [22, 3, 1, "", "upload_waveform"], [22, 3, 1, "", "uploader_ready"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task": [[22, 5, 1, "", "result"], [22, 3, 1, "", "run"], [22, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference": [[22, 5, 1, "", "awg_name"], [22, 3, 1, "", "is_uploaded"], [22, 3, 1, "", "release"], [22, 3, 1, "", "wait_uploaded"], [22, 5, 1, "", "wave_number"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG": [[22, 1, 1, "", "SD_DIG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG": [[22, 3, 1, "", "__init__"], [22, 3, 1, "", "daq_flush"], [22, 3, 1, "", "daq_flush_multiple"], [22, 3, 1, "", "daq_read"], [22, 3, 1, "", "daq_start"], [22, 3, 1, "", "daq_start_multiple"], [22, 3, 1, "", "daq_stop"], [22, 3, 1, "", "daq_stop_multiple"], [22, 3, 1, "", "daq_trigger"], [22, 3, 1, "", "daq_trigger_multiple"], [22, 3, 1, "", "get_coupling"], [22, 3, 1, "", "get_full_scale"], [22, 3, 1, "", "get_impedance"], [22, 3, 1, "", "get_prescaler"], [22, 3, 1, "", "get_trigger_io"], [22, 3, 1, "", "get_trigger_mode"], [22, 3, 1, "", "get_trigger_threshold"], [22, 3, 1, "", "reset_clock_phase"], [22, 3, 1, "", "set_analog_trigger_mask"], [22, 3, 1, "", "set_clksys_frequency"], [22, 3, 1, "", "set_coupling"], [22, 3, 1, "", "set_daq_trigger_delay"], [22, 3, 1, "", "set_daq_trigger_mode"], [22, 3, 1, "", "set_digital_trigger_mode"], [22, 3, 1, "", "set_digital_trigger_source"], [22, 3, 1, "", "set_ext_trigger_behaviour"], [22, 3, 1, "", "set_ext_trigger_source"], [22, 3, 1, "", "set_full_scale"], [22, 3, 1, "", "set_impedance"], [22, 3, 1, "", "set_n_cycles"], [22, 3, 1, "", "set_n_points"], [22, 3, 1, "", "set_points_per_cycle"], [22, 3, 1, "", "set_prescaler"], [22, 3, 1, "", "set_timeout"], [22, 3, 1, "", "set_trigger_io"], [22, 3, 1, "", "set_trigger_mode"], [22, 3, 1, "", "set_trigger_threshold"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module": [[22, 1, 1, "", "SD_Module"], [22, 6, 1, "", "result_parser"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module": [[22, 3, 1, "", "close"], [22, 3, 1, "", "close_soft"], [22, 3, 1, "", "get_chassis"], [22, 3, 1, "", "get_firmware_version"], [22, 3, 1, "", "get_fpga_pc_port"], [22, 3, 1, "", "get_hardware_version"], [22, 3, 1, "", "get_hvi_register"], [22, 3, 1, "", "get_idn"], [22, 3, 1, "", "get_module_count"], [22, 3, 1, "", "get_open"], [22, 3, 1, "", "get_product_name"], [22, 3, 1, "", "get_product_name_by_index"], [22, 3, 1, "", "get_product_name_by_slot"], [22, 3, 1, "", "get_pxi_trigger"], [22, 3, 1, "", "get_serial_number"], [22, 3, 1, "", "get_serial_number_by_index"], [22, 3, 1, "", "get_serial_number_by_slot"], [22, 3, 1, "", "get_slot"], [22, 3, 1, "", "get_status"], [22, 3, 1, "", "get_temperature"], [22, 3, 1, "", "get_type"], [22, 3, 1, "", "get_type_by_index"], [22, 3, 1, "", "get_type_by_slot"], [22, 3, 1, "", "load_fpga_image"], [22, 3, 1, "", "open_with_serial_number"], [22, 3, 1, "", "open_with_slot"], [22, 3, 1, "", "run_self_test"], [22, 3, 1, "", "set_fpga_pc_port"], [22, 3, 1, "", "set_hvi_register"], [22, 3, 1, "", "set_pxi_trigger"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager": [[22, 1, 1, "", "MemoryManager"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager": [[22, 1, 1, "", "AllocatedSlot"], [22, 3, 1, "", "allocate"], [22, 3, 1, "", "allocation_state"], [22, 3, 1, "", "get_uninitialized_slots"], [22, 3, 1, "", "mem_usage"], [22, 2, 1, "", "memory_sizes"], [22, 3, 1, "", "release"], [22, 3, 1, "", "release_all"], [22, 3, 1, "", "set_waveform_limit"], [22, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot": [[22, 2, 1, "", "allocation_ref"], [22, 2, 1, "", "memory_manager"], [22, 2, 1, "", "number"], [22, 3, 1, "", "release"]], "qcodes_contrib_drivers.drivers.Lakeshore": [[23, 0, 0, "-", "Model_331"], [23, 0, 0, "-", "Model_625"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_331": [[23, 1, 1, "", "Model_331"], [23, 1, 1, "", "SensorChannel"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.SensorChannel": [[23, 2, 1, "", "channel"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_625": [[23, 1, 1, "", "Lakeshore625"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_625.Lakeshore625": [[23, 3, 1, "", "set_field"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics": [[24, 0, 0, "-", "Lighthouse_Photonics_Sprout_G"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G": [[24, 1, 1, "", "LighthousePhotonicsSproutG"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG": [[24, 3, 1, "", "ask"], [24, 2, 1, "", "device_info"], [24, 2, 1, "", "enabled"], [24, 3, 1, "", "get_idn"], [24, 2, 1, "", "output_mode"], [24, 2, 1, "", "output_power"], [24, 2, 1, "", "output_setpoint"], [24, 3, 1, "", "ramp_up"], [24, 2, 1, "", "status"], [24, 2, 1, "", "work_hours"], [24, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.M2": [[25, 0, 0, "-", "M2_Solstis_3"]], "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3": [[25, 1, 1, "", "M2Solstis3"]], "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3": [[25, 3, 1, "", "get_idn"], [25, 3, 1, "", "get_status"], [25, 3, 1, "", "poll_move_wave_t"], [25, 3, 1, "", "poll_wave_m"], [25, 3, 1, "", "send_message"], [25, 3, 1, "", "snapshot_base"], [25, 3, 1, "", "stop_move_wave_t"], [25, 3, 1, "", "stop_wave_m"]], "qcodes_contrib_drivers.drivers.Minicircuits": [[26, 0, 0, "-", "ZTM"]], "qcodes_contrib_drivers.drivers.Minicircuits.ZTM": [[26, 1, 1, "", "AmplifierModule"], [26, 1, 1, "", "DualMTSModule"], [26, 1, 1, "", "DualSPDTModule"], [26, 1, 1, "", "MTSModule"], [26, 1, 1, "", "MiniCircuitsModularSystem"], [26, 1, 1, "", "MiniCircuitsModule"], [26, 1, 1, "", "SP4TModule"], [26, 1, 1, "", "SP6TModule"], [26, 1, 1, "", "SP8TModule"], [26, 1, 1, "", "SPDTModule"]], "qcodes_contrib_drivers.drivers.MontanaInstruments": [[27, 0, 0, "-", "cryostation"]], "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation": [[27, 1, 1, "", "MontanaInstruments_Cryostation"]], "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation": [[27, 3, 1, "", "get_idn"], [27, 3, 1, "", "set_temp_and_wait"], [27, 3, 1, "", "standby"], [27, 3, 1, "", "start_cooldown"], [27, 3, 1, "", "start_warmup"], [27, 3, 1, "", "stop_automation"], [27, 3, 1, "", "wait_stability"]], "qcodes_contrib_drivers.drivers.NationalInstruments": [[28, 0, 0, "-", "DAQ"], [28, 0, 0, "-", "PXIe_2597"], [28, 0, 0, "-", "PXIe_5654"], [28, 0, 0, "-", "RFSG"], [28, 0, 0, "-", "Switch"], [28, 0, 0, "-", "dll_wrapper"], [28, 0, 0, "-", "ni_dll_instrument"], [28, 0, 0, "-", "visa_types"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ": [[28, 1, 1, "", "DAQAnalogInputVoltages"], [28, 1, 1, "", "DAQAnalogInputs"], [28, 1, 1, "", "DAQAnalogOutputVoltage"], [28, 1, 1, "", "DAQAnalogOutputs"], [28, 1, 1, "", "DAQDigitalOutputState"], [28, 1, 1, "", "DAQDigitalOutputs"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputVoltages": [[28, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage": [[28, 3, 1, "", "get_raw"], [28, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputState": [[28, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597": [[28, 1, 1, "", "NI_PXIe_2597"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654": [[28, 2, 1, "", "NI_PXIe_5654"], [28, 1, 1, "", "NationalInstruments_PXIe_5654"]], "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG": [[28, 2, 1, "", "NI_RFSG"], [28, 1, 1, "", "NationalInstruments_RFSG"]], "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG": [[28, 3, 1, "", "abort"], [28, 2, 1, "", "dll_path"], [28, 5, 1, "", "firmware"], [28, 3, 1, "", "get_idn"], [28, 3, 1, "", "initiate"], [28, 5, 1, "", "model"], [28, 5, 1, "", "serial"], [28, 5, 1, "", "vendor"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch": [[28, 1, 1, "", "NI_Switch"], [28, 1, 1, "", "SwitchChannel"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch": [[28, 3, 1, "", "close"], [28, 3, 1, "", "disconnect_all"], [28, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel": [[28, 3, 1, "", "connect_to"], [28, 3, 1, "", "disconnect_from"], [28, 3, 1, "", "disconnect_from_all"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper": [[28, 1, 1, "", "AttributeWrapper"], [28, 1, 1, "", "NIDLLWrapper"], [28, 1, 1, "", "NamedArgType"], [28, 6, 1, "", "c_str"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper": [[28, 2, 1, "", "dtype"], [28, 2, 1, "", "value"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper": [[28, 3, 1, "", "error_message"], [28, 3, 1, "", "get_attribute"], [28, 3, 1, "", "init"], [28, 3, 1, "", "set_attribute"], [28, 3, 1, "", "wrap_dll_function"], [28, 3, 1, "", "wrap_dll_function_checked"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType": [[28, 2, 1, "", "argtype"], [28, 2, 1, "", "name"]], "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument": [[28, 1, 1, "", "NIDLLInstrument"]], "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument": [[28, 3, 1, "", "close"], [28, 3, 1, "", "get_attribute"], [28, 3, 1, "", "init"], [28, 3, 1, "", "reset"], [28, 3, 1, "", "set_attribute"]], "qcodes_contrib_drivers.drivers.Newport": [[29, 0, 0, "-", "AG_UC8"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8": [[29, 1, 1, "", "Newport_AG_UC8"], [29, 1, 1, "", "Newport_AG_UC8_Axis"], [29, 1, 1, "", "Newport_AG_UC8_Channel"], [29, 4, 1, "", "Newport_AG_UC8_ErrorCode"], [29, 4, 1, "", "Newport_AG_UC8_Exception"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8": [[29, 3, 1, "", "ask_channel"], [29, 2, 1, "", "command_delay"], [29, 2, 1, "", "default_timeout"], [29, 3, 1, "", "get_idn"], [29, 3, 1, "", "get_last_error"], [29, 3, 1, "", "reset"], [29, 2, 1, "", "reset_delay"], [29, 2, 1, "", "slow_command_timeout"], [29, 3, 1, "", "write"], [29, 3, 1, "", "write_channel"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis": [[29, 2, 1, "", "SPEED_TABLE"], [29, 3, 1, "", "jog"], [29, 3, 1, "", "measure_position"], [29, 3, 1, "", "move_abs"], [29, 3, 1, "", "move_limit"], [29, 3, 1, "", "move_rel"], [29, 3, 1, "", "stop"], [29, 3, 1, "", "zero_position"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel": [[29, 3, 1, "", "ask"], [29, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.OxfordInstruments": [[30, 0, 0, "-", "ILM200"], [30, 0, 0, "-", "IPS120"], [30, 0, 0, "-", "Proteox"], [30, 0, 0, "-", "Triton"], [30, 0, 0, "-", "kelvinox"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200": [[30, 1, 1, "", "OxfordInstruments_ILM200"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200": [[30, 3, 1, "", "__init__"], [30, 3, 1, "", "close"], [30, 3, 1, "", "get_all"], [30, 3, 1, "", "get_idn"], [30, 3, 1, "", "local"], [30, 3, 1, "", "remote"], [30, 3, 1, "", "set_remote_status"], [30, 3, 1, "", "set_to_fast"], [30, 3, 1, "", "set_to_slow"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120": [[30, 1, 1, "", "OxfordInstruments_IPS120"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120": [[30, 3, 1, "", "__init__"], [30, 3, 1, "", "close"], [30, 3, 1, "", "examine"], [30, 3, 1, "", "get_all"], [30, 3, 1, "", "get_idn"], [30, 3, 1, "", "heater_off"], [30, 3, 1, "", "heater_on"], [30, 3, 1, "", "hold"], [30, 3, 1, "", "identify"], [30, 3, 1, "", "leave_persistent_mode"], [30, 3, 1, "", "local"], [30, 3, 1, "", "remote"], [30, 3, 1, "", "run_to_field"], [30, 3, 1, "", "run_to_field_wait"], [30, 3, 1, "", "set_persistent"], [30, 3, 1, "", "to_setpoint"], [30, 3, 1, "", "to_zero"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox": [[30, 1, 1, "", "MagnetCurrentParameters"], [30, 1, 1, "", "MagneticFieldParameters"], [30, 1, 1, "", "oiDECS"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagnetCurrentParameters": [[30, 3, 1, "", "get_raw"], [30, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagneticFieldParameters": [[30, 3, 1, "", "get_raw"], [30, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS": [[30, 3, 1, "", "ask"], [30, 3, 1, "", "close"], [30, 3, 1, "", "close_switch"], [30, 3, 1, "", "enter_persistent_mode"], [30, 3, 1, "", "hold_field"], [30, 3, 1, "", "leave_persistent_mode"], [30, 3, 1, "", "mixing_chamber_heater_off"], [30, 3, 1, "", "open_switch"], [30, 3, 1, "", "publish"], [30, 3, 1, "", "set_magnet_state"], [30, 3, 1, "", "set_magnet_target"], [30, 3, 1, "", "set_output_current_target"], [30, 3, 1, "", "still_heater_off"], [30, 3, 1, "", "sweep_field"], [30, 3, 1, "", "sweep_psu_output"], [30, 3, 1, "", "sweep_small_field_step"], [30, 3, 1, "", "wait_until_field_depersisted"], [30, 3, 1, "", "wait_until_field_persistent"], [30, 3, 1, "", "wait_until_field_stable"], [30, 3, 1, "", "wait_until_temperature_stable_std_control"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton": [[30, 1, 1, "", "Triton"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton.Triton": [[30, 3, 1, "", "__init__"], [30, 3, 1, "", "get_pressure"], [30, 3, 1, "", "get_temperature"], [30, 3, 1, "", "vcl2csv"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox": [[30, 1, 1, "", "OxfordInstruments_Kelvinox_IGH"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH": [[30, 3, 1, "", "__init__"], [30, 3, 1, "", "close"], [30, 3, 1, "", "get_all"], [30, 3, 1, "", "get_idn"], [30, 3, 1, "", "identify"], [30, 3, 1, "", "local"], [30, 3, 1, "", "remote"], [30, 3, 1, "", "rotate_Nvalve"], [30, 3, 1, "", "set_mix_chamber_heater_mode"], [30, 3, 1, "", "set_mix_chamber_heater_power_range"]], "qcodes_contrib_drivers.drivers.QDevil": [[31, 0, 0, "-", "QDAC1"], [31, 0, 0, "-", "QDAC2"], [31, 0, 0, "-", "QDAC2_Array"], [31, 0, 0, "-", "QSwitch"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1": [[31, 1, 1, "", "Generator"], [31, 1, 1, "", "Mode"], [31, 1, 1, "", "QDac"], [31, 1, 1, "", "QDacChannel"], [31, 1, 1, "", "QDacMultiChannelParameter"], [31, 1, 1, "", "Waveform"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode": [[31, 3, 1, "", "get_label"], [31, 2, 1, "", "vhigh_ihigh"], [31, 2, 1, "", "vhigh_ilow"], [31, 2, 1, "", "vlow_ilow"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac": [[31, 3, 1, "", "__init__"], [31, 3, 1, "", "clear_read_queue"], [31, 3, 1, "", "connect_message"], [31, 2, 1, "", "max_status_age"], [31, 3, 1, "", "print_overview"], [31, 3, 1, "", "print_slopes"], [31, 3, 1, "", "print_syncs"], [31, 3, 1, "", "ramp_voltages"], [31, 3, 1, "", "ramp_voltages_2d"], [31, 3, 1, "", "read"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "snapshot_base"], [31, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel": [[31, 3, 1, "", "__init__"], [31, 3, 1, "", "snapshot_base"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacMultiChannelParameter": [[31, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform": [[31, 2, 1, "", "all_waveforms"], [31, 2, 1, "", "sine"], [31, 2, 1, "", "square"], [31, 2, 1, "", "staircase"], [31, 2, 1, "", "triangle"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2": [[31, 1, 1, "", "Arrangement_Context"], [31, 1, 1, "", "Awg_Context"], [31, 1, 1, "", "List_Context"], [31, 1, 1, "", "Measurement_Context"], [31, 1, 1, "", "QDac2"], [31, 1, 1, "", "QDac2Channel"], [31, 1, 1, "", "QDac2ExternalTrigger"], [31, 1, 1, "", "QDac2Trigger_Context"], [31, 1, 1, "", "Sine_Context"], [31, 1, 1, "", "Square_Context"], [31, 1, 1, "", "Sweep_Context"], [31, 1, 1, "", "Trace_Context"], [31, 1, 1, "", "Triangle_Context"], [31, 1, 1, "", "Virtual_Sweep_Context"], [31, 6, 1, "", "comma_sequence_to_list"], [31, 6, 1, "", "comma_sequence_to_list_of_floats"], [31, 6, 1, "", "diff_matrix"], [31, 6, 1, "", "floats_to_comma_separated_list"], [31, 6, 1, "", "forward_and_back"], [31, 6, 1, "", "ints_to_comma_separated_list"], [31, 6, 1, "", "split_version_string_into_components"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context": [[31, 3, 1, "", "actual_voltages"], [31, 3, 1, "", "add_correction"], [31, 3, 1, "", "channel"], [31, 5, 1, "", "channel_numbers"], [31, 3, 1, "", "close"], [31, 5, 1, "", "contact_names"], [31, 5, 1, "", "correction_matrix"], [31, 3, 1, "", "currents_A"], [31, 3, 1, "", "get_trigger_by_name"], [31, 3, 1, "", "initiate_correction"], [31, 3, 1, "", "leakage"], [31, 3, 1, "", "set_virtual_voltage"], [31, 3, 1, "", "set_virtual_voltages"], [31, 5, 1, "", "shape"], [31, 3, 1, "", "virtual_detune"], [31, 3, 1, "", "virtual_sweep"], [31, 3, 1, "", "virtual_sweep2d"], [31, 3, 1, "", "virtual_voltage"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context": [[31, 3, 1, "", "abort"], [31, 3, 1, "", "close"], [31, 3, 1, "", "cycles_remaining"], [31, 3, 1, "", "end_marker"], [31, 3, 1, "", "period_end_marker"], [31, 3, 1, "", "period_start_marker"], [31, 3, 1, "", "start"], [31, 3, 1, "", "start_marker"], [31, 3, 1, "", "start_on"], [31, 3, 1, "", "start_on_external"], [31, 3, 1, "", "start_once_on"], [31, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context": [[31, 3, 1, "", "append"], [31, 3, 1, "", "cycles_remaining"], [31, 3, 1, "", "points"], [31, 3, 1, "", "start"], [31, 3, 1, "", "values_V"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context": [[31, 3, 1, "", "abort"], [31, 3, 1, "", "available_A"], [31, 3, 1, "", "close"], [31, 3, 1, "", "n_available"], [31, 3, 1, "", "n_cycles_remaining"], [31, 3, 1, "", "peek_A"], [31, 3, 1, "", "start"], [31, 3, 1, "", "start_on"], [31, 3, 1, "", "start_on_external"], [31, 3, 1, "", "start_once_on"], [31, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2": [[31, 3, 1, "", "__init__"], [31, 3, 1, "", "allocate_trace"], [31, 3, 1, "", "allocate_trigger"], [31, 3, 1, "", "arrange"], [31, 3, 1, "", "ask"], [31, 3, 1, "", "channel"], [31, 3, 1, "", "clear"], [31, 3, 1, "", "clear_read_queue"], [31, 3, 1, "", "connect_external_trigger"], [31, 3, 1, "", "error"], [31, 3, 1, "", "errors"], [31, 3, 1, "", "free_all_triggers"], [31, 3, 1, "", "free_trigger"], [31, 3, 1, "", "get_recorded_scpi_commands"], [31, 3, 1, "", "mac"], [31, 3, 1, "", "n_channels"], [31, 3, 1, "", "n_errors"], [31, 3, 1, "", "n_external_inputs"], [31, 3, 1, "", "n_external_outputs"], [31, 3, 1, "", "n_triggers"], [31, 3, 1, "", "remove_traces"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "start_all"], [31, 3, 1, "", "start_recording_scpi"], [31, 3, 1, "", "traces"], [31, 3, 1, "", "write"], [31, 3, 1, "", "write_floats"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel": [[31, 3, 1, "", "arbitrary_wave"], [31, 3, 1, "", "ask_channel"], [31, 3, 1, "", "clear_measurements"], [31, 3, 1, "", "dc_list"], [31, 3, 1, "", "dc_sweep"], [31, 3, 1, "", "measurement"], [31, 5, 1, "", "number"], [31, 3, 1, "", "output_mode"], [31, 3, 1, "", "sine_wave"], [31, 3, 1, "", "square_wave"], [31, 3, 1, "", "triangle_wave"], [31, 3, 1, "", "write"], [31, 3, 1, "", "write_channel"], [31, 3, 1, "", "write_channel_floats"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context": [[31, 3, 1, "", "close"], [31, 5, 1, "", "value"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context": [[31, 3, 1, "", "abort"], [31, 3, 1, "", "close"], [31, 3, 1, "", "cycles_remaining"], [31, 3, 1, "", "end_marker"], [31, 3, 1, "", "period_end_marker"], [31, 3, 1, "", "period_start_marker"], [31, 3, 1, "", "start"], [31, 3, 1, "", "start_marker"], [31, 3, 1, "", "start_on"], [31, 3, 1, "", "start_on_external"], [31, 3, 1, "", "start_once_on"], [31, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context": [[31, 3, 1, "", "abort"], [31, 3, 1, "", "close"], [31, 3, 1, "", "cycles_remaining"], [31, 3, 1, "", "end_marker"], [31, 3, 1, "", "period_end_marker"], [31, 3, 1, "", "period_start_marker"], [31, 3, 1, "", "start"], [31, 3, 1, "", "start_marker"], [31, 3, 1, "", "start_on"], [31, 3, 1, "", "start_on_external"], [31, 3, 1, "", "start_once_on"], [31, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context": [[31, 3, 1, "", "cycles_remaining"], [31, 3, 1, "", "points"], [31, 3, 1, "", "start"], [31, 3, 1, "", "start_V"], [31, 3, 1, "", "stop_V"], [31, 3, 1, "", "time_s"], [31, 3, 1, "", "values_V"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context": [[31, 5, 1, "", "name"], [31, 5, 1, "", "size"], [31, 3, 1, "", "waveform"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context": [[31, 3, 1, "", "abort"], [31, 3, 1, "", "close"], [31, 3, 1, "", "cycles_remaining"], [31, 3, 1, "", "end_marker"], [31, 3, 1, "", "period_end_marker"], [31, 3, 1, "", "period_start_marker"], [31, 3, 1, "", "start"], [31, 3, 1, "", "start_marker"], [31, 3, 1, "", "start_on"], [31, 3, 1, "", "start_on_external"], [31, 3, 1, "", "start_once_on"], [31, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context": [[31, 3, 1, "", "actual_values_V"], [31, 3, 1, "", "close"], [31, 3, 1, "", "start"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array": [[31, 1, 1, "", "Array_Arrangement_Context"], [31, 1, 1, "", "QDac2_Array"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context": [[31, 3, 1, "", "channel"], [31, 5, 1, "", "contact_names"], [31, 3, 1, "", "currents_A"], [31, 3, 1, "", "leakage"], [31, 3, 1, "", "qdac_names"], [31, 3, 1, "", "set_virtual_voltages"], [31, 3, 1, "", "virtual_voltage"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array": [[31, 3, 1, "", "allocate_trigger"], [31, 3, 1, "", "arrange"], [31, 5, 1, "", "common_trigger_in"], [31, 3, 1, "", "connect_external_trigger"], [31, 5, 1, "", "controller"], [31, 5, 1, "", "names"], [31, 3, 1, "", "sync"], [31, 3, 1, "", "trigger"], [31, 5, 1, "", "trigger_out"]], "qcodes_contrib_drivers.drivers.QDevil.QSwitch": [[31, 1, 1, "", "QSwitch"], [31, 6, 1, "", "channel_list_to_state"], [31, 6, 1, "", "compress_channel_list"], [31, 6, 1, "", "expand_channel_list"], [31, 6, 1, "", "state_to_compressed_list"], [31, 6, 1, "", "state_to_expanded_list"]], "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch": [[31, 2, 1, "", "OneOrMore"], [31, 3, 1, "", "__init__"], [31, 3, 1, "", "arrange"], [31, 3, 1, "", "ask"], [31, 3, 1, "", "breakout"], [31, 3, 1, "", "clear_read_queue"], [31, 3, 1, "", "close_relay"], [31, 3, 1, "", "close_relays"], [31, 3, 1, "", "connect"], [31, 3, 1, "", "error"], [31, 3, 1, "", "errors"], [31, 3, 1, "", "get_recorded_scpi_commands"], [31, 3, 1, "", "ground"], [31, 3, 1, "", "open_relay"], [31, 3, 1, "", "open_relays"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "start_recording_scpi"], [31, 3, 1, "", "state_force_update"], [31, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.QuTech": [[32, 0, 0, "-", "D4"], [32, 0, 0, "-", "D5a"], [32, 0, 0, "-", "F1d"], [32, 0, 0, "-", "IVVI"], [32, 0, 0, "-", "M2j"], [32, 0, 0, "-", "S5i"]], "qcodes_contrib_drivers.drivers.QuTech.D4": [[32, 1, 1, "", "D4"]], "qcodes_contrib_drivers.drivers.QuTech.D4.D4": [[32, 3, 1, "", "get_buffers_enabled"], [32, 3, 1, "", "get_filter_value"], [32, 3, 1, "", "get_idn"], [32, 3, 1, "", "get_mode"]], "qcodes_contrib_drivers.drivers.QuTech.D5a": [[32, 1, 1, "", "D5a"]], "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "get_idn"], [32, 3, 1, "", "set_dac_unit"]], "qcodes_contrib_drivers.drivers.QuTech.F1d": [[32, 1, 1, "", "F1d"]], "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d": [[32, 3, 1, "", "get_idn"], [32, 3, 1, "", "get_remote_settings"]], "qcodes_contrib_drivers.drivers.QuTech.IVVI": [[32, 1, 1, "", "IVVI"]], "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "adjust_parameter_validator"], [32, 3, 1, "", "ask"], [32, 2, 1, "", "dac_quata"], [32, 2, 1, "", "full_range"], [32, 3, 1, "", "get_all"], [32, 3, 1, "", "get_idn"], [32, 3, 1, "", "get_pol_dac"], [32, 2, 1, "", "half_range"], [32, 3, 1, "", "linspace"], [32, 3, 1, "", "read"], [32, 2, 1, "", "resolution"], [32, 3, 1, "", "round_dac"], [32, 3, 1, "", "set_dacs_zero"], [32, 3, 1, "", "set_parameter_bounds"], [32, 3, 1, "", "set_pol_dacrack"], [32, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.QuTech.M2j": [[32, 1, 1, "", "M2j"]], "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.QuTech.S5i": [[32, 1, 1, "", "S5i"]], "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i": [[32, 3, 1, "", "get_idn"], [32, 3, 1, "", "optimize_for_frequency"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz": [[33, 0, 0, "-", "HMC8041"], [33, 0, 0, "-", "HMC8042"], [33, 0, 0, "-", "HMC8043"], [33, 0, 0, "-", "HMP2020"], [33, 0, 0, "-", "HMP2030"], [33, 0, 0, "-", "HMP4030"], [33, 0, 0, "-", "HMP4040"], [33, 0, 0, "-", "SMB100A"], [33, 0, 0, "-", "SMR40"], [33, 0, 0, "-", "SMW200A"], [33, 0, 0, "-", "SMW200Asim"], [33, 0, 0, "-", "ZVL13"], [34, 0, 0, "-", "private"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041": [[33, 1, 1, "", "RohdeSchwarzHMC8041"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042": [[33, 1, 1, "", "RohdeSchwarzHMC8042"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043": [[33, 1, 1, "", "RohdeSchwarzHMC8043"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020": [[33, 1, 1, "", "RohdeSchwarzHMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030": [[33, 1, 1, "", "RohdeSchwarzHMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030": [[33, 1, 1, "", "RohdeSchwarzHMP4030"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040": [[33, 1, 1, "", "RohdeSchwarzHMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A": [[33, 1, 1, "", "RohdeSchwarz_SMB100A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A": [[33, 3, 1, "", "off"], [33, 3, 1, "", "on"], [33, 3, 1, "", "reset"], [33, 3, 1, "", "run_self_tests"], [33, 3, 1, "", "start_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40": [[33, 1, 1, "", "RohdeSchwarz_SMR40"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40": [[33, 3, 1, "", "do_get_frequency"], [33, 3, 1, "", "do_get_power"], [33, 3, 1, "", "do_get_pulse_delay"], [33, 3, 1, "", "do_get_status"], [33, 3, 1, "", "do_get_status_of_ALC"], [33, 3, 1, "", "do_get_status_of_modulation"], [33, 3, 1, "", "do_set_frequency"], [33, 3, 1, "", "do_set_power"], [33, 3, 1, "", "do_set_pulse_delay"], [33, 3, 1, "", "do_set_status"], [33, 3, 1, "", "do_set_status_of_ALC"], [33, 3, 1, "", "do_set_status_of_modulation"], [33, 3, 1, "", "get_all"], [33, 3, 1, "", "off"], [33, 3, 1, "", "off_modulation"], [33, 3, 1, "", "on"], [33, 3, 1, "", "on_modulation"], [33, 3, 1, "", "reset"], [33, 3, 1, "", "set_ext_trig"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A": [[33, 1, 1, "", "AmplitudeModulation"], [33, 1, 1, "", "FrequencyModulation"], [33, 1, 1, "", "IQChannel"], [33, 1, 1, "", "IQModulation"], [33, 1, 1, "", "LFOutputChannel"], [33, 1, 1, "", "LFOutputSweep"], [33, 1, 1, "", "OutputChannel"], [33, 1, 1, "", "OutputFrequencySweep"], [33, 1, 1, "", "OutputLevelSweep"], [33, 1, 1, "", "PhaseModulation"], [33, 1, 1, "", "PulseGenerator"], [33, 1, 1, "", "PulseModulation"], [33, 1, 1, "", "RohdeSchwarz_SMW200A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "coupling_mode"], [33, 2, 1, "", "depth"], [33, 2, 1, "", "deviation_ratio"], [33, 2, 1, "", "sensitivity"], [33, 2, 1, "", "source"], [33, 2, 1, "", "state"], [33, 2, 1, "", "total_depth"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "coupling_mode"], [33, 2, 1, "", "deviation"], [33, 2, 1, "", "deviation_ratio"], [33, 2, 1, "", "mode"], [33, 2, 1, "", "sensitivity"], [33, 2, 1, "", "source"], [33, 2, 1, "", "state"], [33, 2, 1, "", "total_deviation"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "coupling"], [33, 2, 1, "", "i_bias"], [33, 2, 1, "", "i_offset"], [33, 2, 1, "", "level"], [33, 2, 1, "", "mode"], [33, 2, 1, "", "q_bias"], [33, 2, 1, "", "q_offset"], [33, 2, 1, "", "state"], [33, 2, 1, "", "type"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "crest_factor"], [33, 2, 1, "", "gain"], [33, 2, 1, "", "source"], [33, 2, 1, "", "state"], [33, 2, 1, "", "swap"], [33, 2, 1, "", "wideband"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "bandwidth"], [33, 2, 1, "", "freq_manual"], [33, 2, 1, "", "freq_max"], [33, 2, 1, "", "freq_min"], [33, 2, 1, "", "frequency"], [33, 2, 1, "", "mode"], [33, 2, 1, "", "offset"], [33, 2, 1, "", "period"], [33, 2, 1, "", "shape"], [33, 2, 1, "", "shape_duty_cycle"], [33, 2, 1, "", "shape_period"], [33, 2, 1, "", "shape_width"], [33, 2, 1, "", "source"], [33, 2, 1, "", "source_path"], [33, 2, 1, "", "state"], [33, 2, 1, "", "trapez_fall"], [33, 2, 1, "", "trapez_height"], [33, 2, 1, "", "trapez_period"], [33, 2, 1, "", "trapez_rise"], [33, 2, 1, "", "triangle_period"], [33, 2, 1, "", "triangle_rise"], [33, 2, 1, "", "voltage"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "dwell"], [33, 2, 1, "", "execute"], [33, 2, 1, "", "lin_step"], [33, 2, 1, "", "log_step"], [33, 2, 1, "", "mode"], [33, 2, 1, "", "points"], [33, 2, 1, "", "retrace"], [33, 2, 1, "", "running"], [33, 2, 1, "", "shape"], [33, 2, 1, "", "spacing"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "frequency"], [33, 2, 1, "", "level"], [33, 2, 1, "", "losc_input"], [33, 2, 1, "", "losc_mode"], [33, 2, 1, "", "losc_output"], [33, 2, 1, "", "losc_state"], [33, 2, 1, "", "mode"], [33, 2, 1, "", "state"], [33, 2, 1, "", "sweep_center"], [33, 2, 1, "", "sweep_span"], [33, 2, 1, "", "sweep_start"], [33, 2, 1, "", "sweep_stop"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "dwell"], [33, 2, 1, "", "execute"], [33, 2, 1, "", "lin_step"], [33, 2, 1, "", "log_step"], [33, 2, 1, "", "mode"], [33, 2, 1, "", "points"], [33, 2, 1, "", "reset"], [33, 2, 1, "", "retrace"], [33, 2, 1, "", "running"], [33, 2, 1, "", "shape"], [33, 2, 1, "", "spacing"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "attenuator"], [33, 2, 1, "", "dwell"], [33, 2, 1, "", "execute"], [33, 2, 1, "", "log_step"], [33, 2, 1, "", "mode"], [33, 2, 1, "", "points"], [33, 2, 1, "", "reset"], [33, 2, 1, "", "retrace"], [33, 2, 1, "", "running"], [33, 2, 1, "", "shape"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "coupling_mode"], [33, 2, 1, "", "deviation"], [33, 2, 1, "", "mode"], [33, 2, 1, "", "ratio"], [33, 2, 1, "", "sensitivity"], [33, 2, 1, "", "source"], [33, 2, 1, "", "state"], [33, 2, 1, "", "total_deviation"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "output"], [33, 2, 1, "", "polarity"], [33, 2, 1, "", "state"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "delay"], [33, 2, 1, "", "double_delay"], [33, 2, 1, "", "double_width"], [33, 2, 1, "", "impedance"], [33, 2, 1, "", "mode"], [33, 2, 1, "", "period"], [33, 2, 1, "", "polarity"], [33, 2, 1, "", "source"], [33, 2, 1, "", "state"], [33, 2, 1, "", "transition_type"], [33, 2, 1, "", "trigger_impedance"], [33, 2, 1, "", "trigger_mode"], [33, 2, 1, "", "video_polarity"], [33, 2, 1, "", "width"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A": [[33, 3, 1, "", "close"], [33, 3, 1, "", "gen_trigger_pulse"], [33, 3, 1, "", "get_error"], [33, 3, 1, "", "get_id"], [33, 3, 1, "", "get_options"], [33, 3, 1, "", "getall"], [33, 3, 1, "", "reset"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim": [[33, 1, 1, "", "MockVisa"], [33, 1, 1, "", "MockVisaHandle"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisa": [[33, 3, 1, "", "set_address"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle": [[33, 3, 1, "", "ask"], [33, 3, 1, "", "clear"], [33, 3, 1, "", "close"], [33, 2, 1, "", "cmddef"], [33, 3, 1, "", "query"], [33, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13": [[33, 1, 1, "", "ComplexSweep"], [33, 1, 1, "", "FrequencySweep"], [33, 1, 1, "", "FrequencySweepMagPhase"], [33, 1, 1, "", "SAFrequencySweep"], [33, 1, 1, "", "ZVL13"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep": [[33, 3, 1, "", "get_raw"], [33, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep": [[33, 3, 1, "", "get_raw"], [33, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase": [[33, 3, 1, "", "get_raw"], [33, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep": [[33, 3, 1, "", "get_raw"], [33, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13": [[33, 3, 1, "", "calibration"], [33, 3, 1, "", "na_mode"], [33, 3, 1, "", "reset"], [33, 3, 1, "", "sa_mode"], [33, 3, 1, "", "update_traces"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private": [[34, 0, 0, "-", "HMC804x"], [34, 0, 0, "-", "HMP"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x": [[34, 1, 1, "", "RohdeSchwarzHMC804xChannel"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP": [[34, 1, 1, "", "RohdeSchwarzHMPChannel"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel": [[34, 3, 1, "", "get_max_current"], [34, 3, 1, "", "send_cmd"]], "qcodes_contrib_drivers.drivers.Shamrock": [[35, 0, 0, "-", "SR750"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750": [[35, 1, 1, "", "ShamrockCIF"], [35, 1, 1, "", "Shamrock_SR750"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF": [[35, 3, 1, "", "close"], [35, 2, 1, "", "dll"], [35, 3, 1, "", "error_check"], [35, 3, 1, "", "get_calibration"], [35, 3, 1, "", "get_grating"], [35, 3, 1, "", "get_grating_info"], [35, 3, 1, "", "get_number_devices"], [35, 3, 1, "", "get_number_gratings"], [35, 3, 1, "", "get_number_pixels"], [35, 3, 1, "", "get_pixel_width"], [35, 3, 1, "", "get_serial_number"], [35, 3, 1, "", "get_slit"], [35, 3, 1, "", "get_wavelength"], [35, 3, 1, "", "get_wavelength_limits"], [35, 3, 1, "", "initialize"], [35, 3, 1, "", "set_grating"], [35, 3, 1, "", "set_number_pixels"], [35, 3, 1, "", "set_pixel_width"], [35, 3, 1, "", "set_slit"], [35, 3, 1, "", "set_wavelength"], [35, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750": [[35, 2, 1, "", "ShamrockCIF"], [35, 3, 1, "", "close"], [35, 2, 1, "", "device_id"], [35, 3, 1, "", "get_idn"], [35, 2, 1, "", "number_gratings"], [35, 2, 1, "", "serial_number"]], "qcodes_contrib_drivers.drivers.Siglent": [[36, 0, 0, "-", "sdg"], [36, 0, 0, "-", "sdg_channel"], [36, 0, 0, "-", "sds"], [36, 0, 0, "-", "sdx"]], "qcodes_contrib_drivers.drivers.Siglent.sdg": [[36, 1, 1, "", "SiglentSDGx"], [36, 1, 1, "", "Siglent_SDG_2042X"], [36, 1, 1, "", "Siglent_SDG_20xx"], [36, 1, 1, "", "Siglent_SDG_6022X"], [36, 1, 1, "", "Siglent_SDG_60xx"]], "qcodes_contrib_drivers.drivers.Siglent.sdg_channel": [[36, 1, 1, "", "SiglentSDGChannel"]], "qcodes_contrib_drivers.drivers.Siglent.sds": [[36, 1, 1, "", "Siglent_SDS_120NxE"], [36, 1, 1, "", "TriggerMode"], [36, 1, 1, "", "WaveformSetup"]], "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE": [[36, 3, 1, "", "get_channel_waveform"], [36, 3, 1, "", "get_channel_waveform_data"], [36, 3, 1, "", "get_math_vdiv"], [36, 3, 1, "", "get_math_waveform"], [36, 3, 1, "", "get_num_samples"], [36, 3, 1, "", "get_ofst"], [36, 3, 1, "", "get_raw_analog_waveform_data"], [36, 3, 1, "", "get_raw_digital_waveform_data"], [36, 3, 1, "", "get_raw_math_waveform_data"], [36, 3, 1, "", "get_sample_rate"], [36, 3, 1, "", "get_time_base"], [36, 3, 1, "", "get_trig_mode"], [36, 3, 1, "", "get_vdiv"], [36, 3, 1, "", "get_waveform_setup"], [36, 3, 1, "", "set_to_fft"], [36, 3, 1, "", "set_trig_mode"], [36, 3, 1, "", "set_waveform_setup"]], "qcodes_contrib_drivers.drivers.Siglent.sds.TriggerMode": [[36, 2, 1, "", "AUTO"], [36, 2, 1, "", "NORMAL"], [36, 2, 1, "", "SINGLE"], [36, 2, 1, "", "STOP"]], "qcodes_contrib_drivers.drivers.Siglent.sds.WaveformSetup": [[36, 2, 1, "", "num_points"], [36, 2, 1, "", "spacing"], [36, 2, 1, "", "start_idx"]], "qcodes_contrib_drivers.drivers.Siglent.sdx": [[36, 1, 1, "", "SiglentChannel"], [36, 1, 1, "", "SiglentSDx"]], "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentChannel": [[36, 5, 1, "", "channel_number"]], "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentSDx": [[36, 3, 1, "", "reset"], [36, 3, 1, "", "scdp_bmp_bytes"], [36, 3, 1, "", "screen_dump_bmp"]], "qcodes_contrib_drivers.drivers.SignalCore": [[37, 0, 0, "-", "SignalCore"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore": [[37, 1, 1, "", "DeviceInfoT"], [37, 1, 1, "", "DeviceRFParamsT"], [37, 1, 1, "", "DeviceStatusT"], [37, 1, 1, "", "HWTriggerT"], [37, 1, 1, "", "ListModeT"], [37, 1, 1, "", "ManDate"], [37, 1, 1, "", "OperateStatusT"], [37, 1, 1, "", "PLLStatusT"], [37, 1, 1, "", "SC5521A"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT": [[37, 2, 1, "", "device_interfaces"], [37, 2, 1, "", "firmware_revision"], [37, 2, 1, "", "hardware_revision"], [37, 2, 1, "", "man_date"], [37, 2, 1, "", "product_serial_number"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT": [[37, 2, 1, "", "atten_value"], [37, 2, 1, "", "buffer_points"], [37, 2, 1, "", "frequency"], [37, 2, 1, "", "level_dac_value"], [37, 2, 1, "", "power_level"], [37, 2, 1, "", "rf_phase_offset"], [37, 2, 1, "", "sweep_cycles"], [37, 2, 1, "", "sweep_dwell_time"], [37, 2, 1, "", "sweep_start_freq"], [37, 2, 1, "", "sweep_step_freq"], [37, 2, 1, "", "sweep_stop_freq"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT": [[37, 2, 1, "", "list_mode_t"], [37, 2, 1, "", "operate_status_t"], [37, 2, 1, "", "pll_status_t"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT": [[37, 2, 1, "", "edge"], [37, 2, 1, "", "pxi_enable"], [37, 2, 1, "", "pxi_line"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT": [[37, 2, 1, "", "hw_trigger"], [37, 2, 1, "", "return_to_start"], [37, 2, 1, "", "step_on_hw_trig"], [37, 2, 1, "", "sweep_dir"], [37, 2, 1, "", "sweep_mode"], [37, 2, 1, "", "tri_waveform"], [37, 2, 1, "", "trig_out_enable"], [37, 2, 1, "", "trig_out_on_cycle"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate": [[37, 2, 1, "", "day"], [37, 2, 1, "", "hour"], [37, 2, 1, "", "month"], [37, 2, 1, "", "year"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT": [[37, 2, 1, "", "auto_pwr_disable"], [37, 2, 1, "", "device_access"], [37, 2, 1, "", "device_standby"], [37, 2, 1, "", "ext_ref_detect"], [37, 2, 1, "", "ext_ref_lock_enable"], [37, 2, 1, "", "harmonic_ss"], [37, 2, 1, "", "list_mode_running"], [37, 2, 1, "", "output_enable"], [37, 2, 1, "", "over_temp"], [37, 2, 1, "", "pci_clk_enable"], [37, 2, 1, "", "ref_out_select"], [37, 2, 1, "", "rf1_lock_mode"], [37, 2, 1, "", "rf1_loop_gain"], [37, 2, 1, "", "rf_mode"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT": [[37, 2, 1, "", "crs_aux_pll_ld"], [37, 2, 1, "", "crs_pll_ld"], [37, 2, 1, "", "crs_ref_pll_ld"], [37, 2, 1, "", "fine_pll_ld"], [37, 2, 1, "", "ref_100_pll_ld"], [37, 2, 1, "", "ref_10_pll_ld"], [37, 2, 1, "", "sum_pll_ld"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.SingleQuantum": [[38, 0, 0, "-", "SingleQuantum"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum": [[38, 1, 1, "", "ChannelArray"], [38, 1, 1, "", "CommunicationHandler"], [38, 1, 1, "", "SQCounts"], [38, 1, 1, "", "SQTalk"], [38, 1, 1, "", "TimeArray"], [38, 1, 1, "", "WebSQControlqcode"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.ChannelArray": [[38, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler": [[38, 3, 1, "", "acquire_cnts_t"], [38, 3, 1, "", "auto_cali_bias_currents"], [38, 3, 1, "", "auto_cali_finished"], [38, 3, 1, "", "enable_detectors"], [38, 3, 1, "", "error"], [38, 3, 1, "", "get_bias_current"], [38, 3, 1, "", "get_bias_voltage"], [38, 3, 1, "", "get_measurement_periode"], [38, 3, 1, "", "get_number_of_detectors"], [38, 3, 1, "", "get_trigger_level"], [38, 3, 1, "", "set_bias_current"], [38, 3, 1, "", "set_dark_counts_auto_iv"], [38, 3, 1, "", "set_measurement_periode"], [38, 3, 1, "", "set_trigger_level"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts": [[38, 3, 1, "", "close"], [38, 3, 1, "", "get_n"], [38, 3, 1, "", "run"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk": [[38, 3, 1, "", "add_labelProps"], [38, 3, 1, "", "check_error"], [38, 3, 1, "", "close"], [38, 3, 1, "", "get_all_labels"], [38, 3, 1, "", "get_label"], [38, 3, 1, "", "run"], [38, 3, 1, "", "send"], [38, 3, 1, "", "sub_jsons"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.TimeArray": [[38, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.Spectrum": [[39, 0, 0, "-", "M4i"], [40, 0, 0, "-", "py_header"]], "qcodes_contrib_drivers.drivers.Spectrum.M4i": [[39, 1, 1, "", "M4i"], [39, 6, 1, "", "szTypeToName"]], "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i": [[39, 3, 1, "", "__init__"], [39, 3, 1, "", "active_channels"], [39, 3, 1, "", "blockavg_hardware_trigger_acquisition"], [39, 3, 1, "", "close"], [39, 3, 1, "", "convert_to_voltage"], [39, 3, 1, "", "gated_trigger_acquisition"], [39, 3, 1, "", "get_card_memory"], [39, 3, 1, "", "get_card_type"], [39, 3, 1, "", "get_data"], [39, 3, 1, "", "get_error_info32bit"], [39, 3, 1, "", "get_firmware_version"], [39, 3, 1, "", "get_hardware_version"], [39, 3, 1, "", "get_idn"], [39, 3, 1, "", "get_max_sample_rate"], [39, 3, 1, "", "initialize_channels"], [39, 3, 1, "", "multiple_trigger_acquisition"], [39, 3, 1, "", "reset"], [39, 3, 1, "", "retrieve_data"], [39, 3, 1, "", "set_channel_OR_trigger_settings"], [39, 3, 1, "", "set_channel_settings"], [39, 3, 1, "", "set_ext0_OR_trigger_settings"], [39, 3, 1, "", "setup_multi_recording"], [39, 3, 1, "", "single_software_trigger_acquisition"], [39, 3, 1, "", "single_software_trigger_acquisition_boxcar"], [39, 3, 1, "", "single_trigger_acquisition"], [39, 3, 1, "", "start_acquisition"], [39, 3, 1, "", "start_triggered"], [39, 3, 1, "", "wait_ready"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header": [[40, 0, 0, "-", "h2py"], [40, 0, 0, "-", "regs"], [40, 0, 0, "-", "spcerr"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py": [[40, 6, 1, "", "main"], [40, 6, 1, "", "process"], [40, 6, 1, "", "pytify"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs": [[40, 6, 1, "", "GIGA"], [40, 6, 1, "", "GIGA_B"], [40, 6, 1, "", "KILO"], [40, 6, 1, "", "KILO_B"], [40, 6, 1, "", "MEGA"], [40, 6, 1, "", "MEGA_B"]], "qcodes_contrib_drivers.drivers.Standa": [[41, 0, 0, "-", "Standa_10MWA168"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168": [[41, 1, 1, "", "DeviceInformation"], [41, 1, 1, "", "GetPosition"], [41, 1, 1, "", "Standa_10MWA168"], [41, 1, 1, "", "Status"], [41, 1, 1, "", "libximc"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation": [[41, 2, 1, "", "Major"], [41, 2, 1, "", "Manufacturer"], [41, 2, 1, "", "ManufacturerId"], [41, 2, 1, "", "Minor"], [41, 2, 1, "", "ProductDescription"], [41, 2, 1, "", "Release"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition": [[41, 2, 1, "", "EncPosition"], [41, 2, 1, "", "Position"], [41, 2, 1, "", "uPosition"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status": [[41, 2, 1, "", "CmdBufFreeSpace"], [41, 2, 1, "", "CurPosition"], [41, 2, 1, "", "CurSpeed"], [41, 2, 1, "", "CurT"], [41, 2, 1, "", "EncPosition"], [41, 2, 1, "", "EncSts"], [41, 2, 1, "", "Flags"], [41, 2, 1, "", "GPIOFlags"], [41, 2, 1, "", "Ipwr"], [41, 2, 1, "", "Iusb"], [41, 2, 1, "", "MoveSts"], [41, 2, 1, "", "MvCmdSts"], [41, 2, 1, "", "PWRSts"], [41, 2, 1, "", "Upwr"], [41, 2, 1, "", "Uusb"], [41, 2, 1, "", "WindSts"], [41, 2, 1, "", "uCurPosition"], [41, 2, 1, "", "uCurSpeed"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc": [[41, 3, 1, "", "command_move"], [41, 3, 1, "", "enumerate_devices"], [41, 3, 1, "", "error_check"], [41, 3, 1, "", "get_device_name"], [41, 3, 1, "", "get_position"], [41, 3, 1, "", "get_status"], [41, 3, 1, "", "open_device"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems": [[42, 0, 0, "-", "CS580"], [42, 0, 0, "-", "DG645"], [42, 0, 0, "-", "SIM928"], [42, 0, 0, "-", "SR570"], [42, 0, 0, "-", "SR844"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580": [[42, 1, 1, "", "CS580"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580": [[42, 3, 1, "", "get_idn"], [42, 3, 1, "", "get_overload"], [42, 3, 1, "", "reset"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645": [[42, 1, 1, "", "DG645"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645": [[42, 2, 1, "", "CHANNEL_MAPPING"], [42, 2, 1, "", "DISPLAY_MAPPING"], [42, 2, 1, "", "OUTPUT_MAPPING"], [42, 2, 1, "", "POLARITY_MAPPING"], [42, 2, 1, "", "PRESCALE_MAPPING"], [42, 2, 1, "", "TRIGGER_MAPPING"], [42, 3, 1, "", "local"], [42, 3, 1, "", "remote"], [42, 3, 1, "", "reset"], [42, 3, 1, "", "save_settings"], [42, 3, 1, "", "self_calibrate"], [42, 3, 1, "", "self_test"], [42, 3, 1, "", "trigger"], [42, 3, 1, "", "wait"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928": [[42, 1, 1, "", "SIM928"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928": [[42, 3, 1, "", "ask_module"], [42, 3, 1, "", "byte_to_bits"], [42, 3, 1, "", "check_module_errors"], [42, 3, 1, "", "find_modules"], [42, 3, 1, "", "get_module_idn"], [42, 3, 1, "", "get_module_status"], [42, 3, 1, "", "get_voltage"], [42, 3, 1, "", "reset_module"], [42, 3, 1, "", "set_smooth"], [42, 3, 1, "", "set_voltage"], [42, 3, 1, "", "write_module"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570": [[42, 1, 1, "", "SR570"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570.SR570": [[42, 3, 1, "", "get_idn"], [42, 3, 1, "", "reset"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844": [[42, 1, 1, "", "ChannelTrace"], [42, 1, 1, "", "GeneratedSetPoints"], [42, 1, 1, "", "SR844"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace": [[42, 3, 1, "", "__init__"], [42, 3, 1, "", "get_buffer_length"], [42, 3, 1, "", "get_raw"], [42, 3, 1, "", "parse_binary"], [42, 3, 1, "", "poll_raw_binary_data"], [42, 3, 1, "", "update_unit"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints": [[42, 3, 1, "", "get_raw"], [42, 3, 1, "", "set_raw"], [42, 3, 1, "", "update_units_if_constant_sample_rate"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844": [[42, 2, 1, "", "SNAP_PARAMETERS"], [42, 3, 1, "", "decrement_sensitivity"], [42, 3, 1, "", "get_display_value"], [42, 3, 1, "", "increment_sensitivity"], [42, 2, 1, "", "sensitivity_value_map"], [42, 3, 1, "", "set_sweep_parameters"], [42, 3, 1, "", "snap"], [42, 3, 1, "", "update_ch_unit"], [42, 2, 1, "", "value_sensitivity_map"]], "qcodes_contrib_drivers.drivers.SwabianInstruments": [[43, 0, 0, "-", "Swabian_Instruments_Time_Tagger"], [44, 0, 0, "-", "private"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger": [[43, 1, 1, "", "CoincidenceVirtualChannel"], [43, 1, 1, "", "CombinerVirtualChannel"], [43, 1, 1, "", "CorrelationMeasurement"], [43, 1, 1, "", "CountRateMeasurement"], [43, 1, 1, "", "CounterMeasurement"], [43, 1, 1, "", "HistogramLogBinsMeasurement"], [43, 1, 1, "", "TimeTagger"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CoincidenceVirtualChannel": [[43, 2, 1, "", "api"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CombinerVirtualChannel": [[43, 2, 1, "", "api"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CorrelationMeasurement": [[43, 2, 1, "", "api"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CountRateMeasurement": [[43, 2, 1, "", "api"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement": [[43, 2, 1, "", "api"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement": [[43, 2, 1, "", "api"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger": [[43, 3, 1, "", "__init__"], [43, 5, 1, "", "api"], [43, 3, 1, "", "close"], [43, 3, 1, "", "get_idn"], [43, 3, 1, "", "get_input_delay"], [43, 3, 1, "", "get_test_signal"], [43, 3, 1, "", "get_trigger_level"], [43, 3, 1, "", "remove_all_measurements"], [43, 3, 1, "", "remove_all_virtual_channels"], [43, 3, 1, "", "set_input_delay"], [43, 3, 1, "", "set_test_signal"], [43, 3, 1, "", "set_trigger_level"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private": [[44, 0, 0, "-", "time_tagger"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger": [[44, 1, 1, "", "ArrayLikeValidator"], [44, 1, 1, "", "MeasurementControlMixin"], [44, 1, 1, "", "ParameterWithSetSideEffect"], [44, 1, 1, "", "TimeTaggerInstrumentBase"], [44, 1, 1, "", "TimeTaggerMeasurement"], [44, 1, 1, "", "TimeTaggerModule"], [44, 1, 1, "", "TimeTaggerSynchronizedMeasurements"], [44, 1, 1, "", "TimeTaggerVirtualChannel"], [44, 1, 1, "", "TypeValidator"], [44, 6, 1, "", "cached_api_object"], [44, 6, 1, "", "refer_to_api_doc"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.ArrayLikeValidator": [[44, 3, 1, "", "validate"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin": [[44, 5, 1, "", "api"], [44, 3, 1, "", "clear"], [44, 3, 1, "", "is_running"], [44, 3, 1, "", "start"], [44, 3, 1, "", "start_for"], [44, 3, 1, "", "stop"], [44, 3, 1, "", "wait_until_finished"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerInstrumentBase": [[44, 5, 1, "", "api"], [44, 3, 1, "", "get_configuration"], [44, 3, 1, "", "snapshot_base"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerMeasurement": [[44, 3, 1, "", "get_capture_duration"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerModule": [[44, 3, 1, "", "__init__"], [44, 5, 1, "", "api"], [44, 5, 1, "", "api_tagger"], [44, 3, 1, "", "implementations"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerSynchronizedMeasurements": [[44, 5, 1, "", "api"], [44, 5, 1, "", "api_tagger"], [44, 3, 1, "", "register_measurement"], [44, 3, 1, "", "unregister_measurement"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerVirtualChannel": [[44, 3, 1, "", "get_channel"], [44, 3, 1, "", "get_channels"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TypeValidator": [[44, 3, 1, "", "validate"]], "qcodes_contrib_drivers.drivers.Tektronix": [[45, 0, 0, "-", "AFG3000"], [45, 0, 0, "-", "AWG520"], [45, 0, 0, "-", "FCA3100"], [45, 0, 0, "-", "Keithley_2000_Scan"], [45, 0, 0, "-", "Keithley_2700"], [45, 0, 0, "-", "Keithley_6430"], [45, 0, 0, "-", "Keithley_6500"]], "qcodes_contrib_drivers.drivers.Tektronix.AFG3000": [[45, 1, 1, "", "AFG3000"], [45, 1, 1, "", "AFG3252"]], "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000": [[45, 3, 1, "", "abort"], [45, 3, 1, "", "recall"], [45, 3, 1, "", "reset"], [45, 3, 1, "", "reset_edit_memory"], [45, 3, 1, "", "save"], [45, 3, 1, "", "self_calibrate"], [45, 3, 1, "", "self_test"], [45, 3, 1, "", "synchronize_phase"], [45, 3, 1, "", "upload_waveform"], [45, 3, 1, "", "wait"]], "qcodes_contrib_drivers.drivers.Tektronix.AWG520": [[45, 1, 1, "", "Tektronix_AWG520"]], "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520": [[45, 3, 1, "", "__init__"], [45, 3, 1, "", "change_folder"], [45, 3, 1, "", "clear_waveforms"], [45, 3, 1, "", "delete_all_waveforms_from_list"], [45, 3, 1, "", "force_logicjump"], [45, 3, 1, "", "force_trigger"], [45, 3, 1, "", "get_all"], [45, 3, 1, "", "get_current_folder_name"], [45, 3, 1, "", "get_filenames"], [45, 3, 1, "", "get_folder_contents"], [45, 3, 1, "", "get_jumpmode"], [45, 3, 1, "", "get_state"], [45, 3, 1, "", "goto_root"], [45, 3, 1, "", "load_and_set_sequence"], [45, 3, 1, "", "make_directory"], [45, 3, 1, "", "resend_waveform"], [45, 3, 1, "", "return_self"], [45, 3, 1, "", "send_pattern"], [45, 3, 1, "", "send_sequence"], [45, 3, 1, "", "send_sequence2"], [45, 3, 1, "", "send_waveform"], [45, 3, 1, "", "set_current_folder_name"], [45, 3, 1, "", "set_jumpmode"], [45, 3, 1, "", "set_sequence"], [45, 3, 1, "", "set_setup_filename"], [45, 3, 1, "", "start"], [45, 3, 1, "", "stop"]], "qcodes_contrib_drivers.drivers.Tektronix.FCA3100": [[45, 1, 1, "", "CompleteTimeStatistics"], [45, 1, 1, "", "FCA3100"], [45, 1, 1, "", "GeneratedSetPoints"], [45, 1, 1, "", "TimeStatistics"]], "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.CompleteTimeStatistics": [[45, 3, 1, "", "__init__"], [45, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.FCA3100": [[45, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.GeneratedSetPoints": [[45, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.TimeStatistics": [[45, 3, 1, "", "__init__"], [45, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan": [[45, 1, 1, "", "Keithley_2000_Scan_Channel"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan.Keithley_2000_Scan_Channel": [[45, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700": [[45, 1, 1, "", "Keithley_2700"], [45, 6, 1, "", "bool_to_str"], [45, 6, 1, "", "parsebool"], [45, 6, 1, "", "parseint"], [45, 6, 1, "", "parsestr"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700": [[45, 3, 1, "", "get_all"], [45, 3, 1, "", "reset"], [45, 3, 1, "", "set_defaults"], [45, 3, 1, "", "set_mode"], [45, 3, 1, "", "set_mode_volt_dc"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430": [[45, 1, 1, "", "Keithley_6430"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430": [[45, 3, 1, "", "init"], [45, 3, 1, "", "read"], [45, 3, 1, "", "reset"], [45, 3, 1, "", "set_trigger_immediate"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500": [[45, 1, 1, "", "Keithley_6500"], [45, 1, 1, "", "Keithley_Sense"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_6500": [[45, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_Sense": [[45, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Thermotek": [[46, 0, 0, "-", "Thermotek_T255p"]], "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p": [[46, 1, 1, "", "ThermotekT255p"]], "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p": [[46, 3, 1, "", "alarm_state"], [46, 3, 1, "", "ask"], [46, 2, 1, "", "enabled"], [46, 3, 1, "", "get_idn"], [46, 3, 1, "", "status"], [46, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.Thorlabs": [[47, 0, 0, "-", "K10CR1"], [47, 0, 0, "-", "KDC101"], [47, 0, 0, "-", "KLS1550"], [47, 0, 0, "-", "MFF10x"], [47, 0, 0, "-", "PM100D"], [47, 0, 0, "-", "PRM1Z8"], [47, 0, 0, "-", "TDC001"], [48, 0, 0, "-", "private"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1": [[47, 1, 1, "", "HomeLimitSwitch"], [47, 1, 1, "", "RotationDirection"], [47, 1, 1, "", "Thorlabs_K10CR1"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch": [[47, 2, 1, "", "FORWARD"], [47, 2, 1, "", "REVERSE"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection": [[47, 2, 1, "", "FORWARD"], [47, 2, 1, "", "REVERSE"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1": [[47, 2, 1, "", "apt"], [47, 3, 1, "", "get_idn"], [47, 2, 1, "", "model"], [47, 2, 1, "", "serial_number"], [47, 2, 1, "", "version"]], "qcodes_contrib_drivers.drivers.Thorlabs.KDC101": [[47, 1, 1, "", "Thorlabs_KDC101"]], "qcodes_contrib_drivers.drivers.Thorlabs.KLS1550": [[47, 1, 1, "", "Thorlabs_KLS1550"]], "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x": [[47, 1, 1, "", "Thorlabs_MFF10x"]], "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x": [[47, 2, 1, "", "apt"], [47, 3, 1, "", "get_idn"], [47, 2, 1, "", "model"], [47, 2, 1, "", "serial_number"], [47, 2, 1, "", "version"]], "qcodes_contrib_drivers.drivers.Thorlabs.PM100D": [[47, 1, 1, "", "Thorlab_PM100D"]], "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8": [[47, 1, 1, "", "Thorlabs_PRM1Z8"]], "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8": [[47, 2, 1, "", "apt"], [47, 3, 1, "", "get_idn"], [47, 2, 1, "", "model"], [47, 2, 1, "", "serial_number"], [47, 2, 1, "", "version"]], "qcodes_contrib_drivers.drivers.Thorlabs.TDC001": [[47, 1, 1, "", "Thorlabs_TDC001"]], "qcodes_contrib_drivers.drivers.Thorlabs.private": [[48, 0, 0, "-", "APT"], [48, 0, 0, "-", "CC"], [48, 0, 0, "-", "LS"], [48, 0, 0, "-", "kinesis"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.APT": [[48, 4, 1, "", "ThorlabsException"], [48, 1, 1, "", "ThorlabsHWType"], [48, 1, 1, "", "Thorlabs_APT"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType": [[48, 2, 1, "", "BBD10x"], [48, 2, 1, "", "BDC101"], [48, 2, 1, "", "BSC001"], [48, 2, 1, "", "BSC002"], [48, 2, 1, "", "BSC101"], [48, 2, 1, "", "DCC001"], [48, 2, 1, "", "K10CR1"], [48, 2, 1, "", "KDC101"], [48, 2, 1, "", "L490MZ"], [48, 2, 1, "", "LTSxxx"], [48, 2, 1, "", "MFF10x"], [48, 2, 1, "", "MST601"], [48, 2, 1, "", "ODC001"], [48, 2, 1, "", "OST001"], [48, 2, 1, "", "PRM1Z8"], [48, 2, 1, "", "SCC001"], [48, 2, 1, "", "TDC001"], [48, 2, 1, "", "TST001"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT": [[48, 3, 1, "", "apt_clean_up"], [48, 3, 1, "", "apt_init"], [48, 3, 1, "", "disable_hw_channel"], [48, 2, 1, "", "dll"], [48, 3, 1, "", "enable_event_dlg"], [48, 3, 1, "", "enable_hw_channel"], [48, 3, 1, "", "error_check"], [48, 3, 1, "", "get_hw_info"], [48, 3, 1, "", "get_hw_serial_num_ex"], [48, 3, 1, "", "init_hw_device"], [48, 3, 1, "", "list_available_devices"], [48, 3, 1, "", "mot_get_home_parameters"], [48, 3, 1, "", "mot_get_position"], [48, 3, 1, "", "mot_get_status_bits"], [48, 3, 1, "", "mot_get_velocity_parameters"], [48, 3, 1, "", "mot_move_absolute_ex"], [48, 3, 1, "", "mot_move_home"], [48, 3, 1, "", "mot_move_jog"], [48, 3, 1, "", "mot_move_velocity"], [48, 3, 1, "", "mot_set_home_parameters"], [48, 3, 1, "", "mot_set_velocity_parameters"], [48, 3, 1, "", "mot_stop_profiled"], [48, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Valon": [[49, 0, 0, "-", "Valon_5015"]], "qcodes_contrib_drivers.drivers.Valon.Valon_5015": [[49, 1, 1, "", "Valon5015"]], "qcodes_contrib_drivers.drivers.Vaunix": [[50, 0, 0, "-", "LDA"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA": [[50, 2, 1, "", "LDA"], [50, 1, 1, "", "LdaAttenuation"], [50, 1, 1, "", "LdaChannel"], [50, 1, 1, "", "LdaParameter"], [50, 1, 1, "", "LdaWorkingFrequency"], [50, 1, 1, "", "Vaunix_LDA"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaAttenuation": [[50, 2, 1, "", "scaling"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter": [[50, 3, 1, "", "__init__"], [50, 3, 1, "", "get_raw"], [50, 2, 1, "", "scaling"], [50, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency": [[50, 3, 1, "", "__init__"], [50, 3, 1, "", "get_validator"], [50, 2, 1, "", "scaling"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA": [[50, 3, 1, "", "__init__"], [50, 3, 1, "", "close"], [50, 2, 1, "", "dll_path"], [50, 3, 1, "", "get_idn"], [50, 3, 1, "", "save_settings"]], "qcodes_contrib_drivers.drivers.ZurichInstruments": [[51, 0, 0, "-", "HF2LI"], [51, 0, 0, "-", "ZIHDAWG8"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI": [[51, 1, 1, "", "HF2LI"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI": [[51, 2, 1, "", "OUTPUT_MAPPING"], [51, 3, 1, "", "sample"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8": [[51, 4, 1, "", "CompilerError"], [51, 1, 1, "", "ZIHDAWG8"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "create_parameters_from_node_tree"], [51, 3, 1, "", "disable_channel"], [51, 3, 1, "", "download_device_node_tree"], [51, 3, 1, "", "enable_channel"], [51, 3, 1, "", "generate_csv_sequence_program"], [51, 3, 1, "", "set_channel_grouping"], [51, 3, 1, "", "snapshot"], [51, 3, 1, "", "snapshot_base"], [51, 3, 1, "", "start_awg"], [51, 3, 1, "", "stop_awg"], [51, 3, 1, "", "upload_sequence_program"], [51, 3, 1, "", "upload_waveform"], [51, 3, 1, "", "waveform_to_csv"], [51, 3, 1, "", "waveform_to_wave"]], "qcodes_contrib_drivers.drivers.physik_instrumente": [[52, 0, 0, "-", "mercury"]], "qcodes_contrib_drivers.drivers.physik_instrumente.mercury": [[52, 1, 1, "", "mercury"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "exception", "Python exception"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:exception", "5": "py:property", "6": "py:function"}, "terms": {"": [1, 7, 9, 11, 13, 14, 15, 16, 19, 22, 23, 28, 30, 31, 32, 33, 36, 38, 42, 43, 48, 49, 50, 51, 55, 59, 60, 61, 63, 64, 66, 67, 68, 69, 73, 74, 75, 77, 106, 109, 112, 113, 114, 116, 123, 124], "0": [1, 6, 7, 9, 11, 13, 14, 15, 16, 19, 21, 22, 24, 26, 28, 29, 30, 31, 32, 33, 36, 38, 39, 42, 45, 46, 48, 50, 51, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123], "00": [22, 57, 58, 66, 76, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 102, 109, 121], "000": 120, "000000": 6, "000000000": 70, "0000000e": 59, "000000e": 66, "000069196": 64, "0000k02": [33, 105], "0001": [33, 42], "00012969970703": 119, "000215296835037395": 75, "00025": [65, 104], "0003": 42, "000390634": 61, "0005e": 59, "001": [31, 33, 42, 60, 106, 113], "0014": 70, "0016660000000000002": 70, "001678": 70, "00189208984375": 119, "001926666666665966": 75, "002": [29, 31, 60], "00283333": 95, "003": [42, 60, 95], "00300": 66, "00305115": 59, "0048": 70, "005": [9, 33, 70, 75, 83, 84, 87, 104, 105, 106], "0055": 95, "006": 106, "00655536": 59, "007279999999999731": 75, "0074385j": 106, "00744152": 106, "0078465": 58, "008": 95, "008160411890476027": 75, "00866667": 95, "00901262": 106, "00901563": 106, "0094": 75, "009747936533783237": 75, "009894676458693501": 75, "00it": 109, "01": [22, 32, 33, 42, 62, 66, 70, 73, 75, 77, 83, 84, 87, 88, 90, 91, 95, 102, 106, 113, 116, 120], "0101": 75, "01097229": 59, "011": 84, "01133333": 95, "0116": 75, "01215209": 59, "0125": 95, "013": [83, 84], "013605": 13, "01384824": 59, "0145": 95, "015": [83, 84], "01547223": 59, "016": 65, "0165": 60, "01666": 70, "0166614": 70, "017": 95, "01708669": 59, "01716667": 95, "01844561": 59, "01846251": 114, "01851450451": 114, "01853304": 114, "01856394": 114, "0185761": 114, "01862650541": 114, "01863655": 114, "01863821": 114, "01866243": 114, "01867253": 114, "01867947": 114, "01868165": 114, "01873824896": 114, "01875304": 114, "01884765": 59, "019863333333333344": 75, "01988006": 59, "01996385": 59, "0199999809265137": 108, "01db": 33, "02": [9, 30, 62, 67, 68, 75, 77, 85, 95, 102, 113, 118], "020": 63, "02083835": 59, "021": [83, 84], "02119365": 59, "0214076": 59, "02163175": 59, "02279546": 59, "02283333": 95, "023": 95, "02357165": 59, "02385243": 59, "02391645": 59, "02544277": 59, "0255": 95, "026373828": 103, "02839042": 59, "02866667": 95, "02926526": 59, "02948864": 59, "02987041": 59, "03": [42, 73, 75, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 106], "03038562": 59, "03133333": 95, "03160302": 59, "03176e2e": 73, "03181706": 59, "032301": 69, "03399903": 59, "034": 95, "03521817": 59, "036": 114, "03633333": 95, "037": 95, "03716667": 95, "0380136": 13, "04": [33, 53, 61, 66, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 105], "04283333": 95, "04438044": 115, "045": 9, "0455": 95, "04566667": 95, "0477012": 59, "048": 120, "04b": 115, "04e": 65, "04v": 33, "05": [9, 29, 31, 42, 50, 51, 59, 65, 66, 70, 77, 82, 86, 90, 91, 92, 94, 95, 99, 104, 106, 113, 114], "050000e": 66, "0506": 13, "0506a": 13, "051": 95, "05133333": 95, "057": 95, "05d4ff35": 120, "06": [31, 42, 58, 59, 65, 82, 95, 98, 108, 111, 113], "06103515625": 32, "06177799": 59, "0630699567828778": 76, "0655": 95, "06598604": 59, "0663604736328": 116, "06872062": 59, "07": [31, 42, 65, 113, 115], "07122802734375": 116, "073000": 62, "077": 95, "08": [6, 65, 90, 108], "083": 95, "08e": 65, "09": [59, 60, 61, 63, 73, 93, 94, 113, 114], "09130151": 59, "09391321": 59, "09917688": 59, "0991836423285": 32, "09996000000000001": 70, "0b0011": [67, 68], "0b1100": [67, 68], "0e": 87, "0it": 109, "0j": 109, "0v": [7, 9, 31, 73, 77], "0x0": 120, "0x00000260e600a630": 112, "0x00000260fdf97180": 112, "0x001b": 109, "0x01000001": 39, "0x01000002": 39, "0x0699": 114, "0x08": 51, "0x0957": 53, "0x099c": 102, "0x0a2d": 109, "0x0e0b": 53, "0x10": 51, "0x186e0c5e4f0": 62, "0x18a73db7850": 106, "0x1ab1": 102, "0x1c1331caa20": 75, "0x20": 51, "0x26ca6ddc850": 106, "0x26ca6e02fd0": 106, "0x3000": 114, "0x40": 51, "0xa471608": 113, "1": [1, 6, 7, 8, 9, 11, 15, 19, 21, 22, 26, 28, 29, 30, 31, 32, 33, 36, 39, 42, 44, 45, 46, 48, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123], "10": [1, 6, 15, 26, 27, 28, 32, 39, 42, 45, 53, 55, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 120, 122], "100": [15, 22, 29, 30, 31, 32, 33, 38, 42, 57, 60, 62, 64, 66, 69, 71, 73, 75, 83, 84, 105, 107, 108, 109, 113, 120, 123], "1000": [29, 32, 33, 39, 45, 60, 64, 67, 68, 74, 79, 83, 84, 87, 89, 105, 113, 122], "10000": [22, 39, 59, 113], "100000": [11, 22, 50, 62], "1000000": [22, 33, 62, 87], "10000000": [22, 120], "100000000": [22, 33], "1000000000": 45, "10000000000": 108, "100000e": 66, "10016418": 120, "100313": 66, "10032872": 59, "100377": 66, "1007202881152461": 70, "100e": [60, 80, 87, 90, 91, 94, 113], "100k": [124, 125], "100khz": 105, "100mhz": 63, "101": [106, 122], "101920": 104, "10193855": 59, "102": [50, 75, 106, 121], "1024": [61, 79], "10392121": 59, "105": 13, "10526495": 59, "105578": [33, 105], "106": 75, "10721224": 59, "1073807339": 102, "108": [74, 113, 120], "10e": [79, 80, 82, 88, 92, 93, 95], "10e3": 59, "10e6": [60, 120], "10e9": 108, "10hz": 31, "10khz": 31, "10m": 77, "10ma": 31, "10mhz": [22, 120], "10mwa168": [124, 125], "10n": 22, "11": [16, 32, 42, 48, 53, 55, 59, 60, 61, 62, 63, 65, 70, 74, 79, 80, 81, 83, 84, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99, 102, 109, 112, 113, 114, 115, 121], "11017192": 59, "110e": 88, "111": 109, "11111": 120, "11111111": 42, "112": 95, "113375t": 13, "113772": 59, "11469549": 59, "115153276995": 76, "115200": [19, 64], "1175994873047": 116, "11833333": 95, "119": 95, "11e": 65, "11h": 108, "11it": 109, "12": [1, 13, 42, 48, 53, 55, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 74, 79, 80, 81, 88, 89, 90, 91, 92, 93, 94, 95, 99, 104, 108, 112, 115, 121, 122], "120": [29, 30, 63, 116], "12000": [38, 110], "1202": 36, "1204xe": 36, "121": [116, 120], "122": 116, "12203435": 120, "1223": 120, "123": 53, "12345": 38, "123456": 64, "12345678": 57, "1234567890": 64, "1234567ab8": 112, "125": [109, 116], "12500": 64, "127": 116, "12766667": 95, "128": [22, 39], "12a": 13, "12e": 65, "12t": 13, "12v": [9, 65], "13": [42, 48, 53, 59, 60, 62, 63, 64, 65, 66, 69, 74, 79, 81, 85, 86, 87, 90, 91, 94, 95, 99, 112, 113, 114, 121], "130": 116, "1302357518883": 32, "1304": 6, "13086379": 109, "132": 116, "1326": 64, "133": [50, 66], "1331486": 59, "133333": 82, "13333333": 95, "134": 105, "135": 116, "1350": 107, "1357727": 66, "137": 95, "13789": 55, "138": 116, "139": 106, "139db": 33, "13dbm": 120, "14": [32, 42, 48, 59, 60, 63, 65, 66, 75, 77, 80, 81, 83, 84, 91, 93, 94, 95, 99, 102, 108, 112, 113, 122], "140": [106, 116], "141": 106, "1412": [33, 105], "142": [106, 109], "143": [60, 106, 116], "145": [33, 95, 116], "1450000000": 62, "14529468": 59, "147": 60, "14764": 53, "148": 116, "149": 95, "14994": 70, "15": [6, 59, 60, 63, 65, 70, 75, 79, 81, 82, 85, 88, 90, 95, 99, 108, 112, 120], "150": [6, 64, 116], "1514": 6, "152": 115, "153": [115, 116], "153450": 98, "15385378": 59, "154": 115, "1545": 6, "155": 116, "15566667": 95, "158": 116, "15ghz": 120, "15ma": 65, "16": [6, 9, 32, 39, 59, 60, 61, 63, 65, 67, 68, 79, 81, 85, 99, 102], "161": 116, "162": [95, 98], "1625": 95, "163": 116, "1630954": 112, "16383": 106, "165": 95, "166": 116, "168": [57, 63, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 110, 115, 116, 120], "17": [6, 59, 60, 63, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 120, 121], "1700": 29, "1700000000": 63, "171": [75, 116], "1724": 1, "17241871": 59, "1725": 120, "17265479": 59, "173": 116, "17303064000000035": 62, "17352842": 59, "17442979": 59, "17585808": 59, "17598948": 59, "176": [95, 115, 116], "177": [75, 115], "178": [60, 98, 99, 115], "179": [75, 116], "17e": 65, "18": [28, 51, 59, 63, 85, 90, 99, 122], "180": [64, 109, 116], "1800": 64, "18075561523438": 116, "181": 116, "18152415": 59, "18361572": 59, "184": 116, "18402174": 59, "188": 95, "1895": 95, "19": [60, 63, 84, 85, 93, 99, 121, 123], "19045": 75, "192": [57, 63, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 110, 115, 120], "194": 120, "19651794433594": 116, "199": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "19919018": 59, "1998": [30, 32], "19992000000000001": 70, "19e": 65, "1_ch1_resist": 115, "1_resist": 115, "1d": [31, 77, 97, 101, 124], "1db": 120, "1dbfd38": 72, "1e": [9, 15, 31, 33, 42, 59, 66, 80, 82, 85, 90, 91, 113, 117, 122, 123], "1e12": 112, "1e3": 15, "1e4": [22, 80], "1e5": [22, 71], "1e6": [15, 22, 59, 71, 83, 84], "1e7": 22, "1e8": 22, "1e9": [102, 122], "1ghz": 15, "1hz": [6, 33], "1m": 31, "1mhz": 33, "1mv": 7, "1v": [77, 113], "2": [6, 7, 8, 11, 14, 15, 19, 21, 22, 26, 28, 29, 30, 31, 32, 33, 39, 42, 45, 46, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 125], "20": [6, 15, 22, 30, 33, 39, 56, 59, 60, 66, 67, 68, 74, 75, 79, 85, 87, 88, 94, 98, 99, 102, 110, 112, 113, 122], "200": [30, 39, 47, 56, 67, 68, 74, 77, 106, 107, 113, 117, 119], "2000": [19, 32, 39, 45, 56, 60, 64, 67, 68, 124], "20000": [68, 90, 105], "200000000": 121, "2000000000": 60, "20000000000": 33, "2001": 59, "20033333": 95, "20071286": 64, "200826": 53, "200e": [90, 91, 94], "200m": 13, "200msa": [67, 68], "200mv": 31, "200na": 31, "200uw": 30, "201": 59, "201007": 76, "20107935": 59, "2011": 66, "2013": 6, "2015": 73, "2020": 38, "20201005": 76, "2021": 108, "2022": [4, 114], "2023": [33, 47, 48, 120], "203": 95, "204": 95, "2046": 32, "2048": 32, "20522653": 59, "20570": 42, "20720528": 59, "20e": [9, 80, 88, 89, 92, 95, 96], "20e9": 15, "20ma": 1, "20mw": 30, "20n": [7, 33], "20uw": 30, "20x": [67, 68], "21": [33, 48, 66, 68, 73, 79, 81, 82, 84, 85, 88, 89, 90, 91, 93, 95, 96, 98, 99, 102, 106, 119, 120, 121], "210": [6, 56, 60], "210330": 59, "210604": 108, "210923": 63, "21260": 75, "213": 96, "2142": 65, "22": [48, 55, 63, 74, 79, 83, 92, 94, 99], "220421": 89, "222": 60, "22222222": 42, "22875213623047": 116, "23": [26, 63, 73, 79, 80, 86, 88, 95, 96, 98, 99, 120], "230130": 55, "231006": 64, "23160": 121, "23523101": 59, "23681928": 59, "23766667": 95, "23860211": 59, "23946765": 59, "23e9": 102, "24": [31, 48, 73, 75, 77, 88, 99], "240": [65, 116], "240523": 75, "240827": 102, "24117547": 59, "2440": 75, "2450000000": 62, "247": 95, "24e": 65, "25": [48, 63, 73, 75, 79, 80, 81, 84, 85, 88, 93, 116, 121, 122], "250": 116, "2500": 39, "25000": 106, "2538078": 59, "25445556640625": 116, "255": [7, 55], "25529117": 59, "2554965": 64, "256": 39, "256k": 120, "2597": [28, 124, 125], "25e": 77, "26": [12, 48, 53, 60, 114], "2615": 95, "26158": 58, "2621": 75, "26346268": 65, "2675000000": 62, "2684": 108, "2684354560": 1, "2684354561": 1, "2684354562": 1, "2684354563": 1, "2684354564": 1, "2684354565": 1, "268445854": 108, "26880": 102, "27": [53, 60, 73, 89, 93, 102], "2700": 125, "273": 95, "277": 60, "28": [63, 72], "280": 116, "280000": 64, "282": 76, "284": 69, "29": [33, 48, 79, 105], "290": 69, "29000": 106, "2900000000": 62, "29117031": 53, "29144462": 65, "29300": 106, "294": [69, 75], "295": 76, "2975": 107, "2d": [31, 39, 78, 97, 101, 106, 124], "2d_measur": 75, "2e": [59, 65, 79, 80, 85, 86, 87, 90, 93, 94], "2e9": [59, 60, 102], "2f": [15, 24, 54], "2khz": 6, "2mw": 30, "2nd": 39, "2t": 13, "2uw": 30, "2v": [32, 33], "3": [1, 6, 7, 8, 9, 13, 15, 19, 21, 22, 26, 29, 30, 31, 33, 42, 48, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123], "30": [30, 33, 54, 60, 62, 63, 64, 74, 105, 107, 120, 121], "300": [69, 74, 116], "300000": 62, "3000000": 62, "300000000": 33, "3006076": 6, "300khz": 31, "3010041": 6, "3010045": 6, "303": 103, "30560302734375": 116, "30647277832031": 116, "30dbm": 120, "30it": 109, "31": [48, 66, 75, 120], "311": [124, 125], "315": 95, "31545273": 65, "31966667": 95, "3199": 62, "32": [7, 19, 20, 22, 39, 42, 50, 59, 69, 114, 121], "32768": 51, "329": 95, "33045196533203": 116, "331": [23, 69], "331259": 69, "333": 109, "33333333": 42, "3341": 47, "336": 120, "33656": 75, "33m": [83, 84], "33xx": 22, "34": [59, 63, 65, 72, 79, 80, 81, 85, 87, 89, 90, 91, 94, 98, 113, 115], "34345707": 65, "34422t": 13, "34542698": 59, "34555430": 120, "34647": 75, "349": 16, "349h": 16, "35": [33, 74], "35000": 106, "358": 95, "36": [58, 59, 62], "360": 48, "36192594": 59, "36468505859375": 116, "3654": 120, "366874": 59, "37112426757812": 116, "37142712": 65, "37145838": 59, "3758096384": 1, "3758096385": 1, "3758096386": 1, "3758096387": 1, "3758096388": 1, "3758096389": 1, "3758096390": 1, "3758096391": 1, "3758096392": 1, "3758096393": 1, "3758096394": 1, "3758096395": 1, "3758096396": 1, "3758096397": 1, "3758096398": 1, "3758096399": 1, "3758096400": 1, "3758096401": 1, "3758096402": 1, "3758096403": 1, "3758096404": 1, "3758096405": 1, "3758096406": 1, "3758096407": 1, "3758096408": 1, "3758096409": 1, "3758096410": 1, "3758096411": 1, "3758096412": 1, "3758096413": 1, "3758096414": 1, "3758096415": 1, "3758161919": 1, "37759455": 59, "37864181": 118, "37866131": 111, "384": 95, "38599278": 59, "386": 95, "38634014": 59, "39": [53, 55, 59, 60, 62, 63, 64, 66, 70, 72, 73, 74, 75, 76, 79, 80, 81, 82, 85, 87, 89, 90, 91, 94, 96, 98, 99, 102, 105, 106, 107, 108, 109, 112, 113, 114, 115, 121], "39945953": 65, "3c": 120, "3e": 42, "3e9": [60, 121], "3m": 7, "3v": [22, 120], "3v3": 31, "3vrf": 120, "4": [1, 6, 7, 8, 15, 21, 22, 29, 30, 31, 32, 33, 39, 42, 45, 48, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124], "40": [42, 112], "400": [22, 64], "4000": [22, 32, 67, 68], "400000000": 33, "4001": 122, "400e": [90, 91, 94], "401": 33, "40166667": 95, "4022264e": 114, "406": 108, "4095": 22, "4096": 39, "40ghz": 105, "40ghz_signal": 108, "40n": 7, "41": [32, 95], "411": 95, "41666667": 95, "416667": 82, "42": [48, 58, 73], "420": 62, "420131839019814": 76, "421": 62, "422": 62, "423": 62, "42344528": 65, "424": 62, "425": 62, "426": 62, "427": 62, "4274444580078": 116, "42e": 65, "43": [48, 66], "430": 75, "43194144": 120, "43772": 98, "439": 95, "44": [48, 75, 103], "442": 89, "443": 95, "44444444": 42, "44xx": 39, "45": [59, 108], "450": 64, "450000000": 62, "451": [75, 120], "45145621": 65, "4564": 108, "45e": [9, 65], "46406748": 59, "469": 95, "47": [59, 60], "4700000000": 60, "47112": 63, "47945107": 65, "47m": 84, "48": [31, 48, 59, 64], "48366667": 95, "4858472571908": 32, "48873901367188": 116, "489": 74, "49": 58, "49447507": 59, "49e": 65, "4_000_000": 112, "4e": [70, 85], "4k": [3, 10, 13, 30], "4v": [32, 33], "5": [6, 13, 22, 28, 29, 30, 31, 33, 42, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122], "50": [19, 22, 31, 33, 39, 48, 62, 64, 73, 74, 91, 102, 105, 113, 121, 123], "500": [19, 32, 39, 64, 67, 68, 74, 77], "5000": 39, "50000": [33, 91, 94], "500000000": [33, 60], "5000000000000": 112, "50000014": 65, "501": 32, "5015": [49, 124, 125], "502": 32, "5025": [79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "5030059814453": 116, "50e": [87, 92], "50k": 10, "50mk": 13, "51099999998": 66, "512": 106, "5143635": 53, "519": 115, "52": 13, "520": 45, "521": 95, "529": 121, "52it": 109, "53": 60, "5376": 89, "53866": 51, "53e": 58, "54": 114, "544e0a": 75, "5453": 106, "54618": 51, "54783630371094": 116, "54940": 64, "55": 70, "55102": [50, 121], "55125694": 116, "554": 95, "555": 58, "55555556": 42, "556": 106, "558": 106, "56": [62, 102], "560": 106, "5610": 28, "5611": 28, "56154342": 59, "562": 106, "5644": 28, "5645": 28, "5646": 28, "565": 106, "5650": 28, "5651": 28, "5652": 28, "5653": 28, "5654": [28, 73], "5670": 28, "5671": 28, "5672": 28, "5673": 28, "5673e": 28, "570": 115, "5708": 113, "571": 115, "572": 115, "573": 115, "574": 115, "57583366": 59, "576": 58, "57924": 114, "579249": 114, "5793": 115, "5798": 115, "5799": 115, "58": 55, "5820": 28, "583": 115, "584": 115, "5840": 28, "585": 115, "586": 115, "587": 115, "59": [60, 120], "598": 106, "5e": [9, 73, 79, 81, 85, 108, 113], "5e9": 73, "5g": [83, 84], "5khz": 6, "5m6": [83, 84], "5v": [13, 31, 32, 113, 120], "5w": 69, "6": [6, 15, 22, 28, 32, 33, 42, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "60": [13, 15, 28, 53, 54, 55, 105], "600": [19, 64, 107], "60000": 64, "6000000000": [60, 63, 121], "600e3": 64, "603": 95, "60915241": 59, "60e": 95, "61": [13, 65, 105], "61135864257812": 116, "6130981445312": 107, "61782836914062": 116, "62": 104, "622032281476": 76, "625": [23, 124, 125], "6251287": 70, "62992638": 59, "63": [16, 48, 69, 115], "6300000000": 121, "6336059570312": 107, "634878": 61, "6363": [28, 71], "63729": 55, "638": 120, "639": 95, "64": [7, 19, 39, 50, 59, 115, 121], "64141298542764": 32, "6430": [45, 124, 125], "64724": 55, "64745": 55, "64771": 55, "6484703": 59, "65": 115, "650": [19, 107], "65069": 55, "65246": 55, "65337": 55, "6541137695312": 107, "66": 98, "660": 61, "666": 29, "66666667": 42, "67": 59, "674560546875": 107, "675": 107, "67e": 65, "68": [59, 73], "680": 62, "685": 95, "69": 59, "6906280517578": 116, "6923781185626": 32, "695068359375": 107, "697571356918492": 76, "6e": 63, "6e9": 63, "6ghz": 15, "6v": 33, "7": [6, 42, 45, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 69, 70, 72, 74, 75, 77, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 102, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 119], "70": 59, "71": 106, "71111513": 59, "715576171875": 107, "72": [59, 106, 120], "72068274": 59, "7235186299999995": 62, "7270": [4, 124, 125], "72715481": 59, "72965240364397": 76, "73": [59, 106], "736083984375": 107, "73727416992188": 116, "737e": 13, "73e": 65, "74": [59, 107], "740": 64, "745": 107, "75": [59, 73, 91, 94], "750": 64, "75163547": 59, "756": 107, "756591796875": 107, "767": 95, "77": [59, 70, 109], "777099609375": 107, "77777778": 42, "77e": 65, "78312326": 59, "78e": 65, "79": [59, 106], "7959442138672": 116, "7975463867188": 107, "7c3ed5015dc0": 115, "7e": 63, "7e9": [15, 60, 63], "8": [1, 21, 22, 31, 32, 33, 39, 42, 51, 55, 56, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 105, 106, 107, 109, 110, 112, 113, 114, 115, 119, 120, 122], "80": [59, 122], "80017483": 59, "80081939697266": 116, "802q": [50, 121], "80363488": 59, "8043": [124, 125], "81": 59, "813": 75, "815269": 112, "815477": 112, "8163": 13, "8191": 45, "82": 60, "8255": 1, "83": [59, 106], "83102692": 59, "83857355": 119, "84": [59, 106], "84a": 13, "84d4b9528614": 115, "85": [72, 106], "85211098": 59, "85it": 109, "86": [59, 106], "86190725854": 66, "86312445": 59, "865": 115, "87013": 75, "8717498779297": 116, "87500527": 59, "88555733577478": 32, "88888889": 42, "89235284": 59, "8e": 93, "9": [36, 42, 55, 59, 61, 62, 63, 64, 65, 70, 73, 74, 75, 77, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99, 102, 105, 106, 107, 109, 112, 114, 115, 120, 121, 122], "90": [119, 123], "90000": [19, 62], "91": 106, "911": 120, "912985": 58, "91712951660156": 116, "92": 106, "9223372036854775807": 19, "9237048905165": 32, "92402692": 59, "9258": [8, 124, 125], "928": 42, "92e": 65, "93": 106, "9302662699321": 32, "93038940429688": 116, "9328": 76, "9379": 33, "93916": 55, "93938446044922": 116, "93e": 65, "94": 113, "94278538": 59, "94393629146197": 76, "95": 106, "950914": 62, "959": 115, "9600": 42, "9614": 58, "96240925": 59, "9693": 75, "96986101": 59, "97": 16, "975": 32, "976": 32, "9760": 63, "98": 95, "98620611": 59, "9866099999999998": 58, "98837280273438": 116, "99": [24, 32, 113], "9909": 75, "9949711258109": 76, "9980010e": 59, "999": 32, "9990000e": 59, "9990005e": 59, "9995000e": 59, "999935906": 64, "999e": 59, "9e": 113, "9e3": 123, "9ee": 36, "A": [1, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 57, 69, 70, 74, 75, 109, 123], "AND": [38, 68], "AS": 38, "And": [33, 102, 103, 104], "As": [28, 31, 43, 63, 77, 105, 112], "At": [56, 99, 102, 105, 112], "BE": [31, 38], "BUT": 38, "Be": [6, 32, 105, 120], "But": [6, 31], "By": [22, 31, 46, 77], "FOR": 38, "For": [1, 6, 7, 15, 19, 22, 28, 32, 39, 43, 50, 60, 63, 64, 70, 71, 73, 75, 77, 83, 84, 99, 106, 112, 115, 125], "IN": [6, 22, 33, 38, 68, 73], "If": [1, 4, 5, 6, 7, 9, 18, 19, 21, 22, 23, 25, 28, 31, 32, 33, 35, 39, 42, 43, 44, 48, 50, 51, 56, 63, 73, 74, 75, 77, 98, 102, 105, 109, 115, 120, 121, 125], "In": [6, 7, 31, 53, 57, 62, 73, 74, 77, 106, 125], "It": [6, 7, 10, 14, 19, 22, 26, 28, 30, 33, 42, 43, 50, 64, 65, 72, 75, 77, 102, 112], "NO": [24, 29, 38, 42, 46], "NOT": [31, 38], "No": [22, 31, 32, 79, 80, 81, 85, 87, 89, 90, 91, 94, 98], "Not": [1, 6, 45, 50, 59, 72, 75, 105, 106, 114], "OF": 38, "ON": [15, 22, 33, 45, 54, 63, 77, 102, 103, 104, 105, 106], "OR": [38, 77], "On": [22, 102], "One": [22, 51, 105], "Or": [51, 99, 112], "THE": 38, "TO": 38, "That": 6, "The": [1, 5, 6, 7, 8, 9, 13, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 38, 39, 42, 43, 44, 45, 46, 48, 50, 51, 54, 55, 58, 60, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 78, 95, 98, 99, 101, 102, 104, 105, 106, 108, 112, 113, 115, 116, 117, 120, 121, 123, 124, 125], "Then": [7, 74, 75, 77, 98, 105, 118, 119], "There": [31, 51, 56, 70, 74, 99, 115], "These": [16, 43, 112, 124, 125], "To": [6, 7, 30, 31, 33, 38, 39, 64, 75, 77, 98, 102, 106, 112, 115, 124], "WITH": 38, "Will": 28, "With": [8, 73, 105, 109], "_": [84, 93], "__": 71, "__call__": 115, "__func": 44, "__getattr__": 31, "__init__": [0, 2, 6, 7, 9, 10, 11, 15, 18, 21, 22, 28, 30, 31, 32, 33, 37, 39, 42, 43, 44, 45, 50, 51, 106], "_active_gr": 19, "_bdaqctrl": 1, "_channel_context": 31, "_check_error": 28, "_cmd_to_json_map": 15, "_dc_context": 31, "_delegate_group_factori": 24, "_error_messag": 28, "_f": 44, "_from_raw_value_to_valu": 115, "_init": 28, "_invalidate_api": 43, "_librari": 28, "_measur": 115, "_memory_manag": 22, "_memoryslot": 22, "_message_flush_timeout_m": 31, "_mode": 45, "_modul": [28, 71], "_nestedsequ": 44, "_parse_gr": 19, "_re": 36, "_rohdeschwarzhmc804x": 33, "_rohdeschwarzhmp": 33, "_scalartype_co": [36, 42], "_session": 28, "_set_active_gr": 19, "_set_pow": 15, "_set_statu": 15, "_simplecdata": 20, "_speiniparam": 20, "_spesetup": 20, "_step": 42, "_summary_": 16, "_supportsarrai": 44, "_thorlabs_cc": 47, "_thorlabs_l": 47, "_watchdog": 46, "_waveform_context": 31, "_waveformreferenceintern": 22, "_win32": 1, "_write_respons": 31, "a02": 66, "a_b_differenti": 109, "a_c": 73, "a_dsp": 20, "a_fun": 20, "a_input_onli": 109, "a_par": 20, "ab": 42, "abc": [7, 19], "abi": 75, "abl": [7, 77], "abort": [0, 6, 7, 28, 31, 45, 79, 85, 86, 91, 92, 93, 94], "about": [6, 7, 13, 15, 20, 31, 51, 74, 77, 125], "abov": [1, 4, 6, 30, 38, 70, 74, 75, 77, 112], "absolut": [6, 7, 29, 48, 74], "absolute_posit": 48, "abstract": [19, 43, 44, 99], "ac": [0, 6, 22, 39], "acceler": [19, 48, 64], "accept": [1, 5, 6, 7, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 32, 35, 37, 39, 42, 43, 46, 47, 50], "access": [1, 7, 26, 31, 42, 43, 63, 112, 121], "access_mod": 22, "accessd": 115, "accn": 48, "accompani": 13, "accomplish": 75, "accord": [29, 43, 106, 123], "accordingli": 56, "accumul": [22, 74, 124], "accumulation_cycle_tim": 55, "accur": 120, "acdc_coupl": 39, "achiev": 30, "acin": 6, "acquir": [22, 28, 38, 39, 71], "acquire_cnts_t": [0, 38], "acquisit": [5, 6, 28, 33, 38, 39, 42, 45, 77, 106, 124], "acquisition_mod": 55, "across": 31, "action": [7, 38], "activ": [6, 7, 14, 19, 22, 30, 33, 38, 39, 48, 51, 53, 55, 59, 63, 64, 75, 76, 89, 102, 105, 108, 124], "active_channel": [0, 39], "active_gr": [0, 19], "active_high": 22, "active_low": 22, "active_termin": 115, "actual": [5, 6, 18, 28, 31, 32, 33, 38, 42, 43, 45, 54, 64, 74, 113, 116], "actual_values_v": [0, 31, 95], "actual_voltag": [0, 31], "actuat": [0, 6, 7, 74], "actuator_nam": [0, 6], "ad": [6, 22, 31, 43, 51, 63, 112, 125], "adapt": [7, 32], "adc": 32, "add": [6, 21, 22, 32, 33, 42, 43, 44, 45, 67, 68, 75, 95, 112], "add_combiner_virtual_channel": 112, "add_compon": [67, 68, 75, 102, 110, 122], "add_correct": [0, 31], "add_correlation_measur": 112, "add_count_rate_measur": 112, "add_labelprop": [0, 38], "add_result": [59, 77, 110, 122], "addit": [6, 22, 30, 31, 42, 51, 77, 88, 125], "addition": 39, "addr": 19, "addrax": 64, "address": [0, 2, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 45, 47, 56, 57, 59, 63, 65, 69, 70, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 109, 110, 113, 120, 124], "address_mod": 22, "adjust": [6, 7, 16, 32, 33, 73, 77, 113], "adjust_parameter_valid": [0, 32], "admin": 57, "advanc": 63, "advanced_trig_en": 42, "advantech": 0, "advantech_pcie_1751": [0, 1], "advic": 30, "affect": [7, 32, 74], "afg": 124, "afg3000": [0, 124, 125], "afg3252": [0, 45, 113], "after": [4, 6, 7, 9, 15, 22, 28, 29, 30, 31, 38, 39, 44, 55, 56, 63, 73, 74, 75, 77, 102, 105, 106, 109, 116], "afterward": [6, 107], "ag": [29, 124, 125], "ag_uc8": [0, 74], "again": [22, 63, 67, 68, 69, 77], "against": 77, "aggreg": 112, "agil": [0, 21, 124, 125], "agilent_n9000a": [0, 53], "agili": 29, "ai": 1, "ai_channel": [28, 71], "ai_task": 71, "aim": 3, "aimtti": [0, 124, 125], "ain_coupl": 68, "ain_coupling_dc": 68, "ain_imped": 68, "ain_impedance_hz": 68, "alarm": 9, "alarm_st": [0, 46], "alia": [21, 28, 31, 45, 50, 72], "alias": [28, 124], "align": 32, "all": [1, 6, 7, 9, 11, 14, 15, 21, 22, 25, 26, 28, 30, 31, 32, 33, 36, 38, 42, 43, 44, 45, 48, 49, 50, 56, 59, 63, 66, 67, 68, 70, 72, 77, 87, 98, 99, 102, 105, 112, 117, 124, 125], "all_waveform": [0, 31], "alloc": [0, 21, 22, 31, 51], "allocate_trac": [0, 31, 79], "allocate_trigg": [0, 31, 93], "allocated_slot": 22, "allocatedslot": [0, 21, 22], "allocation_ref": [0, 21, 22], "allocation_st": [0, 21, 22], "allow": [6, 7, 11, 22, 30, 32, 33, 42, 43, 44, 45, 64, 77, 106, 115], "almost": 33, "along": 30, "alpha": 32, "alphabet": 8, "alreadi": [7, 22, 23, 28, 31, 42, 43, 60, 77], "also": [1, 4, 5, 6, 8, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 30, 31, 32, 33, 35, 37, 39, 42, 43, 45, 46, 47, 50, 61, 62, 63, 64, 72, 74, 77, 99, 106, 109, 112, 115, 117, 120], "altern": [5, 6, 28, 33, 38, 42, 45, 75, 77, 115], "although": [7, 11, 72], "alwai": [6, 28, 30, 31, 33, 38, 63, 75, 77, 106], "am": [15, 33, 73], "am1": 33, "am2": 33, "am_depth1": 113, "am_depth2": 113, "am_internal_efile1": 113, "am_internal_efile2": 113, "am_internal_freq1": 113, "am_internal_freq2": 113, "am_internal_function1": 113, "am_internal_function2": 113, "am_internal_source1": 113, "am_internal_source2": 113, "am_state1": 113, "am_state2": 113, "ama": 33, "amb": 33, "amc100": 0, "amc100axi": [0, 6], "ametek": [0, 109], "ametex": 4, "amod": 33, "among": 22, "amongst": 115, "amount": 110, "amp": [103, 104, 105, 120], "amper": [13, 31], "amplif": 6, "amplifi": [4, 26, 32, 33, 42, 51, 120, 123], "amplifier_modul": 26, "amplifiermodul": [0, 26], "amplitud": [0, 6, 7, 15, 22, 29, 33, 56, 60, 74, 123, 124], "amplitude_channel_1": [67, 68], "amplitude_mod_sensit": 73, "amplitudemodul": [0, 33], "an": [1, 4, 5, 6, 7, 8, 14, 15, 17, 19, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 42, 43, 44, 46, 47, 48, 50, 51, 55, 59, 61, 63, 64, 67, 68, 71, 72, 73, 74, 75, 77, 88, 93, 105, 106, 107, 109, 112, 114, 115, 116, 117, 123, 124, 125], "anal": 33, "analog": [28, 33, 71, 124], "analog_mod_typ": 73, "analyz": [2, 11, 48, 62, 124, 125], "anc": 56, "anc150": 6, "anc300": [0, 124, 125], "anc300axi": [0, 6], "anc300b": 6, "anc300sim": 0, "anc300triggerout": [0, 6], "anc350": [0, 7], "anc350_librari": 7, "anc350axi": [0, 6], "anc350lib": [0, 6], "anc350libactuatortyp": [0, 6, 7], "anc350libamplitudecontrolmod": [0, 6, 7], "anc350libdevicetyp": [0, 6, 7], "anc350liberror": [0, 6, 7], "anc350libexternaltriggermod": [0, 6, 7], "anc350libsignaledg": [0, 6, 7], "anc350libtriggerinputmod": [0, 6, 7], "anc350libtriggeroutputmod": [0, 6, 7], "anc350libtriggerpolar": [0, 6, 7], "anc350r": 7, "anc350v": 7, "anc350v2lib": 7, "anc350v3": 7, "anc350v3lib": [0, 6, 7], "anc350v3liberror": [0, 6, 7], "anc350v4": 7, "anc350v4lib": [0, 6, 7], "anc_discov": 7, "andor": [0, 124, 125], "andor_du401": [0, 5, 55], "angle_deg": 21, "angle_rad": 21, "ani": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 61, 63, 64, 66, 67, 68, 75, 77, 99, 102, 103, 104], "anm150": [6, 124], "anm150a": 6, "anm200": 6, "anm300": 6, "anoth": [7, 28, 31, 33, 39, 107], "answer": [6, 31, 32, 33], "anti": 22, "anymor": 112, "anyth": 113, "anywai": 72, "ao": 28, "ao_channel": 71, "aoff": 33, "aou_awg": [67, 68], "aou_filter_fifteen_tap": 22, "aou_filter_flat": 22, "aou_filter_off": 22, "apar": 20, "apart": 42, "aperture_": 31, "api": [0, 6, 28, 33, 37, 43, 44, 50, 51, 71, 75, 108, 112, 125], "api_obj": 44, "api_tagg": [0, 43, 44, 112], "app": 7, "appdata": 115, "appear": [22, 31, 48, 74, 102], "append": [0, 31, 36, 53, 55, 59, 63, 64, 66, 67, 68, 75, 76, 85, 89, 102, 108], "appli": [1, 5, 6, 7, 8, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 32, 33, 35, 37, 39, 42, 43, 46, 47, 50, 54, 63, 70, 112], "applic": 7, "approach": [6, 7, 75], "appropri": [6, 28, 73], "approxim": [42, 77], "apt": [0, 47, 116, 118, 119], "apt_clean_up": [0, 47, 48, 116, 118, 119], "apt_init": [0, 47, 48], "ar": [1, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 19, 21, 22, 24, 25, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 50, 51, 56, 60, 62, 63, 64, 70, 72, 74, 75, 77, 98, 99, 102, 105, 106, 109, 112, 113, 115, 121, 124, 125], "arang": [83, 84, 87, 113], "arb": 33, "arbitrari": [22, 31, 45, 51, 67, 68, 97, 101, 124, 125], "arbitrary_wav": [0, 31, 79], "architectur": 108, "arg": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 115], "arg_count": 115, "argtyp": [0, 28], "argument": [6, 13, 22, 28, 31, 38, 43, 44, 45, 63, 112, 117], "aris": 38, "arm": [0, 14, 39, 45], "arm_count": 66, "arm_sourc": 66, "around": [6, 7, 11, 28, 31, 116], "arrai": [22, 28, 31, 32, 39, 42, 44, 45, 51, 59, 62, 87, 99, 106, 110, 112, 114], "arrang": [0, 31, 82, 83, 84, 88, 89, 93, 95, 98, 100, 101, 124], "arrangement_context": [0, 31], "array_arrangement_context": [0, 31], "array_lik": 44, "arraylikevalid": [0, 43, 44], "arrayparamet": [11, 28, 33], "arw": 7, "asap": 75, "asc": 59, "ascii": 62, "ascii_tim": 62, "ask": [0, 4, 6, 13, 15, 24, 29, 30, 31, 32, 33, 42, 46, 75, 102, 105, 115], "ask_channel": [0, 29, 31], "ask_modul": [0, 42], "ask_raw": [0, 4, 6, 15, 24, 46, 109], "asrl": [15, 17, 32, 98, 99, 124], "asrl16": 61, "asrl2": 77, "asrl3": [29, 54, 60, 74], "asrl4": [30, 65, 104], "asrl7": 56, "assert": [42, 43], "assign": [9, 22, 31, 33, 50, 72, 77, 93], "assing": 77, "associ": [28, 38, 50], "assum": [26, 31, 113], "asynchron": [0, 21, 22, 48, 75, 124], "asynchronosli": 56, "atmcd64": 5, "atmcd64d": [0, 5], "attach": [6, 9, 18, 21, 22, 31, 42], "atten_valu": [0, 37], "attent": [6, 59], "attenu": [0, 16, 21, 33, 50, 62, 77, 124, 125], "attocub": [0, 124, 125], "attocubeamc100": [0, 6], "attr": 28, "attribut": [6, 18, 25, 28, 31, 33, 44, 50, 51, 77, 106], "attributeid": 28, "attributewrapp": [0, 28], "author": [6, 7, 14, 15, 27, 33, 38, 42, 47, 48], "auto": [0, 7, 22, 33, 36, 38, 42, 53, 55, 59, 63, 64, 75, 76, 82, 89, 102, 108, 113], "auto_cali_bias_curr": [0, 38], "auto_cali_finish": [0, 38], "auto_dis": 7, "auto_gain": 106, "auto_pwr_dis": [0, 37], "auto_sav": 99, "auto_trigg": [67, 68], "automat": [1, 5, 6, 7, 28, 29, 31, 33, 36, 38, 42, 43, 45, 50, 106, 108, 112, 122], "autosav": [100, 101, 124], "autoscal": 122, "autotrig": [67, 68], "autozero": 66, "aux": [42, 106], "aux1": [42, 106], "aux2": [42, 106], "aux_in1": 106, "aux_in2": 106, "aux_out1": 106, "aux_out2": 106, "auxiliari": 123, "auxout": [51, 123], "auxouts1": 123, "avail": [1, 6, 7, 15, 21, 22, 28, 31, 32, 33, 43, 45, 48, 49, 50, 56, 59, 63, 72, 73, 89, 105, 106, 114], "available_a": [0, 31, 89], "averag": [11, 28, 30, 31, 33, 39, 45, 59, 71, 122], "averages_en": 59, "averages_trigger_en": 59, "avg": 122, "aviosi": [0, 124, 125], "aviosys_ip_power_9258": [0, 8, 57], "aviosysippower9258": [0, 8], "avlu": 42, "avoid": [6, 30, 77, 106], "awg": [21, 22, 31, 45, 51, 73, 79, 87, 124, 125], "awg1": [21, 22, 67, 68], "awg2": [22, 67, 68, 79], "awg3": 22, "awg520": [0, 125], "awg_config_external_trigg": [0, 21, 22, 67, 68], "awg_context": [0, 31], "awg_flush": [0, 21, 22], "awg_from_arrai": [0, 21, 22], "awg_from_fil": [0, 21, 22], "awg_is_run": [0, 21, 22], "awg_jump_next_waveform": [0, 21, 22], "awg_mask": 22, "awg_nam": [0, 21, 22], "awg_numb": [22, 51], "awg_paus": [0, 21, 22], "awg_pause_multipl": [0, 21, 22], "awg_queue_config": [0, 21, 22, 67, 68], "awg_queue_waveform": [0, 21, 22, 67, 68], "awg_resum": [0, 21, 22], "awg_resume_multipl": [0, 21, 22], "awg_start": [0, 21, 22], "awg_start_multipl": [0, 21, 22, 67, 68], "awg_stop": [0, 21, 22], "awg_stop_multipl": [0, 21, 22], "awg_trigg": [0, 21, 22], "awg_trigger_multipl": [0, 21, 22], "ax": [6, 7, 29, 59, 62, 74, 75, 83, 84, 89, 102, 106, 110, 122], "axessubplot": [62, 109], "axi": [5, 6, 7, 29, 74, 106, 113, 124], "axis1": [56, 74], "axis2": 74, "axis7": 56, "axis_1": [0, 6], "axis_2": [0, 6], "axis_3": [0, 6], "axis_no": 7, "b": [7, 8, 13, 26, 33, 38, 42, 57, 66, 69, 109], "b10": 33, "b120": [33, 105], "b13t": [33, 105], "b22": [33, 105], "b9": 33, "b9600": 42, "b_input_onli": 109, "ba": 33, "bacaus": 77, "back": [6, 7, 30, 31, 74, 75, 77, 89, 95, 96, 102], "backend": [6, 18, 33], "background": [22, 61], "backlash": [19, 64], "backward": [6, 7, 31, 32, 33], "band": [16, 33], "band_pass_filt": 59, "bandwidth": [0, 33, 62, 122], "bandwith": 62, "bar": 30, "barrier": [14, 27, 33, 42, 47, 48], "base": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 59, 73, 109, 124], "baseband": 33, "basechannel": 51, "bash": 30, "basi": 125, "basic": [26, 28, 32, 78, 101, 124], "baud": [17, 19, 42], "baud_rat": [17, 19], "baudrat": 64, "bbd10x": [0, 47, 48], "bdaqctrl": 1, "bdc101": [0, 47, 48], "be2142b": 65, "becaus": [1, 6, 15, 22, 75, 98, 112], "becom": [6, 7, 30], "been": [4, 5, 6, 7, 13, 15, 22, 31, 35, 37, 39, 48, 53, 55, 59, 60, 63, 64, 75, 76, 77, 89, 102, 108, 109, 125], "beep": 99, "befor": [1, 6, 7, 11, 15, 22, 30, 31, 39, 42, 44, 45, 63, 64, 74, 77, 102, 106, 112, 116], "begin": [22, 31], "begin_tim": 31, "behav": [6, 112], "behavior": [22, 77], "behaviour": [5, 22, 35, 48, 75], "being": [5, 13, 22, 63], "belong": [6, 22, 28, 31], "below": [6, 9, 13, 19, 30, 33, 72, 73, 75, 77, 102, 106, 113, 124, 125], "ben": 70, "besid": 6, "best": 125, "beta": [14, 21, 22, 27, 33, 42, 45, 47], "between": [6, 7, 9, 13, 16, 22, 28, 30, 31, 33, 42, 43, 45, 51, 74, 75, 78, 83, 84, 88, 95, 101, 124], "bf": 58, "bf_fridg": 58, "bi": 32, "bia": [33, 38, 110], "bias_curr": 110, "bilt": [0, 124, 125], "bin": [28, 55], "binari": [1, 19, 22, 30, 31, 64], "bind_to_instru": 24, "binwidth": [43, 112], "biodaq": 1, "bip": 32, "bit": [1, 7, 16, 19, 20, 22, 32, 36, 42, 48, 50, 121], "bitlevel0": 39, "bitlevel1": 39, "bitmap": 36, "bitmask": 22, "blaze": 107, "blink": 99, "blob": [15, 28], "block": [6, 9, 22, 23, 32, 39, 48, 60, 70, 98, 116], "blockavg_hardware_trigger_acquisit": [0, 39], "blue": 51, "blue_lagoon": 58, "bluefor": [0, 3, 124, 125], "bmp": 36, "bmpdata": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "bnc": [6, 77, 99], "board": [64, 77], "bodi": 40, "boff": 33, "bool": [5, 6, 7, 9, 19, 22, 23, 24, 25, 28, 30, 31, 32, 35, 39, 42, 43, 44, 45, 46, 48, 50, 51, 75], "bool_to_str": [0, 45], "boolean": [22, 45], "bootload": 73, "both": [7, 13, 22, 26, 28, 30, 33, 39, 45, 51, 69, 88, 117], "bottom": [4, 32], "bound": [11, 45], "boundari": 14, "boxcar": 39, "boxcar_averag": 39, "brace": 33, "break": [42, 68, 99], "breakout": [0, 31, 98, 99], "broadli": 14, "brush": 47, "bsc001": [0, 47, 48], "bsc002": [0, 47, 48], "bsc101": [0, 47, 48], "bu": [31, 59, 82, 102], "bu2": [5, 124, 125], "buffer": [1, 4, 15, 39, 42, 109, 120, 124, 125], "buffer_acq_mod": 106, "buffer_amplifiers_en": 120, "buffer_npt": 106, "buffer_paus": 106, "buffer_point": [0, 37], "buffer_reset": 106, "buffer_sr": 106, "buffer_start": 106, "buffer_trig_mod": 106, "build": [5, 120], "built": [33, 74], "burst": 113, "burst_count": 42, "burst_delai": 42, "burst_mod": 42, "burst_mode1": 113, "burst_mode2": 113, "burst_ncycles1": 113, "burst_ncycles2": 113, "burst_period": 42, "burst_state1": 113, "burst_state2": 113, "burst_t0_config": 42, "burst_tdelay1": 113, "burst_tdelay2": 113, "busi": 1, "button": 42, "bw10": 33, "bwl": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "bychang": 6, "byte": [28, 32, 36, 42, 44, 45, 62], "byte_to_bit": [0, 42], "bytes_tim": 62, "c": [1, 6, 7, 8, 9, 14, 28, 30, 36, 37, 38, 42, 53, 55, 57, 59, 60, 62, 63, 64, 67, 68, 75, 76, 102, 106, 108, 109, 115, 120, 121], "c010219": 113, "c28": 66, "c_int": 20, "c_long": 28, "c_str": [0, 28], "c_ulong": 28, "c_void_p": 7, "cabl": [31, 102], "cach": [43, 44, 77, 112], "cached_api_object": [0, 43, 44], "calc": 39, "calcul": [31, 33, 62], "calculationmod": 33, "calibr": [0, 13, 24, 31, 33, 38, 42, 120, 122, 124], "calibration_fil": 33, "call": [1, 4, 5, 6, 7, 13, 18, 22, 24, 28, 29, 30, 31, 32, 33, 38, 42, 45, 46, 48, 64, 77, 112, 115], "callabl": [22, 28, 38, 44, 50], "caller": [6, 33], "camera_handl": 5, "camera_id": 5, "camera_index": 5, "can": [1, 6, 7, 8, 10, 11, 15, 19, 21, 22, 25, 28, 30, 31, 32, 33, 39, 42, 44, 48, 51, 54, 59, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 98, 99, 102, 103, 104, 105, 106, 112, 115, 116, 118, 119, 121, 124, 125], "cannot": [1, 6, 22, 28, 45, 72, 98, 105, 120], "cap": [6, 83, 84], "capabl": 44, "capacit": [0, 6, 7], "captur": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 124], "capture_dur": 112, "captured_run_id": 122, "card": [1, 9, 21, 22, 39, 45, 124], "cardid": 39, "care": [6, 15, 43], "careful": 32, "carri": 31, "carrier": 73, "cartesian": 75, "case": [7, 22, 30, 38, 51, 62, 74, 102, 103, 104, 115], "caus": [28, 39, 42, 77], "caviti": 14, "cbax": [59, 110], "cc": [0, 47], "ccd": [5, 35, 107], "ccd_number_pixel": 35, "ccd_pixel_width": 35, "cd": 42, "cea": 4, "cell": [62, 73, 102], "celsiu": 108, "cent": 33, "center": [33, 59, 75, 102, 106, 109, 122, 124], "center_freq": [62, 122], "center_freq1": 113, "center_freq2": 113, "central": 107, "cernox": 30, "certain": [6, 23, 25, 31, 44, 48, 60, 77, 124], "cesr": 42, "cffi": 1, "cfm": [47, 117], "ch": [22, 31, 67, 68, 72, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 121], "ch01": 77, "ch02": [77, 79, 80], "ch03": [77, 79, 80, 81, 85, 86, 90, 91, 92, 94], "ch04": 65, "ch1": [18, 28, 42, 45, 63, 72, 102, 103, 104, 106, 113, 115, 121], "ch1_datatrac": 106, "ch1_displai": 106, "ch2": [18, 42, 45, 63, 72, 102, 103, 104, 106, 121], "ch2_datatrac": 106, "ch2_displai": 106, "ch3": 72, "ch4": 72, "ch5": 72, "ch6": [28, 72], "chain": [97, 101, 124], "chamber": [10, 30], "chan": [9, 21, 31], "chan1": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "chan2": [79, 80, 88, 93, 95], "chan3": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 94, 95], "chan4": [79, 85, 88, 90, 94, 95], "chan_num": [9, 65], "chan_to_": [0, 9], "chan_to_id": [0, 9], "chanel": 28, "chang": [6, 16, 18, 23, 28, 30, 31, 32, 33, 42, 43, 56, 62, 63, 66, 68, 70, 71, 74, 78, 101, 102, 105, 109, 124, 125], "change_autozero": 45, "change_displai": 45, "change_fold": [0, 45], "channel": [0, 1, 6, 8, 9, 10, 11, 15, 18, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 42, 43, 44, 45, 48, 50, 51, 52, 58, 63, 64, 65, 67, 68, 69, 71, 74, 75, 78, 81, 82, 83, 84, 87, 88, 89, 93, 95, 96, 97, 101, 103, 104, 106, 113, 115, 123, 124, 125], "channel1": 110, "channel2": [39, 110], "channel3": 110, "channel4": 110, "channel_0": 39, "channel_1": 39, "channel_4k_pl": [10, 58], "channel_50k_pl": [10, 58], "channel_compressor_inlet": [10, 58], "channel_compressor_outlet": [10, 58], "channel_delai": 42, "channel_id": [0, 8], "channel_index": 39, "channel_list": 31, "channel_list_to_st": [0, 31], "channel_magnet": [10, 58], "channel_map": [0, 42], "channel_mask": 22, "channel_mixing_chamb": [10, 58], "channel_mixture_tank": [10, 58], "channel_nam": [0, 8, 50, 63, 121], "channel_numb": [0, 22, 29, 31, 36, 50, 51, 121], "channel_output_level": 42, "channel_output_polar": 42, "channel_pumping_lin": [10, 58], "channel_stil": [10, 58], "channel_vacuum_can": [10, 58], "channel_venting_lin": [10, 58], "channelarrai": [0, 38], "channelinputconfig": 68, "channelis": 31, "channellist": [28, 31, 43, 64, 112], "channelprescalerconfig": 68, "channeltrac": [0, 42], "channum": 31, "char": 31, "charact": [2, 4, 11, 21, 45], "characterist": 33, "charg": 38, "chassi": [6, 21, 22, 67, 68], "check": [0, 1, 6, 7, 14, 28, 30, 38, 42, 44, 45, 48, 56, 63, 72, 75, 102, 117, 124], "check_error": [0, 6, 7, 38, 68], "check_module_error": [0, 42], "check_tun": [0, 14], "checkout": 125, "chiller": 46, "chip": [13, 14], "chnum": 33, "choos": [15, 32, 45, 60, 109], "circumv": 89, "cl": 44, "claim": 38, "class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 77, 102, 105, 106, 112, 116], "classmethod": [7, 19, 44, 50], "clean": [48, 124], "clear": [0, 6, 7, 9, 15, 31, 33, 42, 43, 44, 45, 61, 68, 106, 112], "clear_alarm": [0, 9], "clear_measur": [0, 31, 89, 96], "clear_read_buff": [0, 15], "clear_read_queu": [0, 31], "clear_waveform": [0, 45], "clear_zero_offset": [0, 17, 61], "cli": 19, "click": [43, 112], "client": 19, "client64": 20, "clip": [51, 77], "clk": 22, "clk10": 22, "clkref": 22, "clksy": 22, "clksync": 22, "clo": 98, "clock": [7, 22, 28, 31, 45, 73, 93, 120], "clock_config": 22, "clock_frequ": 108, "clock_refer": 108, "clock_sourc": 73, "clock_src": 28, "clone": 125, "close": [0, 1, 5, 6, 7, 19, 21, 22, 28, 30, 31, 33, 35, 38, 39, 43, 50, 56, 64, 66, 67, 68, 72, 75, 77, 98, 99, 105, 110, 112, 113, 116, 117, 124], "close_al": [60, 66, 102, 117, 121], "close_all_registered_instru": [67, 68], "close_relai": [0, 31, 99], "close_soft": [0, 21, 22], "close_switch": [0, 30], "closed_relai": 99, "closing_tim": 5, "cmap": 89, "cmd": [4, 6, 11, 15, 24, 29, 30, 31, 33, 42, 46], "cmdbuffreespac": [0, 41], "cmddef": [0, 6, 33], "cmdl": 9, "cmt": 59, "cmtintpars": [0, 11], "cmts5048": [11, 125], "cmts5048trace": [0, 11], "cnt": 68, "cnts_buffer": 38, "co": 73, "coars": [0, 6, 7], "code": [0, 5, 6, 7, 13, 19, 22, 29, 33, 35, 39, 41, 48, 102, 115, 117], "coefficientofangl": 64, "coefficientoflinear": 64, "coeffum": 64, "coher": 42, "coil": [13, 23, 70], "coil_const": [13, 23, 70], "coil_constant_unit": 70, "coincid": [43, 112], "coincidence_virtual_channel": 112, "coincidencevirtualchannel": [0, 43, 112], "cold": 30, "cold_plate_temperatur": 75, "collect": [7, 22, 31, 39, 44], "colloqui": 18, "colon": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 32, 35, 37, 39, 42, 43, 46, 47, 50], "color": [83, 84], "colorbar": [62, 75, 83, 84, 89, 106], "colormesh": 62, "column": 75, "com": [13, 14, 15, 16, 27, 28, 33, 39, 42, 47, 48, 59, 60, 72, 98, 108, 117, 124], "com3": [29, 74], "combin": [6, 31, 33, 43, 51, 66, 77], "combine1": 113, "combine2": 113, "combiner_virtual_channel": 112, "combinervirtualchannel": [0, 43, 112], "combo": 22, "come": [6, 50, 121], "comm": 98, "comma": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 31, 32, 35, 37, 39, 42, 43, 46, 47, 50], "comma_sequence_to_list": [0, 31], "comma_sequence_to_list_of_float": [0, 31], "command": [1, 4, 6, 7, 13, 15, 20, 21, 24, 29, 30, 31, 32, 33, 38, 39, 42, 45, 46, 48, 49, 56, 60, 74, 77, 98, 99, 102, 109, 115, 116], "command_delai": [0, 29], "command_histori": [53, 55, 59, 63, 64, 75, 76, 89, 102, 108], "command_mov": [0, 41], "commandinterfac": 6, "comment": [1, 6, 33], "commmand": 4, "common": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 32, 33, 35, 37, 39, 42, 43, 44, 45, 46, 47, 50, 72], "common_trigger_in": [0, 31, 93], "commonli": [21, 33, 45, 49], "commun": [6, 9, 15, 16, 19, 21, 24, 29, 32, 33, 38, 42, 45, 46, 50, 74, 75, 124, 125], "communicationhandl": [0, 38], "compat": [7, 25, 31, 32, 33, 44, 63, 73], "compatibil": [6, 45], "compens": 39, "compil": [36, 51], "compilererror": [0, 51], "complain": 77, "complet": [1, 6, 7, 22, 33, 39, 45, 64, 74, 102, 105], "completetimestatist": [0, 45], "complex": [44, 122], "complex_voltag": 106, "complexsweep": [0, 33], "compliant": [13, 49], "compon": [7, 22, 30, 33, 123], "comport": 64, "compos": 22, "compress_channel_list": [0, 31], "compressor": 10, "compris": 123, "comput": [37, 42, 51, 62, 98, 108], "comun": 33, "con": 12, "concaten": [31, 67, 68, 106], "concern": [33, 39, 43], "conclud": 63, "concret": 28, "concurr": [21, 22], "conda": 60, "condit": [1, 38, 45, 77], "conduct": 63, "conenct": 68, "config": [24, 59, 64, 75, 109], "config_amplitude_modul": [0, 21, 22], "config_angle_modul": [0, 21, 22], "config_clock_io": [0, 21, 22], "config_fil": [19, 64], "config_fpga_trigg": [0, 21, 22], "config_trigger_io": [0, 21, 22], "configur": [1, 7, 15, 19, 22, 26, 28, 31, 33, 39, 42, 44, 60, 72, 105, 113, 124], "configure_a_quad_b_in": [0, 6, 7], "configure_a_quad_b_out": [0, 6, 7], "configure_duty_cycl": [0, 6, 7], "configure_ext_trigg": [0, 6, 7], "configure_nsl_trigg": [0, 6, 7], "configure_nsl_trigger_axi": [0, 6, 7], "configure_rng_trigg": [0, 6, 7], "configure_rng_trigger_ep": [0, 6, 7], "configure_rng_trigger_pol": [0, 6, 7], "confirm": [15, 60, 61], "conflict": 1, "connect": [0, 6, 7, 15, 16, 17, 18, 26, 27, 28, 30, 31, 32, 33, 35, 37, 38, 42, 43, 47, 48, 51, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 116, 118, 119, 121, 124, 125], "connect_external_trigg": [0, 31, 93], "connect_messag": [0, 31], "connect_to": [0, 28, 72], "connector": [15, 16, 22, 73], "conrol": 77, "consecut": [22, 31], "consequ": 30, "consid": [6, 7, 24], "consist": [32, 77, 125], "consol": [6, 39, 47], "constant": [6, 13, 28, 32, 42, 47, 51, 54, 70, 73, 77, 97, 101, 106, 124], "construct": 106, "constructor": [5, 6, 28, 32, 33, 38, 42, 45, 105, 120], "cont": [82, 87], "cont_meas_off": 122, "cont_meas_on": 122, "contact": [31, 82, 83, 84, 88, 89, 93, 95], "contact_nam": [0, 31, 83, 84], "contact_to_voltag": 31, "contacts_to_voltag": 31, "contain": [1, 2, 5, 6, 7, 8, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 42, 43, 45, 46, 47, 48, 49, 50, 51, 64, 114, 123, 125], "contant": 23, "context": [24, 29, 31, 44, 46], "contin": [6, 7, 11, 45], "continu": [6, 7, 22, 31, 42, 48, 73, 75, 77, 102, 113], "contract": 38, "control": [0, 6, 7, 8, 12, 13, 21, 24, 25, 29, 30, 31, 32, 43, 45, 47, 51, 52, 59, 64, 78, 84, 93, 101, 109, 112, 124, 125], "control_port": 38, "controller_address": 25, "conveni": [15, 28, 43, 99, 112], "convent": 125, "convers": [9, 30, 44, 45, 75, 115, 124], "conversion_tim": 30, "convert": [28, 30, 39, 42, 45, 70], "convert_prescaler_to_sample_r": [0, 21, 22], "convert_sample_rate_to_prescal": [0, 21, 22], "convert_to_voltag": [0, 39], "converter_path": 30, "convin": 106, "cooler": 55, "cooler_off": [0, 5], "cooler_on": [0, 5], "coord": 30, "coordin": [62, 75], "coordinate_system": 75, "copi": [22, 32, 38, 45], "copper": 11, "coppermountain": [0, 124, 125], "coppermountaintech": 59, "copyright": 38, "core": [37, 124, 125], "correct": [6, 13, 31, 32, 38, 70, 75, 95, 105, 109, 120], "correction_matrix": [0, 31], "correctli": [15, 60, 75, 102], "correl": 112, "correlation_measur": 112, "correlationmeasur": [0, 43, 112], "correspond": [13, 19, 31, 32, 42, 43, 45, 50, 51, 74, 106, 112], "cosmic": 55, "cost": [22, 32], "could": [43, 62], "couldn": 7, "coun": [82, 87], "count": [1, 11, 31, 38, 55, 74, 110, 112], "count_rat": 112, "count_rate_measur": 112, "counter": [1, 29, 38, 45, 68, 74, 110, 114], "counter_axi": 114, "counter_measur": 112, "countermeasur": [0, 43, 112], "counterpart": 43, "countrat": 112, "countratemeasur": [0, 43, 112], "counts_port": 38, "coup": 33, "coupl": [0, 22, 33, 39], "coupling_mod": [0, 33], "covers": 39, "cr": 120, "cre": 33, "creat": [4, 6, 7, 15, 20, 22, 29, 30, 31, 32, 38, 50, 51, 56, 59, 67, 68, 75, 103, 104, 106, 109, 115, 116, 117], "create_on_off_val_map": 46, "create_parameters_from_node_tre": [0, 51], "create_sawtooth": [67, 68], "create_sin": [67, 68], "createsp": [0, 19, 20], "crest": 33, "crest_factor": [0, 33], "critic": 75, "crs_aux_pll_ld": [0, 37], "crs_pll_ld": [0, 37], "crs_ref_pll_ld": [0, 37], "crucial": 106, "cryo": 12, "cryocon": 0, "cryocon_26": 0, "cryogen": 0, "cryogenicsms120c": 0, "cryostat": [0, 75], "cs580": 0, "cstopb": 42, "csv": [30, 51], "ctime": 77, "ctl": 74, "ctype": [20, 28], "cu": [15, 99], "cube": 47, "curposit": [0, 41], "curr": [66, 115], "current": [0, 1, 6, 7, 10, 13, 14, 15, 19, 22, 24, 26, 29, 30, 31, 32, 33, 38, 42, 45, 48, 50, 51, 53, 54, 55, 56, 59, 60, 61, 63, 64, 66, 71, 74, 75, 76, 78, 89, 96, 101, 102, 103, 104, 105, 108, 109, 110, 112, 115, 116, 117, 121, 124], "current_chang": 31, "current_dc": 115, "current_in_ua": 38, "current_limit": 70, "current_max": 14, "current_mode_off": 109, "current_mode_on_high_bw": 109, "current_mode_on_low_bw": 109, "current_out": 54, "current_r": 13, "current_ramp_limit": 13, "current_ramp_r": 70, "current_rang": 31, "current_rate_limit": 70, "current_set": 54, "currents_a": [0, 31], "curspe": [0, 41], "curt": [0, 41], "custom": [11, 25, 28, 31, 44], "customis": 31, "cw": [11, 14, 33, 113], "cxa": 2, "cycl": [7, 22, 31, 33], "cycle_tim": 5, "cycles_remain": [0, 31], "cyclic": [22, 67, 68], "cylinder": 75, "d": [8, 42, 57, 75], "d2xx": 13, "d4": 0, "d5": 32, "d5a": 0, "d5a_modul": 32, "d5mux": 32, "d_bdaq_c_interfac": 1, "dac": [32, 65, 71, 87, 102], "dac_delai": 32, "dac_quata": [0, 32], "dac_step": 32, "dacn": 32, "dacnam": 32, "dacx": 32, "dai": [0, 10, 37, 62], "damag": 38, "daq": [0, 22, 124, 125], "daq_0": 22, "daq_1": 22, "daq_ai": [28, 71], "daq_ao": [28, 71], "daq_do": 28, "daq_flush": [0, 21, 22], "daq_flush_multipl": [0, 21, 22], "daq_mask": 22, "daq_read": [0, 21, 22], "daq_start": [0, 21, 22], "daq_start_multipl": [0, 21, 22], "daq_stop": [0, 21, 22], "daq_stop_multipl": [0, 21, 22], "daq_trigg": [0, 21, 22], "daq_trigger_multipl": [0, 21, 22], "daqanaloginput": [0, 28, 124], "daqanaloginputvoltag": [0, 28], "daqanalogoutput": [0, 28, 124], "daqanalogoutputvoltag": [0, 28], "daqconfig": 68, "daqcounterread": 68, "daqdigitaloutput": [0, 28], "daqdigitaloutputst": [0, 28], "daqdigitaltriggerconfig": 68, "daqflush": 68, "daqnavi": 1, "daqnaviexcept": [0, 1], "daqnaviwarn": [0, 1], "daqread": 68, "daqstartmultipl": 68, "daqstop": 68, "dark": 38, "dark_count": 38, "data": [1, 5, 6, 7, 11, 13, 19, 22, 28, 31, 32, 33, 36, 38, 39, 42, 45, 51, 62, 67, 71, 75, 77, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 102, 106, 112, 113, 122, 124], "data_norm": 112, "data_raw": 22, "data_s": 22, "data_transfer_format": 59, "databas": [59, 102, 109], "datapoint": [45, 68], "datasav": [59, 77, 110, 122], "dataset": [59, 62, 75, 77, 96, 102, 106, 109, 110, 122], "datasheet": 33, "datatyp": 28, "date": [15, 60, 122], "datetim": 122, "daylight": 14, "daylightsolut": 0, "db": [11, 21, 33, 62, 75, 102, 106, 120, 121, 124, 125], "db0": 33, "db2": 33, "db3": 33, "db4": 33, "db6": 33, "db8": 33, "db_file_path": 102, "dbg": 105, "dbm": [2, 15, 32, 33, 53, 59, 60, 62, 63, 73, 102, 106, 108, 122], "dbm2": 33, "dbm3": 33, "dbm4": 33, "dc": [0, 6, 7, 19, 21, 22, 31, 33, 39, 42, 45, 47, 54, 64, 65, 66, 71, 77, 81, 82, 87, 115], "dc_constant_v": [81, 89, 96], "dc_list": [0, 31, 80, 85], "dc_list_2": 80, "dc_list_3": 80, "dc_sweep": [0, 31, 92], "dc_val_map": [19, 64], "dcc001": [0, 47, 48], "dcchannel": [0, 19], "dcin": 6, "ddl": 1, "de": [6, 7, 33], "deactiv": [7, 32, 33, 48, 51], "deal": [38, 51], "dealloc": 31, "debug": [15, 67, 68, 75, 97, 100, 101, 124], "debug_messages_en": [0, 15, 60], "dec": [30, 124], "decim": [7, 75], "declar": 1, "decor": [22, 43, 44], "decoractor": 22, "decreas": 62, "decrement": 42, "decrement_sensit": [0, 42, 106], "decs_visa": 75, "dedic": [31, 99], "def": [67, 68, 75, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 106], "default": [2, 4, 5, 6, 7, 9, 11, 13, 14, 15, 16, 19, 22, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 42, 45, 47, 48, 51, 55, 70, 72, 77, 99, 108, 110], "default_current_ramp_limit": [0, 13], "default_max_current_ramp_limit": [0, 13], "default_path_to_dl": [0, 6, 7], "default_timeout": [0, 29], "defin": [4, 6, 7, 20, 22, 24, 28, 29, 31, 32, 33, 42, 45, 46, 59, 63, 77, 113], "definit": [31, 77, 124, 125], "deg": [48, 63, 106, 109, 116], "deg_to_rad": [0, 21], "degre": [6, 7, 22, 42, 48, 63, 64, 109, 113, 123], "del": 33, "delai": [0, 9, 13, 22, 31, 32, 33, 42, 43, 67, 68, 74, 77, 102, 122], "delay1": 96, "delay_": [31, 96], "delay_in": 68, "delaym": 64, "delegateparamet": 24, "delet": [20, 22, 31], "delete_all_waveforms_from_list": [0, 45], "deletesp": [0, 19, 20], "demod": [51, 123], "demod1": 123, "demodul": [51, 123], "demonstr": [67, 68, 77], "densiti": [2, 53, 107], "depend": [2, 6, 7, 22, 31, 33, 42, 45, 74, 75, 77, 113, 125], "dept": 33, "depth": [0, 15, 33], "deriv": [21, 22], "describ": [29, 31, 62, 75, 84, 93], "descript": 47, "descriptor": [32, 44], "design": [45, 75, 112], "desir": [2, 5, 6, 7, 16, 28, 33, 35, 38, 42, 45, 47, 51, 102], "detail": [13, 28, 49, 60], "detect": [7, 15, 61, 115, 124], "detector": [38, 110], "determin": [7, 29, 33, 113], "detun": [88, 95], "dev": [15, 33, 42, 60, 72, 98, 99, 105], "dev0": 71, "dev1": 28, "dev200": 123, "dev204": 51, "dev_handl": 7, "dev_id": 120, "dev_nam": 28, "dev_no": 7, "dev_typ": 7, "develop": 125, "deviat": [0, 15, 30, 33, 105], "deviation_gain": 22, "deviation_ratio": [0, 33, 105], "devic": [1, 6, 7, 8, 9, 15, 16, 19, 21, 22, 23, 24, 28, 29, 30, 32, 33, 35, 42, 43, 44, 47, 48, 50, 51, 55, 56, 71, 72, 73, 74, 77, 99, 105, 117, 120, 121, 122, 123, 124, 125], "device_access": [0, 37], "device_enumer": 41, "device_id": [0, 35, 41, 47, 51], "device_index": 41, "device_info": [0, 24], "device_interfac": [0, 37], "device_list": 117, "device_nam": 41, "device_standbi": [0, 37], "deviceinform": [0, 41], "deviceinfot": [0, 37], "devicerfparamst": [0, 37], "devicestatust": [0, 37], "devnam": [71, 123], "dg645": 0, "di": 1, "diabl": 6, "diagnost": [15, 77], "dialog": 48, "dict": [1, 4, 5, 6, 8, 14, 15, 17, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37, 39, 42, 43, 44, 46, 47, 50, 51, 72, 121, 123], "dictionari": [6, 16, 39, 42, 51], "didn": 6, "diff": [33, 45], "diff_matrix": [0, 31], "differ": [4, 6, 9, 15, 22, 25, 30, 31, 32, 33, 44, 45, 58, 63, 73, 112, 115, 123, 124], "differenti": 33, "dig": 21, "dig_prescal": 68, "digit": [1, 16, 21, 22, 28, 33, 36, 39, 42, 45, 50, 66, 67, 71, 77, 124, 125], "dilut": 30, "dio": 1, "diod": [16, 97, 101, 124], "diodes_left": 89, "diodes_right": 89, "dip": 77, "dir": [45, 82], "direct": [6, 7, 19, 22, 29, 31, 47, 48, 74, 97, 101, 124], "directli": [15, 21, 74, 75, 106, 109, 115, 124], "directori": [5, 7, 19, 45, 47, 50, 51, 75], "disabl": [0, 6, 7, 15, 22, 23, 24, 39, 48, 51, 70, 73, 77], "disable_auto_mov": [0, 6], "disable_channel": [0, 51], "disable_hw_channel": [0, 47, 48], "disarm": [0, 14], "disc": 7, "discard": 15, "disconnect": [0, 6, 7, 19, 28, 30, 72, 99, 113, 124], "disconnect_al": [0, 28, 72], "disconnect_from": [0, 28], "disconnect_from_al": [0, 28], "discov": [0, 6, 7], "discret": 31, "disp": [42, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "dispatch": [0, 19, 20], "displai": [42, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 106, 122], "display_map": [0, 42], "distribut": [31, 38], "divid": [31, 67, 68, 87], "dll": [0, 1, 5, 6, 7, 14, 19, 28, 35, 37, 47, 48, 50, 64, 108, 116, 117, 121], "dll_dir": [19, 47, 64], "dll_get_funct": 50, "dll_path": [0, 5, 14, 28, 35, 37, 41, 47, 48, 50, 121], "dll_set_funct": 50, "dll_wrapper": 0, "dma": [1, 22], "dmm": [45, 77, 82, 88, 95, 98, 99, 102, 115], "dmm6500": [45, 124, 125], "dmm_1": 115, "dmm_v1": 102, "do": [13, 15, 28, 31, 32, 33, 38, 39, 42, 48, 59, 77, 98, 102, 112], "do0d": [62, 106], "do1d": [59, 62, 102, 106, 109], "do2d": [96, 106, 124], "do_get_frequ": [0, 33], "do_get_pow": [0, 33], "do_get_pulse_delai": [0, 33], "do_get_statu": [0, 33], "do_get_status_of_alc": [0, 33], "do_get_status_of_modul": [0, 33], "do_plot": [62, 75, 96, 102, 106, 109], "do_set_frequ": [0, 33], "do_set_pow": [0, 33], "do_set_pulse_delai": [0, 33], "do_set_statu": [0, 33], "do_set_status_of_alc": [0, 33], "do_set_status_of_modul": [0, 33], "doc": [15, 19, 32, 71, 109, 124, 125], "docstr": [6, 45, 106, 112], "document": [28, 31, 38, 42, 43, 44, 59, 64, 73, 102, 112, 115], "docx": 64, "doe": [1, 4, 5, 6, 8, 10, 13, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 31, 32, 33, 35, 37, 39, 42, 43, 45, 46, 47, 49, 50, 51, 64, 77, 87, 112, 121], "doesn": [1, 6, 7, 39, 45, 72], "don": [7, 102, 113, 123], "dond": [59, 62, 96, 102, 109], "dond_measur": 75, "done": [6, 7, 15, 28, 30, 33, 53, 60, 65, 74], "dot": 7, "doub": 33, "doubl": [7, 26, 32, 33], "double_delai": [0, 33], "double_width": [0, 33], "down": [6, 28, 30, 42, 71, 77, 120], "download": [36, 59, 112, 124], "download_device_node_tre": [0, 51], "dpi": 122, "dr": 14, "drawn": [15, 22], "drive": [6, 16, 29, 117], "driver": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123], "driver_dev": 16, "drivererror": 28, "drop": 98, "drsdaylightsolutions_mircat": [0, 14], "ds1104z": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "ds1za171812151": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "dsg3136b": [124, 125], "dsg3e244600050": 102, "dsp": 4, "dtype": [0, 28, 36, 42, 44, 68], "du401": [0, 124, 125], "du401_bu2": 55, "dual": [26, 52, 64], "dual_mts_modul": 26, "dualmtsmodul": [0, 26], "dualspdtmodul": [0, 26], "due": [75, 77], "dummi": [33, 102], "dummyinstru": 102, "dummyinstrumentwithmeasur": 102, "dump": 36, "duplic": 102, "durat": [44, 67, 68, 77, 113], "dure": [6, 28, 33, 38, 39, 45, 50, 51, 54, 77], "duti": [7, 33, 113], "duty_cycle_max": 14, "duty_cycle_perc": [31, 91, 94], "dutycycl": 64, "dwel": [33, 82, 87], "dwell": [0, 15, 33], "dwell_": [31, 80, 85, 92], "dynam": [1, 33, 43, 77, 112], "e": [1, 7, 18, 22, 28, 29, 31, 42, 43, 45, 51, 67, 68, 72, 77, 102, 106, 107, 112, 115, 123], "e36313a": [0, 21], "e36313achannel": [0, 21], "e8527d": 21, "each": [1, 6, 9, 28, 29, 31, 32, 33, 36, 42, 43, 44, 45, 48, 50, 60, 64, 74, 75, 77, 83, 84, 93, 106, 107, 112, 113, 125], "easili": [63, 70], "ebof": 33, "echo": [4, 42, 109], "eco": 33, "ed261978": [53, 76, 108], "edg": [0, 7, 22, 37, 39, 62, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "edgecolor": 122, "edit": [45, 102], "ef": 42, "eff": 22, "effect": [22, 31, 42, 43, 44, 102], "effort": 125, "eg": [13, 19, 99], "egat": 33, "eight": [26, 77], "either": [1, 5, 6, 18, 19, 22, 28, 33, 38, 42, 45, 50, 66, 77, 106, 112], "el320p": [0, 124, 125], "elapsedtimeparamet": 75, "electr": 122, "electrical_delay_auto": 122, "electron": [10, 30], "element": 48, "elev": 51, "elif": [67, 68], "elp320": 54, "els": [1, 22, 28, 50, 54, 67, 68, 115], "elyjah": 4, "em": 15, "embed": 15, "embedded_vers": [0, 15, 60], "emem": 45, "empti": [22, 31, 43, 59, 68, 72, 109, 112, 123], "empty_slot": [67, 68], "emul": 51, "en": [28, 39, 71], "enabl": [0, 6, 7, 15, 22, 23, 24, 31, 33, 39, 46, 47, 48, 51, 61, 70, 73, 77, 110, 113, 120], "enable_auto_mov": [0, 6], "enable_channel": [0, 39, 51], "enable_detector": [0, 38], "enable_event_dlg": [0, 47, 48], "enable_hw_channel": [0, 47, 48], "enable_output": 32, "enable_ref_auto_reset": [0, 6, 7], "enable_ref_auto_upd": [0, 6, 7], "enable_remot": 32, "enable_sensor": [0, 6, 7], "encod": [1, 25, 31, 44], "encount": 1, "encourag": 125, "encposit": [0, 41], "encst": [0, 41], "end": [1, 4, 7, 22, 31, 32, 33, 45, 67, 68, 89, 96, 102, 109], "end_freq": 122, "end_mark": [0, 31, 80], "end_v": [31, 88, 95], "endpoint": 79, "energi": 47, "enough": [1, 30, 67, 68, 113], "enqueu": [22, 124], "enter": [39, 115], "enter_persistent_mod": [0, 30], "entir": [15, 106], "entranc": 64, "entri": 43, "enum": [8, 24, 31, 36, 47, 48, 77], "enumer": [7, 36, 48], "enumerate_devic": [0, 41], "env": [40, 60, 62], "envelop": 33, "eot_bwd": 7, "eot_fwd": 7, "epsilon": 7, "equal": [22, 51, 106, 110], "equip": 124, "equitim": 42, "equival": [42, 51, 99, 112], "era": 60, "erainstru": [0, 60], "erasynth": [0, 124, 125], "erasynthbas": [0, 15], "erasynthplu": [0, 15, 60], "erasynthplusplu": [0, 15, 60], "err": [29, 54, 75, 87, 112], "errabort": 19, "error": [0, 1, 6, 7, 19, 22, 29, 31, 32, 33, 38, 39, 42, 48, 51, 54, 67, 68, 72, 75, 77, 79, 80, 81, 85, 87, 89, 90, 91, 94, 98, 99, 102, 106, 115], "error_callback": 38, "error_check": [0, 5, 19, 35, 41, 47, 48], "error_cod": [28, 29, 32], "error_ind": 99, "error_messag": [0, 28], "error_msg": 38, "errorcod": 1, "errormsg": [0, 1], "errorreg": 39, "errorvalu": 39, "esin": 33, "esp8266": 15, "esp8266_upload_mod": [0, 15], "especi": 125, "esr": 42, "essenti": 123, "establish": [75, 98], "estim": [31, 66], "etc": [19, 22, 31, 121], "ethernet": [7, 26, 45, 98, 99, 103], "etim": 75, "eu": [14, 27, 33, 42, 47, 48], "even": [1, 5, 6, 8, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 31, 32, 35, 37, 39, 42, 43, 44, 46, 47, 50, 77], "evenli": 32, "event": [1, 5, 22, 30, 33, 35, 38, 42, 44, 45, 48, 112], "event_dialog": 48, "eventhough": 77, "everi": [6, 7, 22, 33, 36, 42, 44, 51, 77, 102, 113, 116], "everyth": [25, 31, 44], "ex": 30, "exact": 42, "exactli": [33, 115], "examin": [0, 30], "exampl": [13, 15, 19, 21, 22, 26, 28, 29, 32, 39, 42, 51, 67, 101, 106, 114, 125], "exce": 33, "excecut": 31, "exceed": 1, "excel": 43, "except": [1, 6, 7, 11, 19, 22, 24, 28, 29, 42, 44, 45, 46, 48, 51, 63, 67, 68, 70, 72, 75, 77, 112, 115, 125], "exception": 120, "exception_typ": [0, 6], "excit": [51, 123], "exec_funct": 115, "execut": [0, 1, 20, 22, 30, 32, 33, 38, 39, 42, 45, 77, 102], "execute_befor": 44, "exist": [1, 22, 31, 32, 39, 72, 125], "exit": [31, 64], "exp": [59, 75, 102, 106, 109, 110, 113, 122], "exp_nam": 122, "expand": 99, "expand_channel_list": [0, 31, 99], "expand_setpoints_help": 110, "expect": [1, 4, 28, 31, 39, 42, 67, 68, 71, 125], "expens": 44, "experi": [6, 33, 62, 75, 106, 109, 122, 124], "experiment": [59, 62, 75, 96, 102, 106, 109], "experiment_nam": [59, 102, 106, 109, 110, 122], "expir": 102, "explan": 43, "explicit": 62, "explicitli": [31, 99], "exponenti": [9, 11], "expos": [31, 42], "exposur": 55, "exposure_tim": [5, 55], "express": [38, 64, 99], "ext": [15, 31, 33], "ext0": 39, "ext1": [33, 85], "ext2": 33, "ext4": [79, 85, 90, 94], "ext_fal": 42, "ext_front": 109, "ext_rear": 109, "ext_ref_detect": [0, 37], "ext_ref_lock_en": [0, 37], "ext_ris": 42, "ext_trigg": [67, 68], "extend": [31, 77], "extens": [36, 45, 60], "extent": 89, "extern": [7, 14, 15, 22, 31, 33, 39, 60, 67, 68, 82, 88, 93, 95, 105], "external_sourc": 22, "external_trigger_mod": 39, "externalinput": 31, "extra": [24, 29, 46], "extract": [10, 13, 30], "extrem": 31, "exttrig": [21, 22, 67, 68], "f": [7, 15, 22, 42, 62, 68, 73, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 115, 120], "f008": 30, "f1d": 0, "facecolor": 122, "fact": 106, "factor": [31, 33, 75], "factori": [11, 15, 44], "factory_reset": [0, 15], "fail": [7, 75], "failur": [67, 68], "fairli": 112, "fall": [0, 6, 7, 22, 33, 112], "fals": [5, 6, 7, 9, 15, 19, 21, 22, 25, 28, 30, 31, 32, 35, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 53, 55, 57, 59, 60, 63, 64, 65, 66, 68, 70, 73, 75, 76, 77, 79, 89, 96, 102, 108, 113, 117, 121], "farad": 7, "farzad": [62, 106], "fashion": 75, "fast": [30, 31, 33, 77, 106], "fast_axi": 106, "fast_chan": [31, 77], "fast_step": [31, 77], "fast_vend": [31, 77], "fast_vstart": [31, 77], "faster": [77, 102], "fca3000": 114, "fca3100": [0, 114], "featur": [6, 7, 28, 33], "feature_cod": 51, "feedback": [6, 7], "fetch": [38, 125], "few": [6, 7, 15, 60], "fewer": 77, "fhr": [19, 124, 125], "fhr1000": 64, "fhr_client": [0, 19], "fhr_server": [0, 19], "fhrclient": [0, 19, 20], "fhrserver": [0, 19, 20], "field": [20, 23, 28, 30, 75, 124], "field_ramp_r": [23, 70], "field_valu": 30, "fig": [68, 83, 84, 89, 110], "figsiz": 122, "figur": [55, 68, 77, 113, 122], "file": [1, 5, 7, 10, 14, 19, 22, 28, 30, 32, 33, 35, 38, 45, 48, 51, 58, 59, 67, 68, 72, 75, 108, 109], "file_nam": [7, 36], "file_path": [30, 45, 76], "filenam": [22, 45, 53, 55, 59, 63, 64, 75, 76, 89, 102, 108], "fill": [31, 42, 106], "filter": [0, 6, 22, 31, 39, 55, 81], "filter_auto": 66, "filter_median": 66, "filter_median_en": 66, "filter_mod": [22, 55], "filter_mov": 66, "filter_moving_en": 66, "filter_repeat": 66, "filter_repeat_en": 66, "filter_slop": 106, "final": [9, 28, 61, 62, 102, 103, 104], "find": [7, 30, 32, 38, 62, 98, 105, 120], "find_modul": [0, 42], "fine": [6, 32], "fine_pll_ld": [0, 37], "finish": [6, 22, 23, 29, 33, 38, 77, 116], "finit": [31, 32], "fire": [31, 77], "firmwa": 109, "firmwar": [0, 1, 4, 5, 6, 7, 8, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 30, 31, 32, 35, 37, 39, 42, 43, 46, 47, 48, 50, 51, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 119, 121], "firmware_build": [0, 5], "firmware_d": 62, "firmware_revis": [0, 37], "firmware_vers": [0, 5, 17], "first": [6, 7, 11, 22, 26, 28, 31, 33, 38, 43, 61, 63, 74, 75, 77, 102, 105, 112, 118, 119], "fisica": 122, "fit": [6, 32, 38, 66], "fix": [13, 22, 30, 33], "fixed_address": 22, "flag": [0, 5, 7, 31, 32, 33, 35, 41, 48, 51, 77], "flank": 112, "flash": [6, 7, 64, 120], "flatten": 33, "flaw": 89, "fleitmann": 33, "flexabl": 32, "flexibl": 32, "flip": [31, 118], "flipper": [47, 48, 118], "float": [2, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 36, 38, 39, 42, 43, 44, 45, 48, 50, 51, 75, 89, 109], "floats_to_comma_separated_list": [0, 31], "flow": [89, 96], "flush": [22, 31, 42], "flush_waveform": [0, 21, 22], "fm": [15, 33, 105], "fm1": [33, 105], "fm2": 33, "fm_channel": 105, "fm_deviation1": 113, "fm_deviation2": 113, "fm_internal_efile1": 113, "fm_internal_efile2": 113, "fm_internal_freq1": 113, "fm_internal_freq2": 113, "fm_internal_function1": 113, "fm_internal_function2": 113, "fm_internal_source1": 113, "fm_internal_source2": 113, "fm_state1": 113, "fm_state2": 113, "fmpm": 33, "fmpma": 33, "fmpmb": 33, "fname": 45, "focal": 64, "folder": [7, 10, 28, 45, 125], "folder_path": [10, 58], "follow": [6, 7, 13, 15, 22, 33, 38, 43, 67, 68, 102, 106, 112, 115, 116, 125], "follwo": 70, "fontsiz": 122, "fool": 77, "forc": [22, 45, 77, 98], "force_logicjump": [0, 45], "force_reload": 45, "force_trigg": [0, 45], "forcefulli": 98, "foreign": 1, "forev": 29, "forget": 33, "form": [28, 30, 33, 51, 93, 99, 122], "format": [1, 2, 13, 16, 30, 43, 54, 65, 70, 71, 115, 122], "former": [6, 43], "forschungszentrum": 7, "forth": 31, "forward": [0, 6, 7, 31, 43, 44, 47, 48], "forward_and_back": [0, 31], "found": [1, 6, 7, 15, 28, 32, 71, 75, 121, 124, 125], "foundat": 28, "four": [1, 8, 26], "fp": [0, 6, 7, 36, 40], "fpga": 22, "fr": 4, "fre": 115, "free": [1, 5, 6, 19, 22, 28, 31, 35, 38, 43, 50, 59], "free_all_trigg": [0, 31], "free_trigg": [0, 31], "freerun": [15, 60], "freq": [15, 33, 42, 56, 102, 106, 120, 122], "freq_axi": 62, "freq_concurrent1": 113, "freq_concurrent2": 113, "freq_cw1": 113, "freq_cw2": 113, "freq_manu": [0, 33], "freq_max": [0, 33], "freq_mea": 106, "freq_min": [0, 33], "freq_mode1": 113, "freq_mode2": 113, "freq_span1": 113, "freq_span2": 113, "freq_start1": 113, "freq_start2": 113, "freq_stop1": 113, "freq_stop2": 113, "frequenc": [0, 6, 7, 11, 15, 22, 31, 32, 33, 37, 42, 45, 49, 50, 56, 59, 62, 63, 102, 105, 106, 108, 109, 115, 120, 123, 124], "frequency_buff": 106, "frequency_hz": [31, 80], "frequencymodul": [0, 33], "frequencysweep": [0, 33], "frequencysweepmagphas": [0, 11, 33], "frequent": 30, "fresh": 28, "fridg": [10, 30, 54], "from": [1, 2, 4, 5, 6, 7, 9, 10, 11, 13, 15, 19, 21, 22, 26, 28, 30, 31, 32, 33, 38, 39, 42, 43, 44, 45, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 105, 106, 107, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "fron": 115, "front": [19, 22, 31, 32, 42, 64, 73, 102, 106, 115], "frontplat": 6, "frozenset": [31, 44], "fsk_freq1": 113, "fsk_freq2": 113, "fsk_internal_rate1": 113, "fsk_internal_rate2": 113, "fsk_source1": 113, "fsk_source2": 113, "fsk_state1": 113, "fsk_state2": 113, "ftdi": 13, "full": [22, 33, 55, 74, 106], "full_rang": [0, 32], "full_scal": [22, 68], "fulli": 55, "fun": 31, "functino": 28, "function": [1, 4, 6, 7, 13, 15, 18, 20, 22, 26, 28, 29, 30, 31, 32, 33, 38, 39, 43, 45, 48, 49, 50, 51, 56, 63, 67, 68, 71, 75, 77, 87, 99, 106, 109, 112, 124, 125], "function_efile1": 113, "function_efile2": 113, "function_nam": [5, 35, 41, 48], "function_ramp_symmetry1": 113, "function_ramp_symmetry2": 113, "function_shape1": 113, "function_shape2": 113, "furnish": 38, "further": [13, 28, 31, 49], "furthermor": 51, "futur": [50, 53, 55, 59, 63, 64, 74, 75, 76, 89, 102, 108], "fv": 113, "fw4": 112, "fwd": [47, 102], "fz": [6, 7, 33], "fzj": 6, "g": [22, 24, 28, 29, 31, 40, 42, 43, 45, 46, 51, 59, 63, 66, 77, 102, 109, 115, 123], "g1": [83, 84, 93], "g10k": 33, "g1k": 33, "g2": [83, 84, 93], "g3": [83, 84], "g4": [83, 84], "g5": 84, "g50": 33, "gain": [0, 6, 22, 32, 33, 77, 109], "gate": [31, 33, 81, 97, 101, 102, 124], "gated_trigger_acquisit": [0, 39], "gatewai": 15, "gca": [83, 84, 113], "gcc": 1, "ge": [89, 96], "gen_trigger_puls": [0, 33], "gener": [0, 1, 5, 6, 7, 15, 16, 21, 22, 28, 31, 32, 33, 38, 39, 42, 43, 45, 51, 71, 75, 97, 101, 102, 105, 106, 109, 112, 123, 124, 125], "generalmicrowav": 0, "generate_csv_sequence_program": [0, 51], "generatedsetpoint": [0, 42, 45], "generator_63493": 33, "generator_numb": 31, "generatro": 73, "gentec": [0, 124, 125], "gentec_maestro": [0, 61], "gerer": 33, "get": [5, 6, 7, 10, 11, 14, 19, 22, 26, 28, 29, 30, 32, 33, 38, 42, 45, 50, 55, 56, 57, 62, 63, 69, 70, 77, 104, 106, 109, 110, 113, 114, 115, 117, 118, 119, 120, 122, 124], "get_": [0, 11, 59], "get_acquired_data": [0, 5], "get_acquisition_tim": [0, 5], "get_actuator_nam": [0, 6, 7], "get_actuator_typ": [0, 6, 7], "get_al": [0, 30, 32, 33, 45], "get_all_label": [0, 38], "get_amplitud": [0, 6, 7], "get_attribut": [0, 28], "get_axis_statu": [0, 6, 7], "get_bias_curr": [0, 38], "get_bias_voltag": [0, 38], "get_buffer_length": [0, 42], "get_buffers_en": [0, 32], "get_calibr": [0, 35], "get_camera_handl": [0, 5], "get_camera_serial_numb": [0, 5], "get_capture_dur": [0, 43, 44], "get_card_memori": [0, 39], "get_card_typ": [0, 39], "get_channel": [0, 43, 44, 112], "get_channel_nam": 28, "get_channel_waveform": [0, 36], "get_channel_waveform_data": [0, 36], "get_chassi": [0, 21, 22], "get_clock_frequ": [0, 21, 22], "get_clock_sync_frequ": [0, 21, 22], "get_cmd": [5, 6, 15, 19, 24, 33, 38, 42, 45, 46], "get_configur": [0, 15, 43, 44], "get_coupl": [0, 21, 22], "get_current_folder_nam": [0, 45], "get_data": [0, 39], "get_dc_voltag": [0, 6, 7], "get_detector": [0, 5], "get_device_config": [0, 6, 7], "get_device_info": [0, 6, 7], "get_device_nam": [0, 41], "get_diagnostic_statu": [0, 15], "get_display_valu": [0, 42], "get_divid": [67, 68], "get_error": [0, 33], "get_error_info32bit": [0, 39], "get_file_handl": [67, 68], "get_filenam": [0, 45], "get_filter_mod": [0, 5], "get_filter_valu": [0, 32], "get_firmware_vers": [0, 6, 7, 21, 22, 39], "get_folder_cont": [0, 45], "get_fpga_pc_port": [0, 21, 22], "get_frequ": [0, 6, 7], "get_full_scal": [0, 21, 22], "get_funct": 115, "get_grat": [0, 35], "get_grating_info": [0, 35], "get_hardware_vers": [0, 5, 21, 22, 39], "get_head_model": [0, 5], "get_hvi_regist": [0, 21, 22], "get_hw_info": [0, 47, 48], "get_hw_serial_num_ex": [0, 47, 48], "get_i": 77, "get_id": [0, 19, 33, 105], "get_idn": [0, 1, 4, 5, 6, 8, 13, 14, 15, 17, 19, 21, 22, 24, 25, 27, 28, 29, 30, 32, 35, 37, 39, 42, 43, 46, 47, 50, 74, 108], "get_imped": [0, 21, 22], "get_info": 62, "get_input_delai": [0, 43], "get_jumpmod": [0, 45], "get_label": [0, 31, 38, 77], "get_last_error": [0, 29], "get_limit": [0, 14], "get_lut_nam": [0, 6, 7], "get_math_vdiv": [0, 36], "get_math_waveform": [0, 36], "get_max_curr": [0, 33, 34], "get_max_sample_r": [0, 39], "get_measurement_period": [0, 38], "get_mod": [0, 32], "get_module_count": [0, 21, 22], "get_module_idn": [0, 42], "get_module_statu": [0, 42], "get_n": [0, 38], "get_num_sampl": [0, 36], "get_number_devic": [0, 35], "get_number_gr": [0, 35], "get_number_of_detector": [0, 38], "get_number_pixel": [0, 35], "get_ofst": [0, 36], "get_open": [0, 21, 22], "get_opt": [0, 33, 105], "get_overload": [0, 42], "get_parameter_data": 122, "get_pars": [15, 24], "get_pixel_width": [0, 35], "get_pol_dac": [0, 32], "get_posit": [0, 6, 7, 41], "get_prescal": [0, 21, 22], "get_pressur": [0, 10, 30], "get_product_nam": [0, 21, 22], "get_product_name_by_index": [0, 21, 22], "get_product_name_by_slot": [0, 21, 22], "get_pulse_paramet": [0, 14], "get_pxi_trigg": [0, 21, 22], "get_rang": [0, 14], "get_raw": [0, 5, 6, 11, 16, 28, 30, 31, 33, 38, 42, 45, 50, 106], "get_raw_analog_waveform_data": [0, 36], "get_raw_digital_waveform_data": [0, 36], "get_raw_math_waveform_data": [0, 36], "get_recorded_scpi_command": [0, 31, 82, 98], "get_ref_posit": [0, 6, 7], "get_remote_set": [0, 32], "get_sample_r": [0, 36], "get_serial_numb": [0, 21, 22, 35], "get_serial_number_by_index": [0, 21, 22], "get_serial_number_by_slot": [0, 21, 22], "get_slit": [0, 35], "get_slot": [0, 21, 22], "get_stat": [0, 45], "get_statu": [0, 5, 21, 22, 25, 41], "get_tagg": [44, 112], "get_temperatur": [0, 5, 10, 21, 22, 30], "get_temperature_rang": [0, 5], "get_test_sign": [0, 43], "get_time_bas": [0, 36], "get_trig_mod": [0, 36], "get_trigger_by_nam": [0, 31, 89], "get_trigger_io": [0, 21, 22], "get_trigger_level": [0, 38, 43], "get_trigger_mod": [0, 21, 22], "get_trigger_threshold": [0, 21, 22], "get_typ": [0, 21, 22], "get_type_by_index": [0, 21, 22], "get_type_by_slot": [0, 21, 22], "get_uninitialized_slot": [0, 21, 22], "get_v": 122, "get_v2": 122, "get_valid": [0, 50], "get_vdiv": [0, 36], "get_voltag": [0, 42], "get_waveform_setup": [0, 36], "get_waveform_statu": [0, 21, 22], "get_waveform_typ": [0, 21, 22], "get_wavelength": [0, 35], "get_wavelength_limit": [0, 35], "get_wrapp": 115, "geta": 6, "getaci": 6, "getal": [0, 6, 33], "getattr": [19, 106], "getc": 6, "getcapturedur": 44, "getchannel": 44, "getconfigur": 44, "getcser": 6, "getcwd": 102, "getdci": 6, "geterrormessag": 68, "getf": 6, "getinputdelai": 43, "getlogg": 75, "getm": 6, "getposit": [0, 41], "getser": 6, "gettabl": 112, "gettd": 6, "getter": 15, "gettestsign": 43, "gettriggerlevel": 43, "gettu": 6, "getv": 6, "gh": 42, "ghz": [11, 53, 62, 73, 102, 120, 122], "giga": [0, 39, 40], "giga_b": [0, 39, 40], "git": [62, 124, 125], "github": [15, 28, 47, 48, 98, 124], "give": [32, 33, 42, 43, 45, 63, 70, 75, 99, 106], "given": [1, 6, 14, 22, 28, 33, 38, 42, 50, 51, 99], "global": [6, 29, 31], "gm349": 0, "gm349attenu": [0, 16], "gmbh": [7, 39], "gmcatalog": 16, "gnd": 6, "go": [30, 31, 32, 42, 45, 59, 60, 62, 74, 98, 99, 102, 113], "goe": 77, "gone": 75, "goniomet": [0, 6, 7], "goto": 45, "goto_root": [0, 45], "gotten": [44, 63], "gpib": [23, 30, 45, 69, 70], "gpib0": [69, 70, 106], "gpib1": 62, "gpioflag": [0, 41], "gpl": 125, "gr": 64, "graham": 75, "grant": 38, "graph": 102, "grate": [19, 20, 35, 64, 107], "grating1": [19, 64], "grating2": 64, "grating_1800": 64, "grating_600": 64, "gratingchannel": [0, 19], "gratingnumb": 64, "gre": [59, 63, 109], "gre050342": 109, "gre058050": [59, 63], "great": 51, "greater": 32, "greatli": 120, "grei": [83, 84], "grep": 98, "grid": [83, 84, 106, 122], "grid_sampl": 106, "groov": 107, "groove_dens": 107, "ground": [0, 7, 31, 99], "group": [1, 16, 24, 30, 31, 51, 75, 77], "groupedparamet": 24, "gsa": [67, 68], "gt": [62, 75, 102, 106, 109, 112, 113, 115], "guarante": [7, 32], "gui": [51, 75], "h": [1, 42, 75], "h2py": [0, 39], "h_spe": 20, "ha": [1, 4, 5, 6, 7, 13, 15, 22, 23, 28, 31, 33, 35, 37, 38, 42, 43, 45, 48, 50, 51, 64, 70, 72, 73, 74, 75, 77, 98, 106, 109, 112, 115, 121, 125], "hack": 51, "had": 1, "hadn": [53, 55, 59, 63, 64, 75, 76, 89, 102, 108], "half": 45, "half_rang": [0, 32], "hand": 77, "handheld": 47, "handl": [1, 4, 6, 7, 19, 20, 28, 30, 32, 33, 38, 39, 44, 75], "hang": [6, 98], "happen": [51, 116], "hard": [4, 13], "hardwar": [7, 13, 22, 24, 29, 32, 33, 39, 46, 47, 48, 108, 123], "hardware_revis": [0, 37], "harmon": 106, "harmonic_ss": [0, 37], "hasn": 1, "have": [1, 4, 5, 6, 7, 11, 13, 19, 22, 25, 28, 31, 32, 35, 39, 42, 43, 44, 45, 50, 51, 60, 63, 64, 72, 73, 74, 75, 77, 102, 112, 124], "haven": 102, "hban": 33, "hdawg8": 51, "hdev": 33, "head": [5, 75, 125], "head_model": [0, 5], "header": 1, "heater": [3, 30, 124], "heater_addr": 54, "heater_i": 54, "heater_off": [0, 30], "heater_on": [0, 30], "heater_output": 69, "heater_rang": 69, "heater_v": 54, "heavili": 125, "held": 22, "helium": 30, "help": [32, 112], "helper": 112, "here": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 31, 32, 33, 35, 37, 39, 42, 43, 45, 46, 47, 50, 53, 59, 65, 74, 77, 102, 105, 106, 108, 112, 125], "hereaft": 77, "herebi": 38, "hertz": [7, 42, 63], "hf": 39, "hf2li": [0, 124, 125], "hi": 22, "high": [0, 6, 7, 22, 31, 33, 39, 73, 75, 77, 81, 105, 120], "high1": 113, "higher": [33, 99], "hislip": 59, "hislip0": [59, 105], "histogram_log_bins_measur": 112, "histogramlogbinsmeasur": [0, 43, 112], "hit": 7, "hiz": 22, "hmc": [124, 125], "hmc8041": 0, "hmc8042": 0, "hmc8043": [0, 103], "hmc804x": [0, 33], "hmp": [0, 33], "hmp2020": 0, "hmp2030": 0, "hmp4030": 0, "hmp4040": [0, 124, 125], "hold": [0, 11, 18, 28, 30, 75, 82, 106], "hold_field": [0, 30], "holder": [38, 51], "holzworth": [0, 124, 125], "home": [47, 48, 124], "homelimitswitch": [0, 47], "hook": [77, 89], "horiba": [0, 124, 125], "horiba_fhr": [0, 64], "horibafhr": [0, 19, 64], "host": 77, "hostnam": 7, "hotspot": 15, "hour": [0, 24, 37], "how": [31, 74, 87, 101, 102, 125], "howev": [55, 62, 77], "hp": 62, "hp8594e": [124, 125], "hpow": 33, "hs900": [0, 63], "hs9002b": 63, "hs9008b": 0, "hs9008bchannel": [0, 18], "hs900b": [124, 125], "hs900channel": [0, 18], "htm": 32, "html": [28, 33, 42, 71, 108], "http": [8, 14, 15, 16, 27, 28, 32, 33, 39, 42, 47, 48, 57, 59, 60, 71, 98, 108, 117, 124], "hvi": 22, "hw": [22, 48], "hw42000000": 103, "hw50020003": 104, "hw_trigger": [0, 37], "hw_type": 48, "hwchan": 33, "hwtriggert": [0, 37], "hysteresi": 7, "hz": [2, 6, 7, 11, 14, 15, 22, 28, 33, 45, 53, 59, 60, 63, 71, 73, 106, 108, 109, 113, 121, 122, 123], "i": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 95, 99, 101, 102, 105, 106, 107, 109, 110, 112, 113, 115, 116, 117, 120, 121, 123, 124], "i1": [103, 104], "i_bia": [0, 33], "i_mod": 109, "i_offset": [0, 33], "iago": [47, 48], "ibat": 120, "ichau": [0, 6, 7], "id": [1, 5, 6, 7, 8, 14, 15, 17, 19, 21, 23, 24, 25, 28, 29, 32, 35, 37, 39, 42, 43, 46, 47, 48, 50, 59, 62, 75, 96, 102, 105, 106, 109, 120], "id_queri": 28, "ident": 31, "identif": [17, 22, 31, 33], "identifi": [0, 7, 22, 27, 28, 30, 42, 50, 72, 98, 102, 120], "idl": [24, 45], "idn": [1, 4, 5, 6, 8, 13, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 30, 31, 32, 33, 35, 37, 39, 42, 43, 46, 47, 50, 55, 59, 60, 63, 66, 70, 72, 73, 75, 87, 102, 106, 107, 108, 109, 113, 114, 121], "idn_param": 31, "idr": 30, "idu": 5, "idx": 28, "ie": [26, 31], "ieee": 31, "if_bandwidth": [59, 122], "igh": 30, "ignor": [7, 22, 30, 51, 75], "ignorecas": 36, "ii": [31, 83, 101, 124], "ilm": 30, "ilm200": 0, "imag": [22, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "imform": 58, "img": [83, 84, 89], "imm": 66, "immedi": [22, 45, 74], "immidi": 77, "imp": 33, "imped": [0, 22, 33], "impedance_output1": 113, "impedance_output2": 113, "implement": [0, 1, 15, 19, 22, 28, 30, 33, 43, 44, 50, 112, 115, 125], "impli": [38, 77], "import": [15, 26, 38, 42, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "improv": 125, "imshow": [83, 84, 89], "in_dur": 68, "in_phas": 109, "in_r": 109, "inc": 66, "includ": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 31, 32, 35, 37, 38, 39, 42, 43, 45, 46, 47, 50], "incom": 22, "inconsist": 75, "incorpor": 102, "incorrectli": 62, "increas": [22, 62, 110], "increment": [22, 31, 42, 106], "increment_sensit": [0, 42, 106], "inde": 70, "independ": [33, 51, 77, 106, 123], "index": [6, 9, 16, 22, 28, 31, 32, 48, 51, 77, 123, 125], "indic": [6, 13, 22, 39, 48, 63], "individu": [15, 32, 33, 74, 77, 125], "indiviu": 31, "inf": 77, "infinit": [22, 31], "influenc": 31, "info": 24, "inform": [6, 7, 15, 39, 47, 48, 51, 64, 75, 105, 112, 117, 125], "ingor": 75, "inherit": [22, 33, 43, 45, 112], "ini": [19, 64], "init": [0, 13, 19, 28, 45, 64, 82, 87], "init_hw_devic": [0, 47, 48], "init_start": [9, 65], "initi": [0, 1, 5, 7, 19, 20, 22, 26, 28, 30, 31, 35, 42, 43, 44, 45, 48, 64, 70, 72, 74, 77, 112, 124], "initial": 124, "initial_cache_valu": 15, "initialis": [22, 31, 75, 78, 101, 124], "initialise_databas": [59, 109], "initialise_or_create_database_at": [59, 102, 109], "initialize_channel": [0, 39], "initialz": 32, "initiate_correct": [0, 31, 95], "inizi": 122, "inject": 31, "inlet": 10, "inner": [31, 88, 89], "inner_contact": [31, 82, 88, 89, 95], "inner_step": 89, "inner_step_time_": [31, 82, 88, 89, 95], "inner_step_trigg": [31, 82, 88, 89, 95], "inner_v": 89, "inner_voltag": [31, 82, 88, 89, 95], "inout": 22, "inp": [6, 33], "input": [1, 4, 6, 7, 15, 22, 28, 30, 31, 32, 33, 39, 42, 45, 50, 53, 55, 59, 62, 63, 64, 68, 69, 71, 75, 76, 89, 99, 102, 108, 109, 115], "input_imped": 106, "input_path": 39, "input_rang": 39, "inputs_gnd": 109, "insert": [45, 75, 115], "insid": [32, 39, 45, 77], "inspect": [31, 70], "inspir": 24, "inst": 116, "inst0": [103, 113, 115, 122], "inst_no": 6, "instal": [1, 7, 13, 22, 32, 33, 42, 51, 56, 59, 60, 98, 105, 108, 117], "instanc": [5, 6, 7, 15, 18, 22, 28, 32, 33, 38, 42, 43, 45, 50, 51, 67, 68, 115, 116, 117, 123], "instant": [1, 42], "instanti": [7, 9, 15, 21, 31, 43, 60, 112], "instead": [24, 25, 29, 31, 44, 46, 50, 64, 75, 106, 112, 115, 125], "instr": [15, 30, 53, 54, 59, 60, 61, 62, 65, 69, 70, 77, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99, 102, 103, 104, 105, 106, 113, 114, 115, 122], "instrument": [1, 2, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 60, 63, 66, 75, 77, 93, 98, 103, 104, 105, 106, 110, 115, 117, 124, 125], "instrument_driv": [26, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 102], "instrumentbas": [6, 19, 36, 43, 44], "instrumentchannel": [6, 8, 9, 18, 19, 21, 23, 26, 28, 29, 31, 33, 34, 36, 43, 44, 45, 50, 112], "instrumentmodul": 44, "instrumentsni": 28, "insuffici": 32, "int": [5, 6, 7, 9, 10, 11, 14, 15, 17, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 39, 42, 43, 44, 45, 48, 50, 51, 60, 68, 75, 105, 109, 112, 113], "int1": [82, 87], "int2": 82, "intb": 33, "integ": [1, 19, 22, 31, 42, 44, 51], "integr": [31, 77, 110, 124, 125], "intellig": 30, "intenum": 7, "inter": [32, 75], "inter_delai": 32, "interact": [10, 15, 30], "interconnect": [31, 93], "interfac": [0, 1, 6, 19, 22, 31, 75, 102], "interleav": 39, "interlock": 24, "interlock_statu": 24, "intern": [6, 7, 15, 18, 22, 31, 33, 42, 45, 51, 55, 60, 63, 77, 89, 93, 105, 106, 108, 113], "internal_trigg": [31, 89], "interpol": [83, 84, 89], "interpret": [6, 7, 62], "interrupt": 1, "interv": 33, "introduct": [63, 125], "ints_to_comma_separated_list": [0, 31], "inuitit": 64, "inv": 33, "invalid": [6, 7, 25, 31, 43, 44], "invalidate_trac": [0, 11], "invers": [19, 113], "invert": [31, 33], "invert_yaxi": [83, 84], "invok": [22, 38], "involv": 31, "io": [7, 22, 28, 71], "ip": [7, 8, 15, 25, 26, 27, 30, 42, 75, 105, 110, 120, 124, 125], "ip_pow": 57, "ip_power_9258": [0, 57], "ipinstru": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 26, 27, 28, 29, 32, 35, 37, 39, 42, 43, 46, 47, 50], "ips120": 0, "ipwr": [0, 41], "ipython": [79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 115], "iq": [22, 32, 33], "iqchannel": [0, 33], "iqmodul": [0, 33], "ir": 14, "irreversibli": [1, 5, 6, 19, 28, 30, 35, 43, 50], "is_cooler_on": [0, 5], "is_run": [0, 43, 44], "is_upload": [0, 21, 22], "isobu": 30, "isol": 31, "isrun": 44, "issu": 75, "iter": [9, 28, 42, 106], "iteratorbas": [43, 44], "itest": [0, 124, 125], "itestchannel": [0, 9], "itestmultichannelparamet": [0, 9], "its": [1, 5, 6, 7, 13, 19, 22, 28, 33, 35, 42, 43, 44, 45, 50, 69, 74, 77, 99, 107, 112, 116, 124], "itself": [6, 19, 45, 102], "iusb": [0, 41], "iv": 110, "ivi": 28, "ivvi": 0, "ix": 9, "j3": 16, "j7211": 21, "j7211b": 21, "jan": 4, "jeniels": 55, "jog": [0, 29], "join": 102, "jp": 89, "json": [15, 25, 31, 38, 42, 44, 122], "juelich": [6, 7, 33], "julien": [14, 27, 33, 42, 47, 48], "julienbarri": [14, 27, 33, 42, 47, 48], "jump": [22, 32, 45], "jump_log": 45, "jumplog": 45, "jun": 66, "jupyt": 125, "just": [6, 18, 25, 28, 31, 32, 33, 44, 63, 88, 99], "j\u00fclich": 7, "k": [40, 47, 69, 75, 122, 124], "k10cr1": [0, 48, 124, 125], "k16": 33, "k22": [33, 105], "k23": [33, 105], "k24": 33, "k739": 33, "kcube": 117, "kdc101": [0, 48], "keep": 77, "kei": [6, 13, 19, 33, 42, 51, 106], "keithlei": [45, 124, 125], "keithley6430": 66, "keithley6500": 45, "keithley_2000_scan": [0, 115], "keithley_2000_scan_channel": [0, 45], "keithley_2700": 0, "keithley_6430": [0, 66], "keithley_6500": [0, 115], "keithley_sens": [0, 45], "kelvin": [10, 30], "kelvinox": 0, "kernel": 60, "keysight": [0, 124, 125], "keysight_e36313a": 0, "keysight_e8267d": 0, "keysight_j7211": 0, "keysight_m3201a": 0, "keysight_m3300a": 0, "keysightsd1": [21, 22, 67, 68], "keyword": [22, 28, 38, 45], "khz": 106, "kill": [62, 98], "kilo": [0, 39, 40], "kilo_b": [0, 39, 40], "kind": [6, 7, 31, 38], "kinesi": [0, 47, 117], "kiyooka": 4, "kk": 36, "kkmg": 36, "kls101": 117, "kls1550": [0, 124, 125], "klsnnn": 117, "knob": 115, "know": [20, 117], "known": [6, 15, 25, 31, 44, 77, 109], "krato": 16, "kratosm": 16, "kw": 45, "kwarg": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 115], "l": [0, 7, 33, 47, 107], "l490mz": [0, 47, 48], "lab": 6, "label": [6, 11, 15, 19, 28, 38, 42, 44, 46, 57, 61, 69, 75, 83, 84, 106, 107, 119, 122, 124, 125], "labels": 122, "labon": 51, "labspec": 64, "labspec6": 19, "laird": 102, "lakeshor": [0, 124, 125], "lakeshore625": [0, 23, 70], "lambda": [15, 19, 24, 46, 89], "lan": [7, 98], "lancast": 102, "lank": [7, 33], "larg": [32, 113], "laser": [14, 24, 25, 46, 47, 124, 125], "lasersourc": 117, "last": [7, 10, 16, 22, 28, 30, 31, 45, 105, 115], "last_posit": 116, "later": [7, 31, 77, 102, 125], "latest": [25, 28, 31, 44, 71], "latter": [13, 43], "launch": [22, 75], "layer": 45, "lazi": 66, "lc1846": 65, "lcardtyp": 39, "lda": [0, 124, 125], "lda_ch2": 121, "lda_ch4": 121, "lda_main_port": 121, "lda_test_port": 121, "ldaattenu": [0, 50], "ldachannel": [0, 50], "ldaparamet": [0, 50], "ldaworkingfrequ": [0, 50], "lead": [30, 62], "leakag": [0, 31, 97, 101, 124], "leakage_matrix_ohm": [83, 84], "leakage_megaohm": [83, 84], "least": [22, 31, 33], "leav": [22, 28, 39], "leave_persistent_mod": [0, 30], "led": 51, "left": [31, 43], "left_diod": 96, "legaci": 22, "legacy_channel_numb": [21, 22], "legibl": 43, "len": [1, 67, 68, 79, 83, 84, 87, 89], "length": [1, 5, 22, 31, 33, 38, 51, 75, 113, 114], "less": [7, 33, 42, 75, 77], "let": [48, 59, 61, 63, 69, 74, 98, 99, 106, 114, 124], "lev": 33, "level": [0, 6, 7, 21, 30, 32, 33, 39, 42, 43, 51, 62, 73, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 99, 102, 110], "level0": 39, "level1": 39, "level_dac_valu": [0, 37], "lf": 33, "lf1": [33, 105], "lf1a": 33, "lf1b": 33, "lf2": 33, "lf2a": 33, "lf2b": 33, "lfag": 31, "lfchan": 33, "lfo": 33, "lfo1": 33, "lfo2": 33, "lfoutputchannel": [0, 33], "lfoutputsweep": [0, 33], "lia": 123, "lia1": 123, "liabil": 38, "liabl": 38, "lib": [7, 14, 60, 62, 115], "lib_prefix": 28, "libname_error_messag": 28, "libname_getattribut": 28, "libname_init": 28, "libname_setattribut": 28, "librari": [1, 5, 6, 7, 14, 22, 28, 30, 35, 43, 48, 67, 68, 117], "libusb0": 7, "libximc": [0, 41], "licens": 38, "light": 38, "lighthous": 24, "lighthouse_photonics_sprout_g": 0, "lighthousephoton": 0, "lighthousephotonicssproutg": [0, 24], "like": [6, 19, 21, 28, 42, 45, 63, 75, 98, 112], "lim_switch": 48, "limit": [1, 13, 14, 22, 29, 32, 38, 47, 48, 70, 73, 74, 77], "limit_statu": 74, "lin": [33, 113], "lin_step": [0, 33], "line": [10, 13, 15, 16, 19, 22, 28, 31, 42, 66, 98, 99, 102, 113], "line2d": 113, "linear": [0, 6, 7, 11, 19, 33], "linearli": [31, 54], "linewidth": [83, 84], "linger": 31, "link": [1, 44, 125], "linspac": [0, 32, 66, 67, 68, 77, 79, 80, 82, 88, 89, 95, 106], "list": [1, 5, 6, 7, 8, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 30, 31, 32, 33, 35, 37, 39, 42, 43, 44, 45, 46, 47, 48, 50, 51, 60, 72, 73, 77, 82, 87, 89, 97, 101, 102, 106, 112, 124], "list2_end": 80, "list_available_devic": [0, 47, 48], "list_context": [0, 31], "list_mode_run": [0, 37], "list_mode_t": [0, 37], "list_resourc": 98, "listen": [31, 42, 84, 93], "listern": [31, 93], "listmodet": [0, 37], "liter": 19, "ll": 31, "lm": 120, "lmx1": 15, "lmx2": 15, "lno": [33, 105], "lo": [15, 33, 60], "load": [1, 7, 22, 33, 45, 50, 67, 68, 106, 121, 124], "load_and_set_sequ": [0, 45], "load_by_run_spec": 122, "load_fpga_imag": [0, 21, 22], "load_lut_fil": [0, 6, 7], "load_or_create_experi": [59, 75, 96, 102, 106, 109, 110, 122], "load_waveform": [0, 21, 22], "load_waveform_int16": [0, 21, 22], "loadabl": 33, "loadlib": 19, "local": [0, 15, 30, 33, 42, 60, 115, 125], "localhost": [38, 59], "locat": [21, 22, 28, 42, 45, 77], "lock": [15, 30, 32, 33, 42, 60, 106, 120, 123], "lock_lmx1": 15, "lock_lmx2": 15, "lock_xtal": 15, "lockin": [4, 7, 42, 51, 106, 109], "lockin1": 106, "lockin_aux_out1": 106, "lockin_ch1_datatrac": 106, "lockin_frequ": 106, "lockin_r_v": 106, "lockin_sweep_setpoint": 106, "lockin_x": 106, "log": [10, 22, 30, 33, 38, 43, 53, 55, 58, 59, 63, 64, 67, 68, 75, 76, 89, 102, 108], "log_step": [0, 33], "logarithm": 33, "logfil": [53, 55, 59, 63, 64, 75, 76, 89, 102, 108], "logger": [67, 68, 75, 102, 110, 122], "logic": [22, 45], "logic_jump": 45, "login": [8, 57], "login_nam": [8, 57], "login_password": [8, 57], "long": [7, 11, 45, 77], "long_trac": 79, "longer": [22, 33, 42, 51, 60], "look": [7, 50, 63, 75, 102, 106, 124, 125], "lookup": 7, "loop": [6, 7, 9, 28, 60, 65, 117, 120], "loos": 31, "losc": 33, "losc_input": [0, 33], "losc_mod": [0, 33], "losc_output": [0, 33], "losc_stat": [0, 33], "loscil": 33, "loss": 7, "lost": 1, "lot": 45, "low": [0, 6, 7, 15, 22, 31, 33, 39, 42, 77, 81, 120], "low_phase_nois": 15, "low_power_mode_en": 120, "low_spuri": [15, 60], "lower": [7, 24], "lowest": 42, "lp_filter": 39, "lsb": 22, "lsci": [69, 70], "lt": [62, 75, 102, 106, 109, 112, 113, 115], "ltsxxx": [0, 47, 48], "luka": [7, 33], "lut": 7, "m": [6, 7, 14, 15, 22, 31, 33, 38, 40, 42, 47, 60, 73, 77, 106, 110, 113, 116], "m0": 15, "m1": [15, 45], "m100l": 74, "m2": [0, 15, 45], "m2_solstis_3": 0, "m2cmd_card_reset": 39, "m2cmd_card_waitreadi": 39, "m2j": 0, "m2solstis3": [0, 25], "m3": 15, "m32": 22, "m3201a": [21, 22], "m3202a": [0, 22, 124, 125], "m3202a_sync": 21, "m32xxa": 22, "m3300a": [21, 22], "m3300a_awg": [0, 21], "m3300a_dig": [0, 21], "m33xxa": 22, "m4": [15, 39], "m4i": 0, "m5": 15, "m5180": [0, 124, 125], "m6": 15, "m7": 15, "ma": [30, 75, 89], "mac": [0, 31], "machin": [98, 99], "made": 51, "maestro": [17, 124, 125], "magnet": [10, 13, 23, 30, 76, 124, 125], "magnet_coil_constant_unit": 70, "magnet_current_vector": [30, 75], "magnet_st": 75, "magnet_temperatur": 75, "magnetcurrentparamet": [0, 30], "magnetic_field_vector": [30, 75], "magnetic_field_z": 75, "magnetic_field_z_set": 75, "magneticfieldparamet": [0, 30], "magnitud": [11, 29, 59, 123], "mai": [7, 29, 31, 38, 42, 43, 45, 60, 62, 63, 72, 77, 112, 114, 120], "main": [0, 28, 30, 33, 39, 40, 43, 45, 64, 72, 112, 124], "main_port": 121, "mainfram": 42, "maintain": 28, "major": [0, 41], "make": [11, 15, 22, 28, 30, 32, 38, 42, 45, 51, 60, 72, 75, 77, 93, 102, 106, 123], "make_directori": [0, 45], "makerofinstru": 125, "man": 33, "man_dat": [0, 37], "manag": [19, 22, 28, 30, 31, 32, 47], "mandat": [0, 37], "mandatori": 45, "mani": [71, 124, 125], "manipul": [100, 101, 124], "manner": [32, 106], "manual": [13, 21, 22, 31, 32, 33, 49, 51, 55, 70, 84, 93, 106, 109], "manufactur": [0, 41], "manufacture_d": 108, "manufacturerid": [0, 41], "map": [6, 16, 19, 28, 31, 42, 44, 45, 64, 89, 106], "mark": [7, 31, 42, 51, 82], "marker": [22, 51], "marker1": 45, "marker2": 45, "markermod": 22, "markervalu": 22, "mask": [15, 22, 68], "mass": 6, "master": [15, 28, 103, 104, 124], "match": [1, 30, 42], "matplotlib": [55, 62, 66, 68, 75, 83, 84, 89, 93, 106, 110, 113, 122], "matrix": [31, 38, 83, 84], "max": [9, 13, 28, 31, 32, 39, 71, 72, 73, 114, 120, 122], "max_spe": 19, "max_status_ag": [0, 31], "max_val": 28, "max_valu": [15, 19, 32, 44], "max_vel": 48, "maxim": [19, 77], "maximum": [6, 13, 22, 28, 29, 32, 33, 42, 48, 77], "maxnm": 64, "maxum": 64, "mbar": 10, "mc": 30, "mc_temperatur": 75, "mea": [59, 71, 75, 77, 106, 115, 122], "mean": [6, 28, 29, 30, 31, 33, 60, 64, 66, 75, 77, 113, 114], "meanful": 33, "meaning": 112, "meant": 51, "meantim": 116, "meas2_r": 66, "meas_format": 122, "meas_r": 66, "measur": [0, 6, 7, 9, 11, 28, 29, 31, 33, 38, 39, 42, 43, 44, 45, 61, 70, 72, 74, 77, 83, 84, 89, 102, 103, 104, 109, 110, 122, 124, 125], "measure_capacit": [0, 6, 7], "measure_posit": [0, 29, 74], "measurement_context": [0, 31], "measurement_instru": 106, "measurement_nam": 109, "measurement_period": 110, "measurement_var": 106, "measurementcontrolmixin": [0, 43, 44], "measurer": [124, 125], "measurment_label": 106, "mechan": 32, "media": 31, "medium": 31, "mega": [0, 39, 40], "mega_b": [0, 39, 40], "mem_usag": [0, 21, 22], "member": [37, 41, 125], "memor": 72, "memori": [1, 6, 7, 22, 25, 31, 39, 44, 45, 50, 51, 113], "memory_manag": [0, 21], "memory_s": [0, 21, 22], "memorymanag": [0, 21, 22], "memsiz": 39, "merchant": 38, "mercuri": 0, "merg": 38, "messag": [0, 6, 7, 13, 24, 27, 31, 32, 39, 42, 75], "message_len": 32, "metadata": [6, 19, 42, 44], "meter": [7, 30, 47], "method": [5, 6, 21, 22, 24, 28, 29, 31, 32, 33, 38, 39, 42, 43, 44, 45, 46, 51, 70, 72, 77, 106, 112], "mff002": 118, "mff10x": [0, 48, 124, 125], "mhz": [15, 22, 32, 39, 53, 67, 68, 71, 108, 120, 123], "michael": [6, 33], "microphon": [15, 60], "microscop": [28, 71], "microwav": [16, 33, 124, 125], "mid": 14, "might": [44, 98, 115], "milisecod": 117, "millidegre": 7, "million": 71, "millisecond": [19, 42, 77], "millivolt": 32, "min": [13, 23, 31, 32, 68, 70, 75, 114], "min_spe": 19, "min_val": 28, "min_valu": [15, 19, 32, 44], "min_vel": 48, "mind": 22, "mini_circuit": 26, "minicircuit": 0, "minicircuitsmodul": [0, 26], "minicircuitsmodularsystem": [0, 26], "miniconda3": 62, "minim": [19, 28, 71], "minimum": [13, 28, 32, 33, 42, 48], "minnm": 64, "minor": [0, 41, 83, 84], "minortick": [83, 84], "minum": 64, "minut": [29, 75, 102], "mircat": 0, "mircat_las": 14, "mircatsdk": 14, "mirror": [19, 47, 48, 64, 118], "mirror1": 19, "mirror2": [19, 64], "misc": 59, "mismatch": [1, 31], "miss": 112, "mit": [38, 125], "mix": [10, 28, 30], "mixer": [32, 51], "mixin": 44, "mixing_chamber_heater_off": [0, 30], "mixing_chamber_heater_pow": 75, "mixing_chamber_temperatur": 75, "mixing_chamber_temperature_set": 75, "mixtur": 10, "mkdtemp": 64, "mm": [64, 107], "mock": 105, "mock_instru": 102, "mockvisa": [0, 6, 33], "mockvisahandl": [0, 6, 33, 105], "mode": [0, 1, 5, 6, 7, 9, 11, 15, 19, 22, 24, 28, 30, 31, 32, 33, 36, 39, 42, 45, 46, 51, 53, 56, 59, 62, 63, 64, 66, 70, 75, 76, 78, 82, 87, 89, 101, 105, 108, 109, 113, 120, 124], "mode_forc": [31, 77], "modefor": 33, "model": [0, 1, 4, 5, 6, 8, 12, 13, 14, 15, 17, 19, 21, 23, 24, 25, 28, 29, 30, 32, 33, 35, 37, 39, 42, 43, 46, 47, 48, 49, 50, 55, 60, 62, 63, 72, 73, 74, 75, 106, 108, 109, 113, 114, 124, 125], "model_331": [0, 69], "model_625": [0, 70], "modifi": [6, 13, 38, 43, 77, 105], "modul": [63, 67, 68, 105, 112, 115, 120, 124, 125], "modular": 26, "modulation_am_depth": [0, 15, 60], "modulation_db": 120, "modulation_en": [0, 15, 60], "modulation_fm_devi": [0, 15, 60], "modulation_freq": [0, 15, 60], "modulation_frequ": 120, "modulation_mv": [83, 84], "modulation_pulse_period": [0, 15, 60], "modulation_pulse_width": [0, 15, 60], "modulation_signal_waveform": [0, 15, 60], "modulation_sourc": [0, 15, 60], "modulation_typ": [0, 15, 22, 60], "modulation_v": [31, 83, 84], "modulation_voltag": 31, "module_1": 26, "module_2": 26, "module_3": 26, "module_address": 26, "modulein": 68, "moduleinid": 68, "modulenam": [6, 33], "mohm": 39, "moment": [45, 55], "monitor": [33, 100, 101, 124], "monoton": 62, "montana": 27, "montanainstru": 0, "montanainstruments_cryost": [0, 27], "month": [0, 37], "more": [7, 13, 31, 32, 39, 50, 51, 63, 64, 68, 72, 75, 78, 98, 101, 112, 124], "moreov": 99, "most": [15, 21, 28, 33, 45, 49, 73, 115, 122], "mostli": [28, 31, 43], "mot_get_home_paramet": [0, 47, 48], "mot_get_posit": [0, 47, 48], "mot_get_status_bit": [0, 47, 48], "mot_get_velocity_paramet": [0, 47, 48], "mot_move_absolute_ex": [0, 47, 48], "mot_move_hom": [0, 47, 48], "mot_move_jog": [0, 47, 48], "mot_move_veloc": [0, 47, 48], "mot_set_home_paramet": [0, 47, 48], "mot_set_velocity_paramet": [0, 47, 48], "mot_stop_profil": [0, 47, 48], "motion": [6, 7, 124, 125], "motion_control": 117, "motioncontrol": 117, "motor": [6, 7, 19, 20, 29, 47, 48, 52, 64, 116], "motorchannel": [0, 19], "motorstepunit": 64, "mount": [29, 74], "mountain": 11, "move": [0, 6, 7, 19, 29, 30, 48, 56, 64, 74, 102, 124], "move_ab": [0, 29, 74], "move_hom": 116, "move_limit": [0, 29], "move_refer": [0, 6, 7], "move_rel": [0, 29, 74], "move_to_reference_posit": [0, 6], "movement": [6, 29, 56, 74], "movest": [0, 41], "msg": [13, 30, 38], "msg_group": 30, "msl": 19, "mst601": [0, 47, 48], "mt": [26, 75], "mtsmodul": [0, 26], "mtvd": 36, "much": [31, 72], "multi": [26, 31, 39], "multi_axis_posit": 6, "multiaxisposit": [0, 6], "multiaxispositionparamet": [0, 6], "multichannel": 71, "multichannelinstrumentparamet": [9, 31], "multifunct": [124, 125], "multimet": [45, 124, 125], "multiparamet": [6, 11, 30, 33, 45], "multipl": [6, 7, 21, 22, 28, 31, 32, 39, 43, 45, 51, 78, 97, 99, 101, 112, 120, 124], "multiple_step": [0, 6], "multiple_trigger_acquisit": [0, 39], "multiplex": 72, "multipli": 31, "must": [6, 7, 20, 22, 30, 31, 33, 39, 45, 51, 87, 112, 117], "mutlifunct": 28, "mv": [7, 32, 39, 83, 84, 106, 109, 110, 123], "mv_rang": 39, "mvcmdst": [0, 41], "mw": [33, 73, 117], "mw1": 108, "mw_sourc": 73, "my": 102, "my49370329": 53, "my_list": [85, 92], "my_trac": 79, "myplot": 77, "mysquar": 87, "m\u00b2": 25, "m\u03c9": [83, 84], "n": [1, 2, 6, 11, 22, 30, 32, 36, 38, 42, 45, 62, 77, 87, 109], "n49388": 106, "n9000a": [2, 124, 125], "n_avail": [0, 31], "n_bin": 112, "n_channel": [0, 31], "n_cycl": 22, "n_cycles_remain": [0, 31], "n_error": [0, 31], "n_external_input": [0, 31], "n_external_output": [0, 31], "n_point": [22, 42], "n_pt": [67, 68], "n_trigger": [0, 31, 39], "na_mod": [0, 33], "name": [0, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 42, 43, 44, 45, 47, 48, 50, 51, 56, 57, 61, 63, 64, 65, 69, 70, 73, 75, 76, 77, 79, 84, 93, 99, 102, 105, 106, 109, 117, 120, 121, 123, 124, 125], "name_in_librari": 28, "name_map": [28, 72], "namedargtyp": [0, 28], "namedtupl": 28, "nan": 6, "nanomet": 7, "narrow": 32, "narrowband_fm": 15, "nation": [28, 73, 124, 125], "nationalinstru": [0, 71, 72, 73], "nationalinstruments_pxie_5654": [0, 28], "nationalinstruments_rfsg": [0, 28], "nb": [15, 31], "nb_trace": 59, "nchannel": 28, "ndarrai": [11, 22, 31, 36, 42, 44, 45, 51], "nearbi": 31, "nearest": 89, "necessari": [1, 6, 7, 31, 33, 102], "need": [6, 13, 20, 22, 31, 33, 39, 43, 45, 51, 57, 60, 62, 63, 70, 73, 88, 98, 106, 108, 109, 112, 117, 118, 119], "neg": [6, 22, 29, 31, 32, 39, 73, 81], "negat": 22, "neg\u00eerneac": 15, "neither": 7, "netstat": 98, "network": [7, 8, 11, 15, 28, 45, 124, 125], "never": [25, 31, 44, 109], "new": [6, 9, 20, 22, 24, 29, 31, 33, 43, 45, 46, 51, 74, 112, 125], "new_cmd": [24, 29, 46], "new_experi": 77, "new_timeout": 122, "new_waveform_from_doubl": [0, 21, 22], "new_waveform_from_fil": [0, 21, 22], "new_waveform_from_int": [0, 21, 22], "newgrouppage9": 47, "newport": [0, 124, 125], "newport_ag_uc8": [0, 29, 74], "newport_ag_uc8_axi": [0, 29], "newport_ag_uc8_channel": [0, 29], "newport_ag_uc8_errorcod": [0, 29], "newport_ag_uc8_except": [0, 29], "next": [6, 7, 22, 31, 33, 38, 102], "nf": 6, "ni": [28, 71, 72, 124, 125], "ni_dll_instru": 0, "ni_pxie_2597": [0, 28, 72], "ni_pxie_5654": [0, 28, 73], "ni_rfsg": [0, 28, 73], "ni_switch": [0, 28], "nidaqmx": [28, 71], "nidllinstru": [0, 28], "nidllwrapp": [0, 28], "nifpga": 28, "nimi": 28, "nirfsg": 28, "nirfsg_64": 28, "nirfsg_functionnam": 28, "nirfsg_getattributevireal64": 28, "nirfsg_init": 28, "nirfsg_setattributevireal64": 28, "niswitch": 28, "niswitch_kw": 28, "nisync_init": 28, "nitclk": 28, "nl": 32, "nm": [7, 61, 107], "nn": 62, "node": 51, "nodelai": 42, "noi": 33, "nois": [15, 32, 33, 42, 109, 120], "noisa": 33, "noisb": 33, "noise_level3": 113, "noise_level4": 113, "noise_mod": 109, "nomin": 73, "non": [8, 22, 31, 33, 65, 70, 72, 77, 124], "none": [4, 5, 6, 7, 9, 10, 11, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 51, 57, 58, 61, 62, 65, 66, 72, 73, 76, 83, 84, 102, 106, 107, 109, 111], "noninfring": 38, "nonstandard": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 32, 35, 37, 39, 42, 43, 46, 47, 50], "nonzero": 28, "nor": 33, "norm": [33, 36, 79, 85, 105, 113], "normal": [0, 32, 33, 36, 73, 75], "not_act": 74, "not_m3202a": [67, 68], "notagerror": 62, "notat": [7, 11, 77], "note": [4, 6, 13, 19, 22, 28, 30, 31, 43, 44, 45, 48, 51, 60, 62, 67, 68, 72, 73, 74, 77, 109, 112, 113, 117], "notebook": [19, 55, 62, 102, 113, 122, 124, 125], "noth": [0, 6, 7, 23, 28, 42], "notic": [38, 74], "notion": 77, "now": [43, 61, 63, 69, 72, 73, 74, 77, 105, 106, 112], "np": [11, 31, 36, 45, 66, 67, 68, 77, 82, 83, 84, 88, 89, 93, 95, 96, 106, 113, 122], "nplc": [31, 45, 66, 83, 84], "npt": [11, 33, 38, 59, 68, 110, 122], "nr_averag": 39, "nsl": 7, "ntpn": 98, "null": 1, "num": [0, 6, 7, 42, 45], "num_ai_channel": 71, "num_chan": [9, 77], "num_channel": 68, "num_cycl": 68, "num_point": [0, 36], "num_points1": 96, "num_samples_averag": 71, "num_samples_raw": 71, "num_sigout_mixer_channel": 51, "number": [0, 1, 5, 6, 7, 9, 11, 13, 15, 19, 21, 22, 25, 28, 29, 30, 31, 32, 33, 35, 38, 39, 42, 43, 45, 47, 48, 50, 51, 55, 56, 67, 68, 74, 77, 95, 100, 101, 107, 110, 114, 117, 121, 124], "number_accumul": 55, "number_dac": 32, "number_gr": [0, 35], "number_of_detector": 110, "number_pixel": 35, "numdac": 32, "numer": [28, 29, 62, 75, 102, 106, 109], "numpi": [32, 38, 67, 68, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 92, 93, 94, 95, 96, 106, 113, 122], "numpoint": 45, "numpointsparam": 45, "numpy_arrai": 38, "numpyjsonencod": [25, 31, 44], "numreadpoint": 68, "nwa": 122, "nx00": 4, "o": [1, 22, 28, 71, 102], "o5": 83, "o6": 84, "object": [5, 6, 7, 9, 19, 22, 28, 31, 32, 33, 35, 36, 38, 41, 43, 44, 48, 75, 106, 112, 117], "objectgroup_id": 47, "observ": [22, 77], "obtain": 38, "occasion": 32, "occur": [1, 7, 32, 39, 42, 48, 51, 77], "oct": 106, "octav": 16, "ocxo": [15, 60], "odc001": [0, 47, 48], "oer_quench": 70, "off": [0, 6, 7, 8, 9, 15, 21, 22, 24, 30, 31, 32, 33, 39, 45, 51, 54, 60, 63, 69, 73, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 99, 102, 103, 104, 105, 106, 109, 124], "off_modul": [0, 33], "off_tim": 7, "offici": [15, 28], "offset": [0, 6, 19, 22, 31, 33, 48, 61, 64, 120], "offset_channel_2": [67, 68], "offset_v": [31, 79, 90, 91, 94], "ofst": 36, "often": [15, 48], "ohm": [22, 31, 39, 45, 113], "oi": [30, 75], "oidec": [0, 30, 75], "ok": [6, 54, 112], "old": [22, 106], "omega": [124, 125], "on_hour": 24, "on_modul": [0, 33], "onboard": [22, 73], "onc": [15, 22, 31, 59, 60, 99, 112], "one": [1, 6, 7, 11, 13, 15, 19, 22, 28, 29, 31, 32, 33, 37, 43, 50, 51, 64, 67, 68, 72, 73, 74, 75, 78, 86, 101, 105, 106, 115, 124], "onedr": 102, "oneormor": [0, 31], "ones": [21, 33, 43, 45, 49, 51, 67, 68], "ongo": 77, "onli": [1, 6, 7, 11, 15, 19, 21, 22, 25, 28, 31, 32, 33, 37, 42, 43, 45, 48, 49, 50, 51, 63, 70, 71, 73, 74, 75, 77, 98, 99, 109, 112, 115, 117], "op": 25, "opc": 98, "open": [1, 7, 19, 22, 30, 64, 68, 98, 102, 117, 125], "open_devic": [0, 41], "open_relai": [0, 31, 99], "open_resourc": 87, "open_switch": [0, 30], "open_with_serial_numb": [0, 21, 22], "open_with_slot": [0, 21, 22], "opening_tim": 5, "openwithslot": 68, "oper": [1, 5, 6, 13, 19, 22, 28, 33, 38, 42, 45, 54, 75, 77, 102], "operate_status_t": [0, 37], "operatestatust": [0, 37], "operational_error_statu": 70, "opmod": 24, "oppos": 42, "opt": 33, "optic": [19, 29, 47], "optim": [32, 33], "optimize_for_frequ": [0, 32], "optimum": 32, "option": [2, 6, 7, 11, 14, 21, 22, 24, 27, 28, 31, 32, 33, 39, 42, 45, 50, 75, 77, 105, 121], "order": [19, 31, 42, 57, 61, 64, 73, 77], "organ": 43, "orient": [43, 112], "origin": 125, "original_timeout": 122, "osc": [79, 85, 94, 95], "osc_amplitud": 109, "osc_frequ": 109, "oscil": [15, 33, 60, 109], "oscilloscop": [73, 77], "ost001": [0, 47, 48], "other": [1, 5, 6, 7, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 31, 32, 35, 37, 38, 39, 42, 43, 46, 47, 50, 59, 63, 64, 71, 73, 74, 77, 115, 124], "otherwis": [1, 7, 20, 22, 38, 42, 48, 109], "our": [6, 28, 61, 63, 74], "out": [1, 6, 30, 31, 38, 39, 63, 75, 77, 79, 85, 94, 95, 99, 104, 106, 116], "outer": [31, 88], "outer_contact": [31, 82, 88, 89, 95], "outer_step": 89, "outer_step_trigg": [31, 88], "outer_trigger_channel": [31, 88], "outer_v": 89, "outer_voltag": [31, 82, 88, 89, 95], "outfp": 40, "outlet": 10, "outp": [33, 82], "outp1": 33, "output": [0, 1, 2, 6, 7, 13, 15, 16, 22, 24, 28, 30, 31, 32, 33, 39, 42, 45, 50, 51, 53, 54, 55, 59, 60, 63, 64, 67, 68, 69, 71, 73, 75, 76, 78, 82, 88, 89, 90, 95, 101, 102, 106, 108, 109, 112, 120, 123, 124], "output2input": 109, "output_amplitud": 123, "output_auto_off": 66, "output_en": [0, 37, 66, 73, 117], "output_interfac": 106, "output_level": 32, "output_map": [0, 42, 51], "output_mod": [0, 24, 31, 65, 81], "output_on": 66, "output_pow": [0, 24], "output_setpoint": [0, 24], "output_trigg": [31, 82, 88, 95], "output_vari": 109, "outputchannel": [0, 33], "outputfrequencysweep": [0, 33], "outputlevelsweep": [0, 33], "outsid": [32, 39, 77], "outstand": 33, "ovc_pressur": 75, "over": [31, 63, 65, 74, 77, 83, 84, 99, 106, 120, 124, 125], "over_temp": [0, 37], "overal": 33, "overid": 30, "overload": 42, "overrid": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 31, 32, 35, 37, 38, 39, 42, 43, 44, 46, 47, 50, 51, 77], "overridden": 121, "oversampl": 32, "overview": [39, 55, 63, 78, 99, 101, 107, 124, 125], "overwrit": [13, 32, 45], "overwritten": [5, 6, 28, 33, 38, 42, 45], "ovsr": 42, "own": [1, 31, 43], "oxford": [30, 75, 124, 125], "oxfordinstru": [0, 75], "oxfordinstruments_ilm200": [0, 30], "oxfordinstruments_ips120": [0, 30], "oxfordinstruments_kelvinox_igh": [0, 30], "p": [13, 30, 42, 103, 104, 106, 112], "p1": [15, 103, 104], "p1_pressur": 75, "p2_pressur": 75, "p3_pressur": 75, "p4_pressur": 75, "p5": 15, "p5_pressur": 75, "p6_pressur": 75, "p9": 15, "pa": 75, "packag": [60, 62, 75, 115, 125], "padding_mod": 22, "page": 125, "pair": [31, 50, 75], "panel": [22, 32, 42, 73, 106, 115], "par_nam": 15, "parallel": 30, "param": [9, 17, 22, 32, 34, 38, 45], "param_mea": 96, "param_nam": [9, 31], "param_set1": 96, "param_set2": 96, "paramaet": 43, "paramet": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 38, 39, 42, 43, 44, 45, 46, 47, 48, 50, 51, 55, 60, 63, 64, 66, 72, 73, 74, 75, 78, 99, 101, 105, 106, 107, 109, 110, 112, 113, 115, 117, 120, 124, 125], "parameter_snap": 122, "parameternam": [6, 33], "parameterwithsetpoint": [28, 38, 42, 45, 106], "parameterwithsetsideeffect": [0, 43, 44], "paramrawdatatyp": 11, "params_to_skip_upd": [25, 31, 44, 51], "paramt": [59, 62], "parenb": 42, "parent": [6, 8, 9, 18, 19, 21, 22, 23, 26, 28, 29, 31, 33, 34, 36, 43, 44, 45, 50], "parmet": 77, "pars": [1, 2, 5, 6, 8, 13, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 32, 35, 37, 39, 42, 43, 46, 47, 50, 75], "parse_binari": [0, 42], "parse_on_off": [0, 21], "parsebool": [0, 45], "parseint": [0, 45], "parser": [11, 22, 42], "parsestr": [0, 45], "part": [22, 31, 39, 116], "particular": [31, 38, 54, 71], "particularli": [22, 42], "partner": 22, "partnumb": 47, "pass": [6, 21, 22, 28, 32, 38, 39, 43, 45, 48, 67, 68, 112, 117], "passiv": 16, "password": [8, 15, 57], "pat": 45, "path": [5, 7, 10, 14, 28, 30, 33, 35, 37, 39, 47, 48, 50, 58, 64, 67, 68, 102, 108], "path1": 33, "path2": 33, "path_lik": 19, "path_to_dl": 7, "pathlib": 64, "pattern": 45, "paus": [22, 33], "pc": [7, 22, 25, 102], "pci": 1, "pci_clk_en": [0, 37], "pcie_1751": 0, "pcolormesh": 62, "pcport": 22, "pd": 15, "pdf": 15, "peak": 33, "peek": 31, "peek_a": [0, 31], "peg": 15, "pei": 15, "pen": 15, "pend": [33, 45], "pep": 33, "pep0": 15, "pep1": 15, "per": [7, 11, 13, 21, 22, 28, 31, 32, 33, 39, 42, 60, 67, 68, 77, 97, 101, 124], "percent": 33, "percentag": [24, 30, 31], "perf_count": 62, "perform": [5, 6, 7, 28, 32, 33, 38, 42, 45, 62, 74, 77, 88, 95, 105, 112, 124], "performing_meas_using_parameters_and_dataset": 110, "period": [0, 7, 15, 22, 31, 33, 38, 42, 67, 68], "period_": [31, 90, 91, 93, 94], "period_end_mark": [0, 31, 79, 90], "period_start_mark": [0, 31, 94], "permiss": 38, "permit": 38, "persist": [6, 7, 30, 75], "persist_on_complet": [30, 75], "persistent_switch_heat": 70, "persistent_switch_heater_en": 23, "person": 38, "pes0": 15, "pes1": 15, "pew": 15, "pf_max_rang": 14, "pf_min_rang": 14, "pgen": 33, "phase": [11, 15, 19, 22, 32, 33, 42, 59, 63, 106, 109, 120, 123, 124], "phase1": 113, "phase2": 113, "phase_offset": 106, "phasemodul": [0, 33], "phi": [67, 68, 75], "photon": 24, "physic": [16, 43, 50, 77, 112], "physik_instrument": 0, "pi": [52, 67, 68, 73, 79, 113], "pick": 42, "picomet": 19, "picosecond": 112, "piezo": [6, 7, 29, 124, 125], "pin": [1, 16], "pin_map": [0, 16], "pip": [32, 60, 125], "pipe": 75, "pixel": [5, 35, 55, 107], "place": [31, 44, 51, 75, 77, 125], "placehold": 31, "plai": 51, "plasma": 89, "plate": 10, "platform": [39, 75], "pleas": [7, 13, 31, 49, 62, 75, 125], "pll": 15, "pll_lmx1_statu": [0, 15, 60], "pll_lmx2_statu": [0, 15, 60], "pll_status_t": [0, 37], "pll_xtal_statu": [0, 15, 60], "pllstatust": [0, 37], "plot": [55, 59, 62, 66, 78, 101, 106, 109, 110, 113, 124], "plot_by_id": [59, 77, 109], "plot_dataset": 110, "plot_titl": 122, "plt": [55, 66, 68, 83, 84, 89, 93, 110, 113, 122], "plu": [53, 55, 59, 63, 64, 75, 76, 89, 102, 108], "plug": [21, 77], "plunger": [98, 99], "plunger2": [82, 88, 95], "plunger3": [82, 88, 95], "plunger4": 95, "pm": [33, 64], "pm1": 33, "pm100d": 0, "pm2": 33, "pm_deviation1": 113, "pm_deviation2": 113, "pm_internal_efile1": 113, "pm_internal_efile2": 113, "pm_internal_freq1": 113, "pm_internal_freq2": 113, "pm_internal_function1": 113, "pm_internal_function2": 113, "pm_internal_source1": 113, "pm_internal_source2": 113, "pm_state1": 113, "pm_state2": 113, "pn": 47, "po": [32, 113], "poin": 33, "point": [0, 11, 22, 28, 30, 31, 32, 33, 36, 42, 45, 51, 71, 75, 79, 85, 92, 102, 106, 109], "point_s11": 59, "point_s12": 59, "point_s21": 59, "point_s22": 59, "point_trigg": 102, "pointer": [7, 20, 22], "pointiq": [0, 11], "pointmagphas": [0, 11], "points_per_read": 68, "points_vna": 122, "poitn": 45, "pol": 33, "polar": [0, 7, 22, 32, 33, 47, 48, 79, 85, 109, 119], "polarity_map": [0, 42], "polarity_output1": 113, "polarity_output2": 113, "pole": 26, "poll": [47, 117], "poll_move_wave_t": [0, 25], "poll_raw_binary_data": [0, 42], "poll_wave_m": [0, 25], "polling_spe": 117, "pool": 31, "pop": 48, "popul": 28, "port": [1, 6, 15, 19, 22, 25, 26, 27, 28, 29, 31, 33, 56, 60, 64, 72, 73, 74, 77, 110, 122], "port_count": [0, 1], "portchannel": [0, 19], "portion": 38, "posibl": 77, "posit": [0, 6, 7, 19, 22, 29, 31, 39, 41, 48, 51, 56, 64, 74, 124], "position": 6, "position_async": 116, "possibl": [6, 7, 15, 32, 33, 39, 45, 55, 65, 75, 77, 102], "post": 39, "post_trigg": 39, "posttrigger_s": 39, "pot": 19, "pow": 33, "power": [0, 2, 3, 6, 7, 8, 13, 15, 21, 23, 24, 30, 31, 33, 47, 50, 53, 59, 60, 63, 73, 75, 77, 102, 108, 120, 121, 122, 124, 125], "power_level": [0, 37, 73], "power_pars": [0, 2], "power_spectral_dens": 53, "powerchannel": [0, 8], "powerlin": 31, "powerline_cycl": [83, 84], "powermet": [17, 47], "pp": [82, 98, 99], "ppi": 1, "pprint": [22, 82, 98, 99, 106], "practic": 63, "practis": 102, "preamplifi": 42, "precis": [19, 32, 75, 120], "precisionmotorchannel": [0, 19], "prefac": 30, "prefer": 64, "prefix": [15, 28], "premad": 28, "prepar": [93, 124, 125], "prepare_trac": [0, 11], "preprocessor": 1, "prescal": [22, 67, 68], "prescale_config": 42, "prescale_map": [0, 42], "prescaler_1gsa": [67, 68], "prescaler_200msa": [67, 68], "prescaler_50msa": [67, 68], "present": [6, 7, 31, 42, 73, 77, 106], "preset": [0, 6, 7, 15], "pressur": [10, 30, 58], "pressure_compressor_inlet": 58, "pressure_compressor_outlet": 58, "pressure_condensation_lin": 76, "pressure_forepump_back": 76, "pressure_mixture_tank": [58, 76], "pressure_vacuum_can": 58, "pressure_venting_lin": 58, "pretrigg": 39, "pretrigger_mems": 39, "pretrigger_s": 39, "pretti": [28, 31, 71, 77], "prettyprint": [82, 98, 99], "prevent": 32, "previou": [29, 31, 67, 68, 77], "print": [5, 9, 15, 22, 26, 31, 35, 39, 48, 53, 54, 55, 56, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 84, 85, 87, 89, 92, 93, 95, 102, 103, 104, 105, 107, 109, 112, 116, 117, 119, 120, 121, 124], "print_dac_voltag": [0, 9], "print_overview": [0, 31, 77], "print_pyvisa_resourc": [0, 15, 60], "print_readable_snapshot": [15, 55, 59, 60, 63, 66, 70, 72, 73, 75, 106, 107, 108, 109, 113, 114, 121], "print_slop": [0, 31, 77], "print_sync": [0, 31, 77], "prior": [7, 42], "privat": [0, 19, 33, 43, 47], "privileg": 1, "prm1z8": [0, 48, 124, 125], "prmz1z8": 47, "prob": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "probabl": [67, 68, 102], "probe_flag": 41, "problem": [39, 102], "proce": 102, "procedur": 38, "process": [0, 39, 40, 75, 98, 112], "produc": [73, 75, 89], "product": [14, 22, 24, 27, 33, 42, 68], "product_serial_numb": [0, 37], "productdescript": [0, 41], "profil": 50, "program": [7, 28, 51, 67, 68, 102, 108, 115], "programm": 21, "progress": 74, "progressbar": 24, "proper": [13, 32], "properli": [43, 45], "properti": [1, 6, 19, 22, 28, 31, 36, 39, 43, 44, 63, 74, 112], "proprietari": [30, 102], "protect": [32, 77], "proteox": [0, 124, 125], "protocol": [32, 75], "provid": [5, 6, 7, 15, 22, 26, 28, 30, 31, 33, 38, 39, 42, 43, 45, 51, 55, 57, 72, 75, 77, 112, 120], "provok": 77, "proxi": [44, 112], "ps_1": [103, 104], "psa": 53, "psd": 2, "pseudo": 99, "psu": [13, 30], "pt": [36, 67, 68], "pt1_head_temperatur": 75, "pt1_plate_temperatur": 75, "pt2_head_temperatur": 75, "pt2_plate_temperatur": 75, "publish": [0, 30, 38], "pul": 77, "pull": 106, "pulm": 33, "puls": [14, 15, 22, 31, 33, 78, 101, 113, 124], "pulse_delay1": 113, "pulse_delay2": 113, "pulse_duty_cycle1": 113, "pulse_duty_cycle2": 113, "pulse_hold1": 113, "pulse_hold2": 113, "pulse_mod_en": 73, "pulse_period1": 113, "pulse_period2": 113, "pulse_r": 14, "pulse_rate_max": 14, "pulse_trans_lead1": 113, "pulse_trans_lead2": 113, "pulse_trans_trail1": 113, "pulse_trans_trail2": 113, "pulse_width": 14, "pulse_width1": 113, "pulse_width2": 113, "pulse_width_max": 14, "pulsegener": [0, 33], "pulsemodul": [0, 33], "pump": 10, "purpos": [11, 38, 45, 50, 77, 106], "push": 42, "put": [30, 31], "putput": 31, "pwm_duty_deviation1": 113, "pwm_duty_deviation2": 113, "pwm_internal_efile1": 113, "pwm_internal_efile2": 113, "pwm_internal_freq1": 113, "pwm_internal_freq2": 113, "pwm_internal_function1": 113, "pwm_internal_function2": 113, "pwm_internal_source1": 113, "pwm_internal_source2": 113, "pwm_state1": 113, "pwm_state2": 113, "pwrst": [0, 41], "pxi": [22, 28, 67, 68, 72], "pxi1": [67, 68], "pxi1slot2": 28, "pxi_clk10": 22, "pxi_en": [0, 37], "pxi_lin": [0, 37], "pxi_trigg": 22, "pxie": [21, 22, 28, 73, 124, 125], "pxie5654": 73, "pxie_2597": [0, 72], "pxie_5654": [0, 73], "py": [6, 28, 33, 60, 62, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 112, 115], "py_head": [0, 39], "pylablib": 24, "pyplot": [55, 66, 68, 83, 84, 89, 93, 110, 113], "pyseri": [6, 98], "pyspcm": 39, "python": [1, 2, 7, 9, 10, 11, 22, 28, 30, 32, 37, 39, 43, 45, 60, 67, 68, 72, 75, 98, 99, 102, 112, 115], "python3": 98, "python38": 115, "pytifi": [0, 39, 40], "pyusb": 60, "pyvisa": [15, 60, 97, 98, 101, 102, 122, 124, 125], "q": [11, 33], "q38": 60, "q_bia": [0, 33], "q_offset": [0, 33], "qblox": [15, 60], "qc": [53, 58, 59, 65, 66, 70, 75, 76, 102, 103, 104, 108, 109, 110, 115, 117, 121, 122], "qcl": 14, "qcode": [1, 2, 3, 4, 6, 9, 10, 11, 14, 15, 16, 18, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 42, 43, 45, 47, 48, 50, 51, 52, 53, 58, 59, 60, 63, 64, 65, 66, 67, 68, 70, 76, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 101, 106, 108, 109, 110, 122, 124], "qcodes_contrib_driv": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "qcodesfork": 62, "qdac": [0, 25, 31, 44, 83, 101, 124], "qdac1": [0, 77, 84, 93], "qdac1_addr": [84, 93], "qdac2": [0, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98], "qdac2_addr": [84, 93], "qdac2_arrai": [0, 84, 93], "qdac2channel": [0, 31], "qdac2externaltrigg": [0, 31], "qdac2trigger_context": [0, 31], "qdac_1": [84, 93], "qdac_2": [84, 93], "qdac_addr": [79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96], "qdac_nam": [0, 31], "qdacchannel": [0, 31], "qdacmultichannelparamet": [0, 31], "qdevil": [0, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 124, 125], "qdevil_qdac": [78, 101, 124], "qswitch": [0, 101, 124], "qswitch_addr": [98, 99], "qtwork": 32, "quad": 7, "quadratur": [0, 6, 7, 123], "quantis": 32, "quantiti": [45, 63, 115], "quantum": [38, 98, 99, 124, 125], "qubit": 72, "qucod": 51, "quench": 124, "quench_current_step_limit": 70, "quench_detect": 70, "queri": [0, 6, 13, 25, 28, 29, 31, 33, 42, 44, 59, 74, 77, 87, 102, 124], "question": [9, 21], "queu": 22, "queue": [22, 31, 75], "quickli": 106, "qutech": 0, "r": [30, 33, 42, 51, 62, 64, 66, 67, 68, 75, 106, 109, 121, 123, 124, 125], "r6": 120, "r_3136b_1": 102, "r_3136b_1_level": 102, "r_dbm": [42, 106], "r_dbm_offset": 106, "r_v": [42, 106], "r_v_offset": 106, "ra": 15, "rack": 32, "rad": [11, 33, 59], "rad_to_deg": [0, 21], "radar": 105, "rai": 55, "rais": [1, 4, 6, 7, 19, 22, 24, 28, 29, 31, 32, 42, 46, 51, 67, 68, 83, 84, 105, 115, 120], "raise_except": 19, "raiseexc": 42, "ram": 22, "ramp": [9, 13, 15, 19, 23, 31, 65, 75, 78, 101, 102, 124], "ramp_seg": 70, "ramp_segments_en": 23, "ramp_slop": 65, "ramp_up": [0, 24], "ramp_voltag": [0, 31, 77], "ramp_voltages_2d": [0, 31, 77], "ramping_st": 70, "ramptim": 31, "rang": [1, 6, 7, 9, 14, 16, 22, 28, 29, 31, 32, 33, 39, 45, 51, 62, 65, 67, 68, 69, 71, 74, 78, 81, 101, 105, 110, 113, 120, 124], "rat": [33, 105], "rate": [13, 14, 17, 19, 22, 23, 28, 31, 32, 39, 42, 43, 47, 71, 75, 77, 106, 112, 113, 124], "rather": 13, "ratio": [0, 33], "ratio_mod": 106, "ration": 105, "raw": [15, 28, 32, 42, 53, 55, 59, 63, 64, 66, 75, 76, 89, 102, 108, 109], "raw_nam": 28, "raw_valu": 115, "rawdata": 42, "rc": 122, "rd": 15, "re": [0, 6, 7, 36, 39, 66, 77, 113, 115], "reach": [6, 7, 9, 24, 38, 42, 48, 70, 116], "reachabl": [7, 30], "read": [0, 1, 4, 6, 7, 11, 15, 22, 23, 28, 30, 31, 32, 33, 39, 42, 45, 55, 56, 63, 68, 70, 75, 78, 101, 104, 105, 107, 109, 115, 116, 117, 124, 125], "read_current_a": 96, "read_fpga": [0, 21, 22], "read_fpga_arrai": [0, 21, 22], "read_mod": 55, "read_pin": [0, 1], "read_port": [0, 1], "read_raw": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "read_termin": 87, "read_timeout": 68, "readabl": [15, 75], "readdon": 68, "readi": [11, 22, 39, 74, 106], "readonli": [6, 33], "readout": [31, 39, 45, 106, 124], "readpoint": 68, "readthedoc": [28, 71], "real": [6, 22, 33, 42], "realli": 113, "rear": 115, "reason": [6, 33, 70, 102], "recal": [0, 45], "recalibr": [48, 116], "receiv": [15, 22, 26, 31, 42, 44, 105], "recent": [115, 122], "reciev": 75, "reclaim": 31, "recogn": 108, "recommend": [13, 51], "record": [31, 39, 42, 75, 78, 98, 101, 124], "recov": 77, "recoveri": [4, 124, 125], "reduc": [22, 67, 68, 120], "ref": [15, 63, 125], "ref_1": [21, 22], "ref_100_pll_ld": [0, 37], "ref_10_pll_ld": [0, 37], "ref_2": 22, "ref_3": 22, "ref_lock": 63, "ref_osc_sourc": [0, 15, 60, 113], "ref_out_select": [0, 37], "refenc": 28, "refer": [6, 7, 13, 15, 22, 28, 31, 32, 49, 60, 62, 67, 68, 77, 109, 125], "refer_to_api_doc": [0, 43, 44], "referenc": 51, "reference_level": 62, "reference_sourc": 106, "reference_tcxo_ocxo": [0, 15, 60], "refriger": 30, "reg": [0, 39], "reg_nam": 22, "regard": 63, "regardless": [6, 22, 73], "regexp": 13, "regist": [7, 10, 22, 28, 30, 39, 42, 43, 44, 77], "register_external_ip": [0, 6, 7], "register_measur": [0, 43, 44, 112], "register_paramet": [59, 77, 110, 122], "registermeasur": 44, "registr": 122, "regul": 54, "reimplement": 4, "reimplementaion": 4, "rel": [6, 7, 29, 74], "relai": [31, 99], "relat": [22, 33], "releas": [0, 21, 22, 41], "release_al": [0, 21, 22], "release_waveform_memori": [0, 21, 22], "relev": [42, 45], "reli": 14, "reload_waveform": [0, 21, 22], "reload_waveform_int16": [0, 21, 22], "rem": 87, "remain": [4, 31], "remam": 125, "rememb": 31, "remot": [0, 8, 30, 32, 42, 59, 125], "remov": [4, 22, 31, 32, 43, 45, 55, 61, 77, 109, 112, 122], "remove_all_measur": [0, 43, 112], "remove_all_virtual_channel": [0, 43, 112], "remove_trac": [0, 31, 79], "rep": 45, "repeat": [22, 57, 61, 87, 95, 107, 113, 118, 119], "repetit": [31, 33, 45, 67, 68, 79, 85, 87, 88, 90, 91, 92, 94, 95, 113], "replac": [22, 33, 51, 77], "repli": [2, 11, 45], "replug": 102, "report": 33, "repositori": [124, 125], "repres": [14, 26, 27, 28, 29, 33, 38, 42, 44, 47, 64, 67, 68, 74, 123], "represent": [1, 6, 31, 33], "reproduc": 112, "request": [6, 22, 32, 33, 42, 117], "request32": [0, 19, 20], "requested_waveform_size_limit": 22, "requir": [1, 6, 7, 11, 14, 15, 22, 26, 28, 31, 32, 33, 43, 50, 51, 58, 60, 63, 75, 117, 121], "required_paramet": 44, "research": [42, 106], "resend": 45, "resend_waveform": [0, 45], "reserv": [22, 31, 106], "reset": [0, 7, 11, 15, 22, 28, 29, 31, 32, 33, 36, 39, 42, 45, 62, 74, 78, 79, 80, 81, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 106, 124], "reset_averag": [0, 11], "reset_channel_phas": [0, 21, 22], "reset_clock_phas": [0, 21, 22], "reset_delai": [0, 29], "reset_devic": 28, "reset_edit_memori": [0, 45], "reset_modul": [0, 42], "reset_multiple_channel_phas": [0, 21, 22], "reset_posit": [0, 6, 7], "reset_voltag": 32, "reshap": 89, "resid": [67, 68], "resist": [31, 45, 83, 84, 115, 124, 125], "resistance_4w": 115, "resistor": [83, 84, 124, 125], "resolut": [0, 7, 32, 62, 75, 120], "resolution_bandwidth": [53, 62], "resolv": 7, "resourc": [1, 5, 6, 9, 18, 19, 22, 27, 28, 31, 33, 35, 42, 43, 47, 48, 50, 72, 73, 124], "resourcemanag": [87, 98], "respect": [1, 7, 22, 38, 43, 45, 50, 77, 121], "respons": [1, 4, 5, 6, 8, 11, 14, 15, 17, 19, 21, 24, 25, 28, 29, 31, 32, 35, 37, 39, 42, 43, 46, 47, 50, 75, 102], "ressourc": 18, "restart": [39, 60, 77, 99, 102], "restor": [22, 99], "restrict": [6, 38, 106], "restyp": 28, "result": [0, 6, 7, 21, 22, 29, 31, 32, 33, 39, 62, 71, 75, 78, 101, 102, 106, 124], "result_pars": [0, 21, 22], "resum": 22, "retr": 33, "retrac": [0, 33], "retriev": [7, 15, 22, 30, 31, 33, 39, 120, 124], "retrieve_data": [0, 39], "retun": [6, 33], "retur": 45, "return": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 50, 51, 67, 68, 72, 74, 77, 106, 109, 112, 114, 115], "return_self": [0, 45], "return_to_start": [0, 37], "returnvalu": 33, "reus": [22, 88], "reusabl": 22, "reuseaddr": 42, "rev": 47, "rev_id": 120, "revers": [0, 19, 31, 47, 48, 64], "revert": 73, "rewrit": 4, "rewritten": [4, 109], "rf": [15, 18, 28, 32, 33, 59, 102, 124, 125], "rf1_lock_mod": [0, 37], "rf1_loop_gain": [0, 37], "rf_center_frequ": 53, "rf_mode": [0, 37, 108], "rf_phase_offset": [0, 37], "rf_power": 122, "rf_sourc": 63, "rf_source_ch1": 63, "rf_source_ch2": 63, "rf_switch": 72, "rfoutput": 15, "rfsg": [0, 124, 125], "rfsgdocument": 28, "rho": 75, "ride": 77, "right": [38, 60, 124], "right_diod": 96, "rigol": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 124, 125], "rigol_addr": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "rigol_dsg3136b": 102, "rigol_dsg3136b_demo_db": 102, "rigol_dsg3136b_demo_experi": 102, "rigolds1074z": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "rigoldsg3136b": 102, "ring": 22, "rise": [0, 6, 7, 22, 33], "rm": [33, 87, 98], "rohd": [33, 103, 104, 105, 124, 125], "rohdeschwarz": [0, 103, 104, 105, 122], "rohdeschwarz_smb100a": [0, 33], "rohdeschwarz_smr40": [0, 33], "rohdeschwarz_smw200a": [0, 33, 105], "rohdeschwarzhmc8041": [0, 33], "rohdeschwarzhmc8042": [0, 33], "rohdeschwarzhmc8043": [0, 33, 103], "rohdeschwarzhmc804xchannel": [0, 33, 34], "rohdeschwarzhmp4030": [0, 33], "rohdeschwarzhmp4040": [0, 33, 104], "rohdeschwarzhmpchannel": [0, 33, 34], "rohe": [124, 125], "ron": 45, "root": 45, "root_instru": [38, 50], "rotat": [0, 6, 7, 19, 47, 48, 74, 124], "rotate_nvalv": [0, 30], "rotationdirect": [0, 47], "round": [32, 75], "round_dac": [0, 32], "rout": [7, 31], "router": 7, "routin": [6, 42, 102], "row": [31, 38], "rs232": 30, "rs232linkformat": 32, "rs_smw200a": 33, "rssi": 15, "rst": [47, 48, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98], "rubric": 21, "run": [0, 1, 6, 7, 11, 15, 21, 22, 24, 31, 33, 38, 42, 44, 46, 51, 56, 59, 62, 67, 68, 73, 75, 77, 79, 81, 85, 86, 87, 90, 91, 92, 94, 96, 106, 109, 110, 113, 122, 124, 125], "run_contin": [0, 11], "run_hour": 24, "run_id": [59, 77, 122], "run_n_tim": [0, 11], "run_self_test": [0, 15, 21, 22, 33, 60], "run_to_field": [0, 30], "run_to_field_wait": [0, 30], "runn": 33, "runtimeerror": [4, 6, 105, 112, 115], "ruo2": 30, "s0": 15, "s11": [11, 59, 122], "s12": [11, 59], "s21": [11, 59], "s22": [11, 59], "s2vn": 59, "s4": 15, "s50": 27, "s5048": 0, "s5i": 0, "s_paramet": 122, "s_trace": 122, "sa": 122, "sa_mod": [0, 33], "safe": [30, 32], "safe_vers": 32, "safeti": [13, 117], "safrequencysweep": [0, 33], "same": [1, 6, 7, 22, 28, 31, 33, 39, 42, 43, 63, 73, 74, 77, 93, 112, 115, 117, 123], "sampl": [0, 22, 28, 32, 39, 42, 51, 62, 67, 68, 71, 75, 82, 88, 95, 102, 106, 110, 114, 122], "sample_nam": [59, 75, 102, 109, 110, 122], "sample_r": 22, "sample_rate_per_channel": 71, "samples_numb": 114, "samples_to_read": [28, 71], "san": 122, "sandpit": 102, "sanu": 36, "sara": 36, "sarah": 33, "satisfi": 60, "save": [0, 5, 6, 7, 31, 36, 42, 45, 50, 53, 55, 59, 63, 64, 75, 76, 89, 102, 108, 122, 124], "save_param": [0, 6, 7], "save_set": [0, 42, 50, 121], "save_trac": 122, "sawt": 33, "sawtooth": [6, 7, 33, 67, 68], "sawtooth_2u": [67, 68], "sawtooth_2us_awg1": [67, 68], "sbench6": 39, "sc": 108, "sc5520a": [37, 108], "sc5520a_uhf": [37, 108], "sc5521a": [0, 37, 124, 125], "scal": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "scale": [0, 22, 31, 50, 79, 106, 113], "scaledparamet": 109, "scan": [6, 28, 31, 33, 45, 56, 71, 78, 97, 101, 124], "scan_lin": 71, "scan_surfac": [28, 71], "scanner": [45, 71, 115], "scatter": 122, "scc001": [0, 47, 48], "scdp_bmp_byte": [0, 36], "schouten": 32, "schwartz": [33, 105], "schwarz": [33, 103, 104, 124, 125], "scipci": [37, 108], "scope": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "scpi": [13, 31, 45, 49, 98, 99, 113], "screen": 36, "screen_dump_bmp": [0, 36], "sd": [0, 22], "sd1": [22, 67, 68], "sd_ain": 68, "sd_ain_triggermod": 22, "sd_awg": [0, 21], "sd_awg_async": [0, 21], "sd_combo": 22, "sd_common": [0, 21], "sd_dig": [0, 21], "sd_digitalfiltermod": 22, "sd_error": 68, "sd_fpgatriggerdirect": 22, "sd_modul": [0, 21], "sd_queuemod": [67, 68], "sd_syncmod": 22, "sd_triggerbehavior": [67, 68], "sd_triggerexternalsourc": [22, 67, 68], "sd_triggermod": [21, 22, 67, 68], "sd_triggerpolar": 22, "sd_wave": 22, "sd_waveshap": [67, 68], "sdg": 0, "sdg_channel": 0, "sdk": 64, "sdx": 0, "search": [7, 19, 48, 125], "search_tcp": 7, "search_usb": 7, "sec": [31, 77], "second": [6, 7, 9, 13, 15, 22, 26, 28, 29, 30, 31, 32, 33, 42, 60, 74, 75, 77, 106, 112, 123], "section": [19, 31, 84, 93], "see": [7, 15, 19, 28, 29, 31, 32, 33, 39, 43, 44, 45, 60, 63, 70, 71, 73, 74, 77, 93, 98, 102, 112, 113], "seem": [39, 102], "seen": 122, "seg_siz": 39, "segment": [7, 23, 39], "select": [6, 7, 19, 22, 29, 33, 38, 46, 64, 107], "select_actu": [0, 6, 7], "self": [6, 15, 18, 19, 22, 24, 28, 30, 31, 33, 38, 42, 43, 45, 46, 106, 115, 124], "self_calibr": [0, 42, 45], "self_test": [0, 42, 45], "sell": 38, "semicolon": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 32, 35, 37, 39, 42, 43, 46, 47, 50], "sen": 33, "send": [0, 6, 15, 20, 24, 29, 30, 31, 32, 38, 42, 45, 46, 73, 106], "send_cmd": [0, 33, 34], "send_messag": [0, 25], "send_pattern": [0, 45], "send_sequ": [0, 45], "send_sequence2": [0, 45], "send_trigg": 106, "send_waveform": [0, 45], "sens": [45, 66, 72, 77, 115], "sense_autorang": 66, "sense_curr": 66, "sense_current_rang": 66, "sense_mod": 66, "sense_resist": 66, "sense_resistance_ocomp": 66, "sense_resistance_rang": 66, "sense_voltag": 66, "sense_voltage_rang": 66, "sensit": [0, 33, 42, 73, 109, 124, 125], "sensitivity_value_map": [0, 42], "sensor": [7, 31, 78, 98, 99, 101, 124], "sensor1": 95, "sensorchannel": [0, 23], "sent": [4, 5, 13, 29, 30, 31, 45, 73, 75, 98], "separ": [1, 5, 6, 8, 13, 14, 15, 17, 19, 20, 21, 24, 25, 28, 29, 30, 31, 32, 35, 37, 39, 42, 43, 46, 47, 50, 51, 74], "seq": 45, "sequecn": 45, "sequenc": [6, 7, 14, 25, 28, 31, 44, 45, 51], "sequence_program": 51, "sequenti": [22, 38], "seri": [16, 22, 43, 45, 63, 102, 124, 125], "serial": [0, 1, 4, 5, 6, 7, 8, 13, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 35, 37, 39, 42, 43, 46, 47, 48, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121], "serial_num": 121, "serial_numb": [0, 5, 22, 35, 47, 48, 50, 62, 117], "serialnumb": 64, "serv": [15, 16], "server": [19, 47, 48, 51, 59, 75, 116, 117, 118, 119], "server32": 20, "server_nam": 39, "servo": 47, "session": [28, 51, 53, 55, 59, 63, 64, 75, 76, 89, 102, 108], "set": [1, 5, 6, 7, 9, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 28, 30, 31, 32, 33, 35, 38, 39, 42, 43, 44, 45, 47, 48, 50, 51, 55, 56, 59, 63, 64, 66, 67, 68, 69, 70, 72, 73, 75, 78, 101, 103, 104, 105, 106, 107, 109, 110, 112, 113, 116, 118, 119, 120, 122, 123, 124, 125], "set_accumulation_cycle_tim": [0, 5], "set_acquisition_mod": [0, 5], "set_address": [0, 6, 18, 33], "set_amplitud": [0, 6, 7], "set_amplitude_control_mod": 7, "set_analog_trigger_mask": [0, 21, 22], "set_asynchron": [0, 21, 22], "set_attribut": [0, 28], "set_axis_output": [0, 6, 7], "set_baud_r": [0, 19], "set_before_sweep": 96, "set_bias_curr": [0, 38], "set_channel_amplitud": [0, 21, 22, 67, 68], "set_channel_frequ": [0, 21, 22], "set_channel_group": [0, 51], "set_channel_offset": [0, 21, 22, 67, 68], "set_channel_or_trigger_set": [0, 39], "set_channel_phas": [0, 21, 22], "set_channel_set": [0, 39], "set_channel_wave_shap": [0, 21, 22, 67, 68], "set_clksys_frequ": [0, 21, 22], "set_clock_frequ": [0, 21, 22], "set_cmd": [5, 6, 11, 15, 19, 24, 28, 42, 44, 46, 75], "set_coupl": [0, 21, 22], "set_curr": [103, 104], "set_current_camera": [0, 5], "set_current_folder_nam": [0, 45], "set_dac_unit": [0, 32], "set_dacs_zero": [0, 9, 32], "set_daq_trigger_delai": [0, 21, 22], "set_daq_trigger_mod": [0, 21, 22], "set_dark_counts_auto_iv": [0, 38], "set_dc_voltag": [0, 6, 7], "set_default": [0, 45], "set_digital_filter_mod": [0, 21, 22], "set_digital_trigger_mod": [0, 21, 22], "set_digital_trigger_sourc": [0, 21, 22], "set_exposure_tim": [0, 5], "set_ext0_or_trigger_set": [0, 39], "set_ext_trig": [0, 33], "set_ext_trigger_behaviour": [0, 21, 22], "set_ext_trigger_sourc": [0, 21, 22], "set_external_step_input_edg": 7, "set_field": [0, 23, 70], "set_filter_mod": [0, 5], "set_fpga_pc_port": [0, 21, 22], "set_frequ": [0, 6, 7], "set_full_scal": [0, 21, 22], "set_grat": [0, 35], "set_hvi_regist": [0, 21, 22], "set_id": [0, 19], "set_imped": [0, 21, 22], "set_ini_param": [0, 19], "set_input_delai": [0, 43], "set_input_trigger_mod": 7, "set_iq_modul": [0, 21, 22], "set_jumpmod": [0, 45], "set_label": [83, 84, 89], "set_magnet_st": [0, 30], "set_magnet_target": [0, 30, 75], "set_magnetic_field_z": 75, "set_marker_config": [0, 21, 22], "set_measurement_period": [0, 38], "set_mix_chamber_heater_mod": [0, 30], "set_mix_chamber_heater_power_rang": [0, 30], "set_mixing_chamber_temperatur": 75, "set_mod": [0, 45], "set_mode_volt_dc": [0, 45], "set_n_cycl": [0, 21, 22], "set_n_point": [0, 21, 22], "set_number_accumul": [0, 5], "set_number_pixel": [0, 35], "set_output_current_target": [0, 30], "set_output_trigger_mod": 7, "set_parameter_bound": [0, 32], "set_pars": [15, 19, 24], "set_persist": [0, 30], "set_pixel_width": [0, 35], "set_points_per_cycl": [0, 21, 22], "set_pol_dacrack": [0, 32], "set_prescal": [0, 21, 22], "set_pulse_paramet": [0, 14], "set_pxi_trigg": [0, 21, 22, 67, 68], "set_raw": [0, 5, 6, 16, 28, 30, 42, 50], "set_read_mod": [0, 5], "set_remote_statu": [0, 30], "set_sequ": [0, 45], "set_setup": [0, 19], "set_setup_filenam": [0, 45], "set_shutt": [0, 5], "set_side_effect": [43, 44], "set_slit": [0, 35], "set_smooth": [0, 42], "set_sweep": [0, 11, 33], "set_sweep_paramet": [0, 42, 106], "set_target_ground": [0, 6, 7], "set_target_posit": [0, 6, 7], "set_target_rang": [0, 6, 7], "set_temp_and_wait": [0, 27], "set_temperatur": [0, 5, 55], "set_test_sign": [0, 43, 112], "set_timeout": [0, 19, 21, 22], "set_to_fast": [0, 30], "set_to_fft": [0, 36], "set_to_slow": [0, 30], "set_trig_mod": [0, 36], "set_trigger_immedi": [0, 45], "set_trigger_io": [0, 21, 22], "set_trigger_level": [0, 38, 43], "set_trigger_mod": [0, 5, 21, 22], "set_trigger_polar": 7, "set_trigger_threshold": [0, 21, 22], "set_v": 77, "set_valu": 28, "set_virtual_voltag": [0, 31, 83, 84, 95], "set_voltag": [0, 42, 103, 104], "set_waveform_limit": [0, 21, 22], "set_waveform_setup": [0, 36], "set_wavelength": [0, 35], "set_xlabel": 89, "set_xtick": [83, 84], "set_ylabel": 89, "set_ytick": [83, 84], "set_zero_offset": [0, 17, 61], "setinputdelai": 43, "setlevel": [67, 68], "setpoint": [6, 11, 23, 24, 27, 38, 42, 45, 69, 72, 77, 106], "setpoint_label": [6, 59], "setpoint_nam": [6, 59], "setpoint_unit": 6, "settabl": [15, 28, 33, 63], "setter": 24, "setter_instr": 102, "settestsign": 43, "settingsonli": 51, "settl": 77, "settriggerlevel": 43, "setup": [5, 19, 36, 39, 55, 67, 68, 74, 77, 106, 124, 125], "setup_multi_record": [0, 39], "seven": 77, "sever": [7, 28, 30, 31, 77], "sg_1": 102, "shall": 38, "shallow": 31, "shamrock": [0, 124, 125], "shamrock_sr750": [0, 35, 107], "shamrockcif": [0, 35], "shap": 33, "shape": [0, 6, 11, 22, 28, 31, 33, 44, 71, 106], "shape_duty_cycl": [0, 33], "shape_period": [0, 33], "shape_width": [0, 33], "share": [7, 22, 67, 68], "shell": 22, "shift": 64, "ship": 64, "short": [42, 68, 77], "short_nam": 72, "shortest": 33, "shot": [22, 31, 42], "should": [1, 5, 6, 13, 18, 19, 22, 24, 28, 29, 30, 33, 35, 38, 42, 43, 45, 46, 50, 51, 63, 64, 68, 70, 72, 73, 75, 77, 102, 103, 104, 106, 121, 125], "show": [24, 68, 73, 75, 77, 83, 84, 110, 117, 125], "show_progress": [24, 75, 96, 102], "shown": [6, 33, 75, 106, 117], "shut": 77, "shut_down": [0, 5], "shutdown": 122, "shutter": 24, "shutter_mod": 55, "shutter_statu": 24, "side": [19, 43, 44, 64], "siglent": 0, "siglent_sdg_2042x": [0, 36], "siglent_sdg_20xx": [0, 36], "siglent_sdg_6022x": [0, 36], "siglent_sdg_60xx": [0, 36], "siglent_sds_120nx": [0, 36], "siglentchannel": [0, 36], "siglentsdgchannel": [0, 36], "siglentsdgx": [0, 36], "siglentsdx": [0, 36], "sign": 6, "signadyn": 22, "signal": [4, 6, 7, 15, 16, 21, 22, 28, 33, 37, 39, 42, 51, 67, 77, 102, 105, 112, 123, 124, 125], "signalcor": [0, 108], "signalrecovery7270": [0, 4, 109], "signatur": [1, 28], "signific": 31, "sigout": [51, 123], "sigout1": 123, "sigout_amplitude0": 123, "sigout_rang": 123, "silent": 51, "sim": [42, 117, 125], "sim900": 42, "sim928": 0, "similar": [30, 32, 45], "similarli": [59, 77], "simpl": [9, 16, 31, 39, 54, 71, 75, 106, 110, 124], "simpli": [22, 43, 74, 106], "simul": [6, 33, 47, 50], "simulaten": 6, "simultan": [6, 22, 31, 51, 71, 78, 101, 106, 124], "simutan": 77, "sin": [67, 68, 79, 113], "sinc": [4, 20, 28, 30, 43, 44, 45, 64, 70], "sine": [0, 15, 31, 33, 60, 67, 68, 86, 97, 101, 124], "sine_awg2": [67, 68], "sine_context": [0, 31], "sine_wav": [0, 31, 86, 90], "sing": [33, 79, 80, 81, 85, 88, 90, 91, 92, 93, 94, 95, 102], "singl": [0, 1, 6, 7, 9, 11, 13, 22, 26, 30, 31, 33, 36, 38, 39, 42, 51, 62, 70, 75, 78, 98, 99, 101, 123, 124, 125], "single_ext_fal": 42, "single_ext_ris": 42, "single_software_trigger_acquisit": [0, 39], "single_software_trigger_acquisition_boxcar": [0, 39], "single_step": [0, 6], "single_ton": 108, "single_trigger_acquisit": [0, 39], "singlequantum": [0, 110], "sinusoid": 22, "site": [60, 62, 115], "situat": [77, 98], "six": [1, 26, 77], "size": [0, 5, 6, 9, 22, 31, 32, 33, 39, 42, 45, 68, 74, 87, 110, 120, 122], "skew": 22, "skip": [25, 31, 44, 77], "sleep": [32, 65, 74, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 102, 106, 116], "slew": [31, 33], "slew_v_": [31, 90, 91, 94], "slice": 77, "slightli": 13, "slit": [19, 64, 107], "slit1": [19, 64], "slit2": 64, "slit_entr": 64, "slit_exit": 64, "slitchannel": [0, 19, 64], "slitnumb": 64, "slope": [31, 77, 81], "slot": [21, 22, 42, 67, 68, 113], "slot_in": 68, "slot_nam": 42, "slow": [25, 29, 30, 31, 44, 74, 77], "slow_chan": [31, 77], "slow_command_timeout": [0, 29], "slow_step": [31, 77], "slow_trigg": 88, "slow_vend": [31, 77], "slow_vstart": [31, 77], "small": [1, 11, 28, 77], "smaller": [7, 22, 32, 42], "smallest": [22, 39], "smart": 8, "smb100a": 0, "smo": 33, "smooth": [33, 78, 101, 124], "smooth_timestep": 42, "smoothli": [31, 42], "smr40": 0, "sms120c": 13, "sms60c": 13, "smu": [45, 124, 125], "smw": [33, 105], "smw200a": [0, 124, 125], "smw200asim": 0, "sn": 6, "sn04": 65, "snake_cas": 43, "snap": [0, 42, 106], "snap_paramet": [0, 42, 106], "snapshot": [0, 15, 25, 31, 42, 44, 51, 60, 75, 124], "snapshot_bas": [0, 25, 31, 43, 44, 51], "snapshot_exclud": 6, "snapshot_get": [6, 25, 31, 44, 46], "snapshot_valu": 6, "snspd": [124, 125], "so": [1, 5, 6, 8, 11, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 42, 43, 46, 47, 50, 51, 71, 77, 99, 102, 106, 112, 113, 116], "socat": 42, "socket": [8, 63, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 120, 124], "softwar": [22, 31, 38, 45, 51, 59, 64, 75, 108, 117, 123], "software_pag": 117, "sole": 44, "solenoid": 75, "solsti": 25, "solut": 14, "som": 62, "some": [5, 6, 7, 13, 15, 28, 39, 42, 55, 60, 67, 68, 73, 75, 77, 98, 105], "some_sampl": 106, "someon": 1, "someth": [28, 31, 42, 98], "sometim": [39, 102], "sorb_temperatur": 75, "sort": 31, "sort_dict": 22, "sour": [33, 79, 80, 81, 82, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 105], "sour1": [33, 105], "sour2": [33, 82], "sour3": 82, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 61, 63, 65, 66, 73, 105, 124, 125], "source_curr": 66, "source_current_compli": 66, "source_current_compliance_trip": 66, "source_current_rang": 66, "source_delai": 66, "source_delay_auto": 66, "source_from_trigg": [79, 85, 90, 94], "source_mod": 66, "source_path": [0, 33], "source_voltag": 66, "source_voltage_compli": 66, "source_voltage_compliance_trip": 66, "source_voltage_rang": 66, "sourcemet": [45, 52], "sp": 36, "sp0": 75, "sp2": [33, 105], "sp4t": 26, "sp4tmodul": [0, 26], "sp6t": 26, "sp6t_modul": 26, "sp6tmodul": [0, 26], "sp8t": 26, "sp8tmodul": [0, 26], "spac": 33, "space": [0, 31, 32, 33, 36, 43, 51, 106], "span": [31, 32, 33, 59, 122, 124], "span_freq": 122, "span_v": [31, 90, 91, 93, 94], "spann": 32, "spanx": 32, "spc_rec_std_multi": 39, "spc_rec_std_singl": 39, "spc_tm_high": 39, "spcerr": [0, 39], "spcm0": 39, "spdt": 26, "spdtmodul": [0, 26], "spe": 64, "special": [15, 33], "specialis": 99, "specialized_paramet": 75, "specif": [1, 5, 6, 16, 19, 22, 28, 30, 31, 32, 35, 43, 44, 50, 56, 65, 73, 105], "specifi": [1, 7, 22, 29, 31, 32, 33, 39, 42, 45, 48, 63, 70, 74, 105, 120], "specifiedta": 45, "specifii": 77, "specifz": 70, "specommand": [0, 19, 20], "specommandiniparam": [0, 19, 20], "specommandsetup": [0, 19, 20], "specontrol": 19, "specontrol_dl": 64, "spectral": [2, 53], "spectromet": [19, 20, 35, 64, 124], "spectrum": [0, 2, 5, 11, 62, 106, 124], "speed": [0, 6, 7, 19, 29], "speed_tabl": [0, 29], "speedmax": 64, "speedmin": 64, "speerror": [0, 19], "speiniparam": 20, "spent": 31, "spesetup": 20, "sphereic": 75, "spi": 32, "spi_rack": 32, "spike": 77, "spirack": 32, "split_version_string_into_compon": [0, 31], "spossibl": 77, "sprout": 24, "spur": 120, "spuriou": [15, 33], "sqcount": [0, 38], "sqtalk": [0, 38], "squar": [0, 15, 22, 31, 33, 80, 86, 93, 97, 101, 124], "square_context": [0, 31], "square_wav": [0, 31, 80, 86, 91, 93], "squid": [28, 71], "sr": [42, 106, 107, 109], "sr560": 42, "sr570": 0, "sr7270": 4, "sr750": [0, 124, 125], "sr844": [0, 106], "sr844_notebook__": 106, "sr_7270": [0, 109], "src": 45, "ss": [15, 36], "ssid": 15, "sst": 82, "stabil": 77, "stabl": 75, "stable_mean": 30, "stable_std": 30, "stablilis": 75, "stage": 124, "stair": 87, "staircas": [0, 31, 77], "stamp": [38, 112], "stand": 46, "standa": [0, 124, 125], "standa_10mwa168": [0, 111], "standard": [1, 5, 6, 8, 13, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 42, 43, 46, 47, 50, 75], "standbi": [0, 27], "standford": 106, "stanford": 42, "stanford_research_system": 106, "stanfordresearchsystem": [0, 106], "star": 33, "start": [0, 1, 6, 7, 9, 11, 21, 22, 28, 29, 30, 31, 32, 33, 39, 42, 43, 44, 45, 48, 53, 55, 59, 63, 64, 67, 68, 71, 73, 75, 76, 77, 79, 82, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 102, 106, 108, 109, 112, 116, 117, 122, 124], "start1": 96, "start_acquisit": [0, 5, 39], "start_al": [0, 31, 79, 80, 86], "start_all_log": [67, 68, 75, 102, 110, 122], "start_auto_mov": [0, 6, 7], "start_awg": [0, 51], "start_continuous_mov": [0, 6, 7], "start_cooldown": [0, 27], "start_delai": 22, "start_for": [0, 43, 44, 112], "start_freq": [62, 122], "start_idx": [0, 36], "start_mark": [0, 31], "start_on": [0, 31, 80, 89], "start_on_extern": [0, 31, 93], "start_once_on": [0, 31], "start_once_on_extern": [0, 31], "start_recording_scpi": [0, 31, 82, 98], "start_single_step": [0, 6, 7], "start_sweep": [0, 33], "start_sweep_trigg": 31, "start_trigg": [0, 31, 39, 93], "start_v": [0, 31, 88, 92, 95], "start_warmup": [0, 27], "startfor": 44, "startup": [0, 11, 21, 22, 31, 32, 33, 56, 77, 105], "stat": [21, 33, 98, 105], "state": [0, 1, 6, 7, 11, 15, 22, 25, 26, 28, 30, 31, 33, 38, 43, 44, 47, 53, 55, 59, 63, 64, 75, 76, 77, 89, 99, 102, 103, 104, 105, 108, 112], "state_a": 26, "state_b": 26, "state_force_upd": [0, 31], "state_output1": 113, "state_output2": 113, "state_to_compressed_list": [0, 31], "state_to_expanded_list": [0, 31], "statement": [32, 106], "static": [7, 15, 21, 22, 31, 42, 51], "station": [15, 22, 42, 67, 68, 72, 75, 77, 102, 110, 124, 125], "statist": [45, 114], "statu": [0, 6, 7, 14, 15, 21, 22, 24, 27, 30, 31, 32, 33, 41, 42, 45, 46, 47, 48, 60, 69, 74, 75, 106, 108, 117, 120, 124], "status": 42, "std": [30, 60], "stddev": 75, "stdev": 114, "stdlib": 1, "stdout": 39, "steadi": 31, "step": [6, 7, 9, 19, 22, 29, 31, 32, 33, 42, 56, 67, 68, 74, 75, 78, 87, 88, 92, 95, 101, 102, 120, 124, 125], "step_amplitude_neg": 74, "step_delai": 74, "step_end_mark": 85, "step_length": [31, 77], "step_on_hw_trig": [0, 37], "step_start_mark": 85, "step_time_": [31, 88], "step_trigg": [31, 88, 95], "stepd": 6, "stepper": [29, 30, 64], "steps_awg1": [67, 68], "stepsiz": [0, 6, 7, 32], "stepsizen": 32, "stepu": 6, "stepw": 6, "still": [10, 30, 32, 33, 74, 75, 77, 98, 117], "still_heater_off": [0, 30], "still_heater_pow": 75, "still_plate_temperatur": 75, "stop": [0, 1, 5, 6, 7, 9, 11, 19, 22, 28, 29, 31, 33, 35, 36, 42, 43, 44, 45, 48, 50, 56, 59, 71, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 113, 116, 117, 122, 124], "stop1": 96, "stop_autom": [0, 27], "stop_awg": [0, 51], "stop_continuous_mov": [0, 6], "stop_freq": 62, "stop_move_wave_t": [0, 25], "stop_v": [0, 31, 92], "stop_wave_m": [0, 25], "stopal": [0, 6], "stopmov": [0, 6, 56], "store": [7, 22, 28, 45, 47, 58, 64, 106, 113], "stp": [6, 56], "str": [2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 48, 50, 51, 71, 75, 109], "stream": 51, "streamingonli": 51, "strin": 2, "string": [1, 2, 4, 5, 6, 7, 8, 11, 14, 15, 16, 17, 19, 21, 24, 25, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 42, 43, 45, 46, 47, 50, 64, 120], "stringarrai": 33, "strip": 4, "strongli": 125, "struct": 28, "structur": [7, 13, 20, 37, 41], "struggl": 75, "sub": [38, 51, 75], "sub_json": [0, 38], "subclass": [1, 5, 6, 19, 24, 28, 29, 33, 35, 38, 43, 46, 50], "subgroup": 75, "subject": 38, "sublicens": 38, "submod": [6, 33], "submodul": [56, 105, 112, 125], "subnet": 15, "subpackag": 125, "subplot": [83, 84, 89, 110], "subprocess": [30, 75], "subscrib": 51, "subscribedonli": 51, "subsequ": [7, 22], "subset": [6, 33], "substanti": 38, "subtract": [6, 31], "succe": 7, "succed": 60, "success": [5, 19, 29, 35, 48, 51], "success_cod": [0, 6, 7], "successfulli": 1, "suit": 33, "suitabl": [5, 6, 28, 32, 33, 38, 42, 45], "sum_pll_ld": [0, 37], "summari": 63, "super": [24, 29, 46, 106], "superconduct": [23, 30, 124, 125], "suppli": [3, 5, 6, 13, 16, 21, 23, 28, 30, 33, 38, 42, 45, 62, 75, 121, 124, 125], "support": [1, 5, 6, 8, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 30, 31, 32, 35, 37, 39, 42, 43, 44, 46, 47, 50, 51, 54, 64, 71, 77, 98, 99, 106, 121, 125], "suppos": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 32, 35, 37, 39, 42, 43, 46, 47, 50], "suppress": [33, 73], "sure": [15, 30, 38, 42, 45, 60, 77, 102, 105, 106, 120], "susceptomet": [28, 71], "susceptometermicroscop": [28, 71], "sw": [116, 118, 119], "sw01": 103, "sw2": 104, "sw_awg_async": 22, "swabian": [43, 124, 125], "swabian_instruments_time_tagg": [0, 112], "swabianinstru": [0, 112], "swap": [0, 33], "swe": 33, "sweep": [11, 15, 30, 31, 32, 33, 50, 59, 62, 63, 74, 75, 82, 88, 89, 95, 97, 101, 106, 110, 122, 124], "sweep_arrai": [42, 106], "sweep_cent": [0, 33], "sweep_context": [0, 31], "sweep_cycl": [0, 37], "sweep_dir": [0, 37], "sweep_direct": 102, "sweep_dwel": [0, 15, 60], "sweep_dwell_tim": [0, 37], "sweep_en": [0, 15, 60], "sweep_execut": 102, "sweep_field": [0, 30, 75], "sweep_frequency_start": 102, "sweep_frequency_stop": 102, "sweep_hold_time1": 113, "sweep_hold_time2": 113, "sweep_mod": [0, 30, 37, 75, 102], "sweep_mode1": 113, "sweep_mode2": 113, "sweep_param": 42, "sweep_point": 102, "sweep_psu_output": [0, 30], "sweep_rat": [30, 75], "sweep_reset": 102, "sweep_return_time1": 113, "sweep_return_time2": 113, "sweep_setpoint": 106, "sweep_shap": 102, "sweep_small_field_step": [0, 30, 75], "sweep_spacing1": 113, "sweep_spacing2": 113, "sweep_span": [0, 33], "sweep_start": [0, 33], "sweep_start_freq": [0, 37], "sweep_start_frequ": 60, "sweep_step_freq": [0, 37], "sweep_step_frequ": 60, "sweep_stop": [0, 33], "sweep_stop_freq": [0, 37], "sweep_stop_frequ": 60, "sweep_tim": 62, "sweep_time1": 113, "sweep_time2": 113, "sweep_trigg": [0, 15, 60, 102], "sweep_typ": 102, "sweeper": 106, "swig": 112, "switch": [0, 6, 7, 9, 22, 26, 30, 31, 32, 45, 47, 48, 50, 74, 77, 98, 99, 112, 115, 117, 122, 124, 125], "switch_ch2": 72, "switch_ch4": 72, "switch_ch5": 72, "switch_ch6": 72, "switch_channel": 72, "switch_com": 72, "switch_main": 72, "switch_qubit": 72, "switchabl": [0, 21, 22], "switchchannel": [0, 28], "swith": 45, "sxx": [11, 124, 125], "sy": [67, 68, 122], "sychron": 21, "symbol": 125, "symmetr": 31, "sync": [0, 7, 22, 31, 33, 43, 78, 93, 101, 124], "sync1": 77, "sync_clk10": 22, "sync_correl": 112, "sync_count_r": 112, "sync_delai": [31, 77], "sync_dur": [31, 77], "sync_mod": 22, "sync_non": 22, "sync_tagg": 112, "synchron": [6, 21, 22, 28, 31, 33, 44, 65, 71, 75, 124], "synchronis": [31, 97, 101, 124], "synchronize_phas": [0, 45], "synchronized_measur": [43, 112], "synchronizedmeasur": [43, 44, 112], "synchronous_delai": 9, "synchronous_en": [9, 65], "synchronous_threshold": 9, "syncmod": 22, "syncron": 22, "synonym": 33, "syntax": 112, "synthes": [15, 18, 49, 120, 124, 125], "synthesizer_mod": [0, 15, 60], "syst": 87, "system": [14, 22, 26, 30, 42, 50, 59, 98, 110, 124, 125], "sztypetonam": [0, 39], "szu": 33, "t": [1, 6, 7, 13, 23, 39, 42, 45, 47, 53, 55, 59, 63, 64, 70, 72, 73, 75, 76, 89, 102, 108, 113, 123], "t0": 42, "t1": 42, "t255p": 46, "t_in_m": 38, "tab": 51, "tabl": [7, 28, 29, 45], "tag": 62, "tagger": [43, 44, 124, 125], "tagger_correlation_1": 112, "tagger_synchronized_measur": 112, "take": [6, 7, 15, 22, 29, 30, 31, 39, 43, 44, 60, 77, 115, 124], "taken": [5, 38, 39, 55, 106], "talk": 42, "tank": 10, "tap": [31, 99], "target": [6, 7, 29, 30, 38, 48, 70, 74, 75, 116], "target_curr": 70, "target_field": 70, "target_ground": 7, "target_point": [28, 71], "target_posit": [0, 6], "target_rang": [0, 6, 7], "task": [0, 21, 22, 28, 71], "tc": 109, "tcp": [7, 42, 75, 98], "tcp_ip_adr": 38, "tcp_ip_port": 38, "tcpip": [79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105], "tcpip0": [59, 63, 103, 113, 115, 120, 122], "tcxo": 15, "tdc001": [0, 48, 119], "tdiv": 36, "te": [29, 30], "teach": 102, "tear": 30, "techniqu": 120, "technologi": [53, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 102, 120], "teh": 77, "tektronix": [0, 66, 114, 124, 125], "tektronix_awg520": [0, 45], "tell": 99, "telnet": 26, "temp": [63, 75], "temp0_0": 77, "temp2_1": 77, "temperatur": [0, 5, 10, 12, 15, 30, 31, 55, 58, 60, 63, 75, 78, 101, 108, 124], "temperature_100mk": 76, "temperature_4k_pl": [58, 76], "temperature_50k_pl": [58, 76], "temperature_magnet": [58, 76], "temperature_mixing_chamb": [58, 76], "temperature_stil": [58, 76], "tempfil": 64, "tempx_i": 77, "ten": 77, "term": 11, "termin": [2, 4, 11, 21, 31, 39, 42, 45, 47, 124], "tesla": [13, 30, 70, 75], "test": [1, 5, 6, 7, 13, 15, 21, 27, 28, 31, 32, 33, 35, 37, 42, 48, 50, 51, 62, 64, 71, 84, 97, 99, 101, 105, 110, 112, 122, 124, 125], "test_copper_mountain": 59, "test_freq_axi": 62, "test_mod": [50, 121], "test_port": 121, "test_send": 45, "test_signal_recovery_7270": 109, "test_start_freq": 62, "test_trac": 62, "testing_coppermountain_driv": 59, "testiv": 77, "text": 31, "textronix": 45, "th": [22, 36], "than": [7, 13, 22, 33, 42, 43, 50, 51, 60, 75, 77, 102], "thandar": 3, "thei": [1, 5, 6, 7, 19, 28, 32, 35, 43, 50, 51, 67, 68, 77, 102, 112, 121], "them": [1, 5, 6, 8, 9, 14, 15, 16, 17, 19, 21, 24, 25, 28, 29, 30, 32, 33, 35, 37, 39, 42, 43, 45, 46, 47, 50, 77, 102, 124], "theoret": 63, "therefor": 74, "thermomet": 30, "thermotek": 0, "thermotek_t255p": 0, "thermotekt255p": [0, 46], "theta": [51, 75, 123], "thi": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 59, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 77, 102, 103, 104, 105, 106, 108, 109, 112, 115, 116, 123, 124, 125], "thing": [6, 33], "thinksr": 42, "third": 26, "thorlab": [0, 124, 125], "thorlab_pm100d": [0, 47], "thorlabs_apt": [0, 47, 48, 116, 118, 119], "thorlabs_k10cr1": [0, 47, 116], "thorlabs_kdc101": [0, 47], "thorlabs_kinesi": 117, "thorlabs_kls1550": [0, 47, 117], "thorlabs_mff10x": [0, 47, 118], "thorlabs_prm1z8": [0, 47, 119], "thorlabs_tdc001": [0, 47], "thorlabsexcept": [0, 47, 48], "thorlabshwtyp": [0, 47, 48], "thorproduct": 47, "those": [7, 22, 25, 31, 44], "though": [1, 5, 6, 8, 13, 14, 15, 17, 19, 21, 24, 25, 28, 29, 32, 35, 37, 39, 42, 43, 46, 47, 50], "thousand": 71, "thread": [0, 21, 22, 32, 38, 75], "three": [6, 30, 31, 77], "thresh": 24, "threshold": [9, 22, 30], "threshold_a": 114, "threshold_b": 114, "threshold_temperatur": 30, "through": [7, 9, 19, 30, 62, 102, 106], "throw": [6, 22, 26, 48, 72, 102], "thrown": 48, "thu": [31, 42], "thurlbi": 3, "tick": [83, 84, 122], "tigger": 22, "tile": [67, 68, 87], "till": 22, "tim": [79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 113], "time": [1, 6, 7, 9, 11, 13, 15, 22, 27, 28, 30, 31, 32, 33, 38, 39, 42, 43, 44, 45, 55, 62, 63, 65, 72, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 106, 110, 113, 114, 116, 124, 125], "time_": [0, 31], "time_arrai": 114, "time_between_read": 30, "time_const": [106, 123], "time_tagg": [0, 43], "time_wait": 98, "timearrai": [0, 38], "timeconst": 109, "timeit": 60, "timemea": 110, "timeout": [6, 11, 19, 22, 27, 28, 29, 42, 44, 45, 47, 59, 60, 63, 64, 66, 70, 75, 102, 106, 109, 113, 114, 122], "timer": 30, "timestamp": [38, 53, 55, 59, 63, 64, 75, 76, 89, 102, 108, 114], "timestat": 114, "timestatist": [0, 45], "timetagg": [0, 43, 44, 112], "timetaggerbas": [43, 44], "timetaggerinstrumentbas": [0, 43, 44], "timetaggermeasur": [0, 43, 44], "timetaggermodul": [0, 43, 44], "timetaggersynchronizedmeasur": [0, 43, 44, 112], "timetaggervirtualchannel": [0, 43, 44], "tint": [82, 87], "titl": [55, 62, 75, 83, 84, 89, 102, 106, 109, 122], "tmod": 82, "to_back": 95, "to_setpoint": [0, 30], "to_zero": [0, 30], "todo": [21, 32], "togeth": [84, 93], "tone": 73, "too": [1, 32], "tool": 98, "tort": 38, "tot": 33, "tot_points_in": 68, "total": [22, 29, 31, 33, 39, 67, 68, 77], "total_depth": [0, 33], "total_devi": [0, 33], "touch": 74, "toward": [10, 30, 37, 58], "trac": 87, "trace": [0, 11, 31, 39, 62, 79, 124], "trace_context": [0, 31], "trace_nam": 31, "traceback": 115, "tracenotreadi": [0, 11], "transfer": 124, "transfer_typ": 62, "transform": [24, 29, 46], "transit": [33, 77], "transition_typ": [0, 33], "transpos": 38, "trapez": 33, "trapez_fal": [0, 33], "trapez_height": [0, 33], "trapez_period": [0, 33], "trapez_ris": [0, 33], "trapezoid": 33, "travel": [7, 29, 74], "treat": [20, 51], "tree": [51, 124], "trg": 31, "trgiomask": 22, "trgpximask": 22, "tri": 102, "tri_waveform": [0, 37], "triangl": [0, 15, 31, 33, 86, 97, 101, 124], "triangle_context": [0, 31], "triangle_period": [0, 33], "triangle_ris": [0, 33], "triangle_wav": [0, 31, 86, 94], "triangular": 22, "trig": [33, 42, 79, 80, 81, 82, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 113], "trig4": 82, "trig_holdoff": 42, "trig_lin": 42, "trig_mod": 39, "trig_out_en": [0, 37], "trig_out_on_cycl": [0, 37], "trig_rat": 42, "trig_single_shot": 42, "trig_thresh": 42, "triger": [67, 68], "trigger": [0, 6, 7, 15, 21, 22, 31, 33, 39, 42, 45, 77, 79, 82, 85, 88, 89, 90, 93, 94, 95, 97, 101, 102, 110, 113, 124], "trigger_behaviour": 22, "trigger_count": 66, "trigger_fal": [67, 68], "trigger_imped": [0, 33], "trigger_level": 110, "trigger_level_mv": 38, "trigger_map": [0, 42], "trigger_mod": [0, 21, 22, 33, 55, 67, 68, 113], "trigger_or_mask": 39, "trigger_out": [0, 31, 93], "trigger_pxi1": [67, 68], "trigger_slop": 113, "trigger_sourc": [22, 59, 66, 113], "trigger_tim": 113, "triggerdown": [0, 6], "triggermod": [0, 36], "triggerup": [0, 6], "triton": [0, 124, 125], "true": [5, 6, 7, 9, 15, 22, 23, 24, 25, 28, 30, 31, 32, 35, 38, 39, 42, 44, 45, 48, 50, 51, 53, 55, 57, 59, 60, 62, 63, 64, 65, 66, 68, 70, 73, 75, 76, 77, 83, 84, 89, 92, 96, 102, 106, 108, 109, 110, 112, 113, 114, 117, 120, 121, 122], "truncat": 51, "try": [67, 68, 72, 75, 77, 112, 115], "tst001": [0, 47, 48], "tt": [43, 44, 112], "ttl": 73, "ttyacm0": 98, "ttyp": 33, "ttys0": 98, "ttyusb0": 42, "tudelft": 32, "tunabl": 14, "tune": [14, 32, 120], "tupl": [5, 6, 7, 9, 11, 14, 20, 28, 30, 31, 36, 42, 45, 48, 51], "turn": [6, 8, 15, 26, 30, 31, 51, 54, 55, 59, 64, 69, 73, 83, 84, 99, 102, 103, 104, 124], "turret": 64, "tutorial_exp": [62, 75], "two": [6, 11, 28, 30, 31, 33, 42, 51, 57, 63, 74, 77, 84, 88, 89, 93, 95, 96, 106, 115, 123, 124, 125], "txt": 32, "typ": 5, "type": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 19, 21, 22, 24, 25, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 50, 60, 68, 75, 112, 124], "typeerror": 115, "typevalid": [0, 43, 44], "typic": [6, 77], "u": [33, 63, 67, 68, 70, 113], "u00b0c": 15, "u_posit": 41, "ua": 110, "uc8": [29, 124, 125], "ucurposit": [0, 41], "ucurspe": [0, 41], "uid": 120, "ultra": 14, "ultrasigma": 102, "unact": 75, "unassign": 77, "unavail": 1, "unblock": 9, "unc": 33, "uncertainti": 42, "unchang": 77, "undefin": [1, 72], "under": [75, 99, 117, 122, 125], "underli": [24, 29, 44, 46, 98], "undisturb": 77, "undon": 22, "unfortun": 64, "unground": 99, "uni": 32, "unidirect": 13, "unina": 122, "union": [37, 41], "uniqu": 13, "unit": [0, 6, 7, 9, 11, 15, 19, 21, 22, 23, 24, 31, 32, 42, 55, 57, 61, 69, 70, 74, 75, 77, 106, 107, 109, 112, 119, 123], "univers": 102, "unknown": [4, 22, 42], "unlik": 72, "unlock": [15, 30, 33], "unmodul": 73, "unplug": 102, "unrecogn": 1, "unregister_measur": [0, 43, 44, 112], "unregistermeasur": 44, "unti": 23, "until": [6, 9, 22, 23, 30, 31, 48, 56, 60, 74, 75, 105, 116], "unus": [13, 30], "up": [6, 7, 8, 15, 20, 22, 29, 31, 32, 33, 42, 48, 56, 60, 72, 73, 77, 82, 89, 105, 106, 108, 109, 115, 117, 120, 124], "updat": [7, 11, 15, 25, 30, 31, 33, 38, 39, 42, 44, 45, 51, 59, 60, 63, 66, 70, 73, 77, 108, 109, 110, 113, 114, 121, 125], "update_ch_unit": [0, 42], "update_curr": [31, 77], "update_lin_trac": [0, 11], "update_trac": [0, 33], "update_unit": [0, 42], "update_units_if_constant_sample_r": [0, 42], "upgrad": 109, "upload": [15, 21, 22, 45, 51, 67, 68, 124], "upload_sequence_program": [0, 51], "upload_waveform": [0, 21, 22, 45, 51, 67, 68, 113], "uploader_readi": [0, 21, 22], "upon": [19, 42], "uposit": [0, 41], "upper": [7, 24], "upt": 120, "uptim": 62, "upto": 33, "upwr": [0, 41], "us": [1, 4, 5, 6, 7, 9, 11, 13, 15, 16, 18, 19, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 35, 38, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 60, 62, 67, 68, 69, 70, 72, 73, 74, 77, 93, 96, 101, 109, 112, 113, 120, 123, 125], "usag": [6, 30, 32, 33, 39, 45, 78, 100, 101, 105, 124, 125], "usb": [6, 7, 13, 28, 53, 56, 65, 71, 74, 98, 99, 102, 104, 115], "usb0": [53, 102, 109, 114], "usbmodem14101": [15, 99], "use_gpib": 30, "use_lock": 32, "user": [1, 30, 33, 42, 45, 51, 53, 55, 59, 60, 62, 63, 64, 65, 75, 76, 77, 89, 102, 106, 108, 109, 113, 115], "user1": [45, 113], "user2": 45, "user3": 45, "user4": 45, "userspublicdocumentsn": 28, "userwarn": 62, "usual": [13, 16, 28, 31, 60, 112], "util": [15, 30, 59, 62, 67, 68, 96, 106, 109, 115], "uusb": [0, 41], "v": [6, 7, 9, 13, 15, 22, 31, 32, 33, 36, 38, 39, 45, 54, 60, 65, 66, 70, 77, 102, 106, 109, 113, 114, 120, 123], "v0": 109, "v1": [60, 102, 103, 104, 109, 114], "v2": [74, 109], "v3": [0, 6, 109], "v4": [0, 6, 109], "v5": 109, "v6": 109, "v7": 109, "v8": 109, "v9": 109, "v_endlist": 31, "v_inter_delai": 9, "v_mode": 109, "v_post_delai": 9, "v_startlist": 31, "v_step": 9, "vac": 6, "vacuum": 10, "val": [2, 15, 22, 24, 33, 45, 106], "val_map": [15, 19, 24, 46], "valid": [0, 6, 7, 10, 15, 30, 32, 33, 39, 43, 44, 45, 50, 58, 72, 106], "valid_path": 58, "valid_typ": 44, "valon": [0, 124, 125], "valon5015": [0, 49, 120], "valon_5015": [0, 120], "valu": [0, 1, 5, 6, 7, 9, 11, 13, 15, 19, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 42, 44, 45, 47, 48, 50, 51, 55, 59, 60, 63, 64, 66, 68, 70, 72, 73, 75, 77, 79, 105, 106, 107, 108, 109, 113, 114, 115, 117, 121], "value_sensitivity_map": [0, 42], "valueerror": [31, 32, 72, 77], "values_v": [0, 31], "valv": 30, "var": 33, "vari": 6, "variabl": [6, 7, 13], "variou": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 32, 35, 37, 39, 42, 43, 46, 47, 50, 64], "vaunix": [0, 124, 125], "vaunix_lda": [0, 50, 121], "vbat": 120, "vc": 112, "vcl": [30, 76], "vcl2csv": [0, 30], "vcl_2_ascii_convert": 30, "vdiv": 36, "ve": 77, "vector": [30, 33, 38, 105, 124, 125], "veloc": [48, 116], "velocity_max": 116, "veloctii": 48, "vendor": [0, 1, 4, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 32, 35, 37, 39, 42, 43, 46, 47, 50, 55, 59, 60, 63, 66, 70, 72, 73, 74, 75, 106, 107, 108, 109, 113, 114, 121], "vent": 10, "ver": [6, 63], "ver1": 106, "verbos": [0, 5, 21, 22, 25, 31, 35, 39, 41, 47, 48], "veri": [28, 31, 42, 77, 112], "verifi": 70, "versa": 33, "version": [0, 1, 5, 6, 7, 13, 14, 15, 17, 21, 22, 24, 27, 28, 30, 31, 32, 33, 42, 45, 47, 48, 64, 75, 116, 118, 119, 120], "versionnumb": 64, "vertic": 55, "vhigh_ihigh": [0, 31, 77], "vhigh_ilow": [0, 31, 77], "vi": 22, "vi_error_tmo": 102, "via": [7, 22, 26, 30, 31, 42, 45, 67, 68, 74, 75, 77, 98, 99, 104, 115], "vice": 33, "victor": 15, "vid": 33, "video": [33, 62], "video_bandwidth": [53, 62], "video_polar": [0, 33], "viewsoftwarepag": 117, "vireal64": 28, "virtual": [31, 43, 44, 97, 101, 124], "virtual_detun": [0, 31, 88, 95], "virtual_sweep": [0, 31, 88], "virtual_sweep2d": [0, 31, 82, 88, 89, 95], "virtual_sweep_context": [0, 31], "virtual_voltag": [0, 31], "virtualchannel": [43, 44], "visa": [1, 5, 6, 8, 9, 11, 14, 15, 17, 18, 19, 21, 23, 24, 25, 28, 29, 31, 32, 33, 35, 37, 39, 42, 43, 45, 46, 47, 50, 72, 74, 77, 87, 124], "visa_handl": [15, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "visa_typ": 0, "visainstru": [2, 3, 4, 6, 9, 11, 12, 13, 15, 17, 18, 21, 23, 24, 29, 30, 31, 32, 33, 36, 42, 45, 46, 47, 49, 52], "visaioerror": [102, 105, 120], "visalib": [6, 18, 33, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "visess": 28, "visibl": [73, 77], "visit": 15, "vistatu": 28, "vl446": 65, "vlow_ilow": [0, 31, 77], "vmax": [83, 84], "vmin": [83, 84], "vna": [11, 59, 98, 99, 122], "vna_frequ": 59, "vna_pow": 122, "vna_s11_magnitud": 59, "vna_s11_phas": 59, "vnarstafuri": 122, "vnegirneac": 15, "vnx_atten": [50, 121], "vnx_atten64": [50, 121], "volt": [7, 9, 22, 32, 33, 42, 45, 66, 82, 87, 89, 115], "volt_": 42, "voltag": [0, 6, 7, 9, 15, 22, 28, 31, 32, 33, 39, 42, 45, 54, 60, 65, 66, 70, 71, 73, 78, 80, 83, 84, 88, 97, 101, 103, 104, 109, 113, 115, 124], "voltage_0": 71, "voltage_4": 71, "voltage_amplitude1": 113, "voltage_amplitude2": 113, "voltage_concurrent1": 113, "voltage_concurrent2": 113, "voltage_dc": 115, "voltage_high": 45, "voltage_high1": [45, 113], "voltage_high2": 113, "voltage_limit": 70, "voltage_limit_high1": 113, "voltage_limit_high2": 113, "voltage_limit_low1": 113, "voltage_limit_low2": 113, "voltage_low": 45, "voltage_low1": [45, 113], "voltage_low2": 113, "voltage_offset1": 113, "voltage_offset2": 113, "voltage_out": 54, "voltage_set": 54, "voltage_unit1": 113, "voltage_unit2": 113, "voltagedict": 42, "vp": 33, "vpp": 113, "vrm": [30, 75], "w": [24, 45, 61, 67, 68, 75, 122], "wa": [1, 6, 22, 28, 42, 43, 48, 51, 61, 63, 64, 70, 71, 106], "wagen": [6, 33], "wai": [6, 25, 31, 44, 45, 65, 72, 73, 102, 106], "wait": [0, 6, 9, 11, 22, 23, 24, 29, 30, 31, 33, 39, 42, 45, 48, 56, 67, 68, 75, 77, 98, 116], "wait_fast": 106, "wait_for_acquisit": [0, 5], "wait_readi": [0, 39], "wait_stabl": [0, 27], "wait_trigg": 45, "wait_until_don": 71, "wait_until_field_depersist": [0, 30], "wait_until_field_persist": [0, 30], "wait_until_field_st": [0, 30, 75], "wait_until_finish": [0, 43, 44, 112], "wait_until_temperature_stable_std_control": [0, 30, 75], "wait_upload": [0, 21, 22], "waitmov": [0, 6, 56], "waituntilfinish": 44, "wamp": 75, "want": [1, 21, 22, 25, 28, 31, 38, 44, 51, 70, 72, 75, 102, 109, 123], "warmup": [3, 124], "warmup_heat": 54, "warn": [1, 7, 9, 24, 28, 51], "warning_cod": [0, 6, 7], "warning_statu": 24, "warnings_as_error": 51, "warranti": 38, "watt": [54, 117, 120], "wav": 31, "wave": [22, 31, 39, 51, 67, 68, 73, 93, 97, 101, 124], "wave1": [21, 22], "wave2": 22, "wave3": 22, "wave_info": 51, "wave_nam": 51, "wave_numb": [0, 21, 22], "wave_s": 22, "wave_shap": 22, "waveform": [0, 6, 15, 21, 22, 31, 33, 36, 45, 51, 86, 93, 97, 101, 105, 124], "waveform_data_a": 22, "waveform_data_b": 22, "waveform_fil": 22, "waveform_numb": 22, "waveform_object": 22, "waveform_ref": 22, "waveform_size_limit": 22, "waveform_to_csv": [0, 51], "waveform_to_wav": [0, 51], "waveform_typ": 22, "waveformrefer": [0, 21, 22], "waveformsetup": [0, 36], "wavelength": [14, 35, 107, 124], "wbst": 33, "we": [1, 5, 6, 8, 11, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 31, 32, 35, 37, 39, 42, 43, 46, 47, 50, 55, 57, 61, 62, 63, 65, 69, 70, 72, 73, 74, 77, 102, 105, 106, 107, 112, 113, 118, 119, 125], "web": 51, "websit": 102, "websocket": 75, "websq": 110, "websqcontrolqcod": [0, 38, 110], "well": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 30, 32, 35, 37, 39, 42, 43, 46, 47, 50, 70, 75, 77, 103, 104, 112, 115, 125], "wf": [22, 45, 113, 121], "wfm": 45, "wfs1": 45, "wfs2": 45, "wfsu": 36, "what": [42, 75], "whatev": 123, "wheel": [47, 48, 119], "when": [1, 6, 7, 13, 22, 28, 29, 30, 31, 32, 33, 37, 39, 42, 48, 51, 73, 75, 78, 99, 101, 102, 121, 124], "where": [6, 7, 11, 21, 22, 28, 30, 31, 32, 38, 42, 45, 51, 67, 68, 77, 98, 115], "whether": [22, 23, 28, 30, 31, 38, 42], "which": [1, 6, 7, 9, 10, 11, 15, 18, 21, 22, 24, 28, 29, 30, 31, 33, 38, 39, 42, 43, 45, 47, 48, 50, 51, 62, 63, 64, 70, 72, 73, 77, 83, 84, 98, 99, 106, 112, 116, 117, 125], "whichev": 42, "while": [1, 6, 9, 33, 68, 74, 77, 113, 116, 120, 125], "whom": 38, "whose": 42, "why": [75, 77], "wid": 33, "wide": 105, "wideband": [0, 33], "wideband_fm": [15, 60], "widt": [33, 82], "width": [0, 7, 14, 15, 31, 33, 35, 64, 107], "width_": [31, 79, 85, 90, 94], "wifi": 15, "wifi_gateway_address": [0, 15, 60], "wifi_hotspot_password": [0, 15, 60], "wifi_hotspot_ssid": [0, 15, 60], "wifi_ip_address": [0, 15, 60], "wifi_mod": [0, 15, 60], "wifi_off": [0, 15], "wifi_on": [0, 15], "wifi_rssi": [0, 15, 60], "wifi_station_password": [0, 15, 60], "wifi_station_ssid": [0, 15, 60], "wifi_subnet_address": [0, 15, 60], "wil": 22, "win32": 1, "windll": [5, 35, 48], "window": [14, 39, 50, 75, 121], "windst": [0, 41], "wire": 115, "wish": [6, 18, 33], "within": 33, "without": [28, 33, 38, 75, 77, 95, 106, 116], "witin": 77, "won": 75, "word": [22, 64], "work": [6, 7, 11, 21, 22, 28, 32, 33, 39, 45, 50, 70, 71, 73, 74, 75, 87, 102, 105, 121, 125], "work_hour": [0, 24], "working_frequ": 121, "working_frequnci": 121, "would": [6, 20, 22, 31, 102], "wrap": [5, 6, 22, 24, 28, 29, 31, 33, 38, 42, 43, 45, 46, 112], "wrap_dll_funct": [0, 28], "wrap_dll_function_check": [0, 28], "wrapper": [5, 6, 7, 11, 16, 28, 30, 32, 33, 35, 48, 116, 117], "write": [0, 1, 4, 6, 13, 15, 19, 22, 24, 28, 29, 31, 32, 33, 42, 46, 51, 71, 79, 80, 81, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 105, 109, 125], "write_binary_valu": 87, "write_channel": [0, 29, 31], "write_channel_float": [0, 31], "write_float": [0, 31], "write_fpga": [0, 21, 22], "write_fpga_arrai": [0, 21, 22], "write_modul": [0, 42], "write_period": 77, "write_pin": [0, 1], "write_port": [0, 1], "write_raw": [0, 4, 6, 15, 24, 29, 46, 109], "write_termin": 87, "write_text": 64, "written": [22, 28, 51, 71], "wrong": [6, 39, 67, 68, 115], "wrong_chassi": [67, 68], "www": [16, 27, 33, 42, 47, 108, 117], "x": [5, 24, 30, 31, 42, 51, 55, 64, 75, 77, 87, 89, 106, 109, 122, 123], "x00": [4, 109], "x64": [14, 37, 108], "x8": 39, "x86": [67, 68], "x_feild_valu": 75, "x_field_valu": 75, "x_label": 122, "x_offset": 106, "x_pixel": [0, 5], "xlabel": [55, 62, 75, 102, 106, 109, 122], "xtal": 15, "xtick": 122, "xy": 109, "y": [5, 30, 31, 42, 51, 75, 77, 87, 106, 109, 122, 123], "y_field_valu": 75, "y_label": 122, "y_offset": 106, "y_pixel": [0, 5], "yaml": 72, "year": [0, 37], "yet": [6, 31, 33, 112], "yield": 42, "ylabel": [55, 62, 75, 102, 106, 109, 122], "you": [6, 7, 18, 21, 22, 25, 30, 31, 33, 38, 42, 44, 60, 62, 72, 73, 75, 77, 98, 99, 102, 103, 104, 106, 109, 116, 123, 124, 125], "your": [1, 5, 6, 8, 14, 15, 17, 19, 21, 24, 25, 28, 29, 32, 35, 37, 39, 42, 43, 46, 47, 50, 68, 73, 75, 98, 102, 105, 106, 108, 110, 125], "yourself": 98, "ytick": 122, "z": [22, 30, 75], "z_field_valu": 75, "zea": [6, 7, 33], "zero": [6, 7, 9, 19, 22, 29, 30, 31, 32, 48, 61, 64, 67, 68, 75, 77, 116], "zero_offset": 48, "zero_offset_en": 61, "zero_posit": [0, 29, 74], "zeros_awg1": [67, 68], "zeros_awg2": [67, 68], "zhinst": 51, "zi": [51, 123], "zihdawg8": 0, "zilistenum": 51, "zipython": 51, "ztm": 0, "zurich": [51, 124, 125], "zurichinstru": [0, 123], "zvl": 122, "zvl13": [0, 124, 125], "zvl_s_trace": 122, "zvl_trace": 122, "zvl_zvl_frequenc": 122, "\u00b5": [7, 42, 60], "\u03b8": [42, 106], "\u03bcm": 107, "\u03bcv": 106}, "titles": ["qcodes_contrib_drivers.drivers package", "qcodes_contrib_drivers.drivers.Advantech package", "qcodes_contrib_drivers.drivers.Agilent package", "qcodes_contrib_drivers.drivers.AimTTi package", "qcodes_contrib_drivers.drivers.Ametek package", "qcodes_contrib_drivers.drivers.Andor package", "qcodes_contrib_drivers.drivers.Attocube package", "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib package", "qcodes_contrib_drivers.drivers.Aviosys package", "qcodes_contrib_drivers.drivers.Bilt package", "qcodes_contrib_drivers.drivers.BlueFors package", "qcodes_contrib_drivers.drivers.CopperMountain package", "qcodes_contrib_drivers.drivers.Cryocon package", "qcodes_contrib_drivers.drivers.Cryogenic package", "qcodes_contrib_drivers.drivers.DaylightSolutions package", "qcodes_contrib_drivers.drivers.ERAInstruments package", "qcodes_contrib_drivers.drivers.GeneralMicrowave package", "qcodes_contrib_drivers.drivers.Gentec package", "qcodes_contrib_drivers.drivers.Holzworth package", "qcodes_contrib_drivers.drivers.Horiba package", "qcodes_contrib_drivers.drivers.Horiba.private package", "qcodes_contrib_drivers.drivers.Keysight package", "qcodes_contrib_drivers.drivers.Keysight.SD_common package", "qcodes_contrib_drivers.drivers.Lakeshore package", "qcodes_contrib_drivers.drivers.LighthousePhotonics package", "qcodes_contrib_drivers.drivers.M2 package", "qcodes_contrib_drivers.drivers.Minicircuits package", "qcodes_contrib_drivers.drivers.MontanaInstruments package", "qcodes_contrib_drivers.drivers.NationalInstruments package", "qcodes_contrib_drivers.drivers.Newport package", "qcodes_contrib_drivers.drivers.OxfordInstruments package", "qcodes_contrib_drivers.drivers.QDevil package", "qcodes_contrib_drivers.drivers.QuTech package", "qcodes_contrib_drivers.drivers.RohdeSchwarz package", "qcodes_contrib_drivers.drivers.RohdeSchwarz.private package", "qcodes_contrib_drivers.drivers.Shamrock package", "qcodes_contrib_drivers.drivers.Siglent package", "qcodes_contrib_drivers.drivers.SignalCore package", "qcodes_contrib_drivers.drivers.SingleQuantum package", "qcodes_contrib_drivers.drivers.Spectrum package", "qcodes_contrib_drivers.drivers.Spectrum.py_header package", "qcodes_contrib_drivers.drivers.Standa package", "qcodes_contrib_drivers.drivers.StanfordResearchSystems package", "qcodes_contrib_drivers.drivers.SwabianInstruments package", "qcodes_contrib_drivers.drivers.SwabianInstruments.private package", "qcodes_contrib_drivers.drivers.Tektronix package", "qcodes_contrib_drivers.drivers.Thermotek package", "qcodes_contrib_drivers.drivers.Thorlabs package", "qcodes_contrib_drivers.drivers.Thorlabs.private package", "qcodes_contrib_drivers.drivers.Valon package", "qcodes_contrib_drivers.drivers.Vaunix package", "qcodes_contrib_drivers.drivers.ZurichInstruments package", "qcodes_contrib_drivers.drivers.physik_instrumente package", "Example with the Agilent N9000A", "Example notebook for AimTTi EL320P", "Qcodes example with Andor DU401 BU2", "QCoDeS example with Attocube ANC300", "Qcodes example with Aviosys IP Power 9258S", "Example with the BlueFors", "Example with CopperMountain Model M5180 vector network analyzer", "Example with ERASynth", "QCoDeS Example with Gentec Maestro", "QCoDeS Example with HP8594E", "Example notebook for the Holzworth HS900B RF synthesizer", "Example for Horiba FHR", "Example with the iTest from Bilt", "Example notebook for Keithley 6430 SMU", "Keysight M3202A AWG", "Keysight M3202A AWG example with digitizer", "Qcodes example with Lakeshore 311", "Example with Lakeshore Model 625 Superconducting Magnet power supply", "National Instruments Multifunction DAQ example", "Qcodes example for National Instruments PXIe-2597 RF Switch", "Qcodes example with the NI RFSG signal generator driver", "QCoDeS Example with Newport AG-UC8 Piezo Motion Controller", "Proteox system integration with QCoDeS", "Example of the oxford triton driver", "QCoDeS Example with QDevil_QDAC", "QCoDeS examples of how to use QDAC-I", "QDAC-II arbitrary-waveform generator", "QDAC-II trigger chaining", "QDAC-II constant voltage", "QDAC-II debugging", "Gate Leakage Test", "Gate Leakage using multiple QDAC-IIs", "QDAC-II voltage lists", "QDAC-II multiple generators per channel", "PyVisa direct use of QDAC-II", "QDAC-II 1D &amp; 2D scan", "QDAC-II 2D diode scan", "QDAC-II sine waves", "QDAC-II square waves", "QDAC-II voltage sweep", "Synchronise multiple QDAC-IIs", "QDAC-II triangle waves", "QDAC-II virtual gates", "QDAC-II 2D diode scan", "QCoDeS examples of how to use QDAC-II", "QSwitch debugging", "QSwitch usage", "QCoDeS examples of how to use QSwitch", "QDevil drivers", "QCoDeS example with Rigol DSG3136B", "QCoDeS Example with R&amp;S HMC 8043 Power Supply", "QCoDeS Example with R&amp;S HMP4040 Power Supply", "QCoDeS example with Rohe&amp;Schwarz SMW200A", "Changing the Sensitivity", "Qcodes example with Shamrock SR750", "Example with the microwave source SC5521A from Signal Core", "Example of Signal Recovery 7270 driver usage", "Example for Single Quantum SNSPD", "Qcodes example with Standa 10MWA168", "Qcodes example with Swabian Instruments Time Tagger", "Tektronix AFG3000 series arbitrary function generator", "overview over all parameters", "QCoDeS Example with Tektronix Keithley Digital Multimeter DMM6500", "Qcodes example with Thorlabs K10CR1", "QCoDeS example with Thorlabs KLS1550 laser source", "Qcodes example with Thorlabs MFF10x", "Qcodes example with Thorlabs PRM1Z8", "QCoDeS example with Valon 5015", "Qcodes example for Vaunix LDA step attenuator", "Rohde &amp; Schwarz ZVL13 Vector Network Analyzer example", "Zurich Instruments HF2LI example", "Examples of how to use drivers", "Welcome to QCoDeS Contributed Drivers\u2019s documentation!"], "titleterms": {"": [70, 102, 103, 104, 125], "100k": 66, "10mwa168": 111, "1d": [88, 102], "2000": 115, "2597": 72, "2d": [75, 77, 88, 89, 96], "311": 69, "4": 54, "5015": 120, "625": 70, "6430": 66, "7270": 109, "8043": 103, "9258": 57, "The": [56, 77], "accumul": 55, "acquisit": [55, 122], "activ": 115, "address": [61, 77], "advantech": 1, "afg": 113, "afg3000": [45, 113], "ag": 74, "ag_uc8": 29, "agil": [2, 53], "agilent_n9000a": 2, "aimtti": [3, 54], "alias": 72, "all": [57, 114], "amc100": 6, "ametek": 4, "amplitud": 73, "an": [102, 113], "analog": 73, "analyz": [59, 122], "anc300": [6, 56], "anc300sim": 6, "anc350": 6, "anc350lib": 7, "andor": [5, 55], "anm150": 56, "apt": 48, "arbitrari": [79, 113], "arrang": 99, "asrl": 61, "asynchron": 116, "attenu": 121, "attocub": [6, 7, 56], "autosav": 99, "aviosi": [8, 57], "awg": [67, 68], "awg520": 45, "axi": 56, "basic": [77, 102], "between": 77, "bilt": [9, 65], "bluefor": [10, 54, 58], "branch": 125, "bu2": 55, "buffer": 106, "calibr": [61, 107], "captur": 68, "card": 115, "cc": 48, "center": 62, "certain": 116, "chain": 80, "chang": [77, 106, 107, 118, 119], "channel": [72, 77, 86, 112, 121], "check": [70, 115], "clean": 116, "close": [55, 57, 61, 69, 73, 102, 107, 118, 119, 121], "cmts5048": 0, "commun": 60, "configur": [68, 69], "connect": [59, 72, 98, 102, 108, 109, 115], "constant": 81, "content": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 125], "contrib": 125, "contribut": 125, "control": [56, 74, 75, 77], "convers": 70, "coppermountain": [11, 59], "core": 108, "cryocon": 12, "cryocon_26": 12, "cryogen": 13, "cryogenicsms120c": 13, "cryostat": 27, "cs580": 42, "current": [70, 77, 107, 118, 119], "d4": 32, "d5a": 32, "daq": [28, 71], "daqanaloginput": 71, "daqanalogoutput": 71, "data": 68, "daylightsolut": 14, "db": [59, 109], "debug": [82, 98], "dec": 75, "default": 125, "definit": 122, "detect": 70, "devic": [59, 108, 109], "dg645": 42, "differ": 72, "digit": [68, 115], "diod": [89, 96], "direct": 87, "disconnect": 117, "dll_wrapper": 28, "dmm6500": 115, "do2d": 75, "document": 125, "driver": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 73, 75, 76, 77, 101, 109, 124, 125], "dsg3136b": 102, "du401": [5, 55], "el320p": [3, 54], "enqueu": [67, 68], "equip": 56, "erainstru": 15, "erasynth": [15, 60], "exampl": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 97, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "experi": 102, "f1d": 32, "fca3100": 45, "fhr": 64, "fhr_client": 20, "fhr_server": 20, "field": 70, "frequenc": [60, 73], "from": [65, 108], "function": 113, "gate": [83, 84, 95], "gener": [67, 68, 73, 79, 86, 113], "generalmicrowav": 16, "gentec": [17, 61], "gentec_maestro": 17, "get": [61, 107, 125], "gm349": 16, "h2py": 40, "have": 70, "heater": [54, 69], "hf2li": [51, 123], "hmc": 103, "hmc8041": 33, "hmc8042": 33, "hmc8043": 33, "hmc804x": 34, "hmp": 34, "hmp2020": 33, "hmp2030": 33, "hmp4030": 33, "hmp4040": [33, 104], "holzworth": [18, 63], "home": 116, "horiba": [19, 20, 64], "horiba_fhr": 19, "how": [78, 97, 100, 124], "hp8594e": 62, "hs900": 18, "hs9008b": 18, "hs900b": 63, "i": [54, 56, 78, 125], "ii": [79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "ilm200": 30, "import": [53, 58, 65, 76], "indic": 125, "initi": [55, 57, 61, 69, 73, 107, 111, 115, 116, 118, 119, 121, 122], "initial": [53, 65], "initialis": [77, 117], "instal": 125, "instrument": [53, 55, 57, 58, 61, 65, 69, 71, 72, 73, 76, 102, 107, 111, 112, 118, 119, 121, 122, 123], "integr": 75, "interfac": 7, "ip": 57, "ip_power_9258": 8, "ips120": 30, "itest": [9, 65], "its": 61, "ivvi": 32, "k": 54, "k10cr1": [47, 116], "kdc101": 47, "keithlei": [66, 115], "keithley_2000_scan": 45, "keithley_2700": 45, "keithley_6430": 45, "keithley_6500": 45, "kelvinox": 30, "keysight": [21, 22, 67, 68], "keysight_e36313a": 21, "keysight_e8267d": 21, "keysight_j7211": 21, "keysight_m3201a": 21, "keysight_m3300a": 21, "kinesi": 48, "kls1550": [47, 117], "l": 48, "label": 59, "lakeshor": [23, 69, 70], "laser": [61, 117], "lda": [50, 121], "leakag": [83, 84], "let": 70, "licens": 125, "lighthouse_photonics_sprout_g": 24, "lighthousephoton": 24, "list": 85, "load": [53, 58, 65, 76], "look": [59, 70], "m2": 25, "m2_solstis_3": 25, "m2j": 32, "m3202a": [21, 67, 68], "m4i": 39, "m5180": [11, 59], "maestro": 61, "magnet": [70, 75], "main": [114, 125], "mani": 121, "manipul": 99, "measur": [53, 59, 65, 66, 75, 106, 112, 115], "measurer": [59, 109], "memory_manag": 22, "mercuri": 52, "mff10x": [47, 118], "microwav": 108, "minicircuit": 26, "mircat": 14, "mode": [55, 60, 77, 102, 122], "model": [59, 70, 121], "model_331": 23, "model_625": 23, "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 73], "monitor": 99, "montanainstru": 27, "more": [62, 77], "motion": 74, "move": 116, "multifunct": 71, "multimet": 115, "multipl": [77, 84, 86, 93], "n9000a": 53, "name": [59, 72], "nation": [71, 72], "nationalinstru": 28, "network": [59, 122], "newport": [29, 74], "ni": 73, "ni_dll_instru": 28, "non": 106, "notebook": [54, 63, 66], "now": 125, "number": 99, "off": 117, "omega": 66, "one": 77, "other": 70, "output": [77, 113, 117], "over": 114, "overview": [77, 114], "oxford": 76, "oxfordinstru": 30, "packag": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "paramet": [59, 70, 76, 77, 102, 108, 114, 121, 122], "pcie_1751": 1, "per": 86, "perform": [60, 115], "phase": 73, "physik_instrument": 52, "piezo": 74, "plot": [68, 77, 122], "pm100d": 47, "posit": [116, 118, 119], "power": [54, 57, 61, 70, 103, 104, 117], "prepar": 106, "prerequisit": 125, "print": 72, "privat": [20, 34, 44, 48], "prm1z8": [47, 119], "proteox": [30, 75], "puls": [73, 77], "pxie": 72, "pxie_2597": 28, "pxie_5654": 28, "py_head": 40, "pyvisa": 87, "qcode": [55, 56, 57, 61, 62, 69, 72, 73, 74, 75, 77, 78, 97, 100, 102, 103, 104, 105, 107, 111, 112, 115, 116, 117, 118, 119, 120, 121, 125], "qcodes_contrib_driv": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "qdac": [77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "qdac1": 31, "qdac2": 31, "qdac2_arrai": 31, "qdevil": [31, 101], "qdevil_qdac": 77, "qswitch": [31, 98, 99, 100], "quantum": 110, "quench": 70, "queri": 115, "qutech": 32, "r": [103, 104], "ramp": [70, 77], "rang": 77, "rate": 70, "read": [57, 61, 69, 77, 106, 118, 119], "readout": 76, "record": 77, "recoveri": 109, "reg": 40, "reset": 77, "resist": 66, "resistor": 66, "resourc": 116, "result": [68, 77], "retriev": 68, "rf": [63, 72, 73], "rfsg": [28, 73], "right": 61, "rigol": 102, "rohd": 122, "rohdeschwarz": [33, 34], "rohe": 105, "rotat": 116, "run": [60, 102], "s5048": 11, "s5i": 32, "save": 121, "sc5521a": 108, "scan": [55, 77, 88, 89, 96, 102, 115], "schwarz": [105, 122], "sd": 36, "sd_awg": 22, "sd_awg_async": 22, "sd_common": 22, "sd_dig": 22, "sd_modul": 22, "sdg": 36, "sdg_channel": 36, "sdx": 36, "self": 60, "sensit": 106, "sensor": 77, "seri": 113, "set": [57, 60, 61, 62, 65, 77, 102, 108, 117, 121], "setup": [59, 102, 107, 109], "shamrock": [35, 107], "siglent": 36, "signal": [68, 73, 108, 109], "signalcor": 37, "sim928": 42, "simpl": 115, "simultan": 77, "sine": 90, "singl": [55, 77, 110], "singlequantum": 38, "smb100a": 33, "smooth": 77, "smr40": 33, "smu": 66, "smw200a": [33, 105], "smw200asim": 33, "snapshot": [55, 72, 73, 107], "snspd": 110, "socket": 57, "sourc": [108, 117], "span": 62, "spcerr": 40, "spectromet": 107, "spectrum": [39, 40, 55, 122], "squar": 91, "sr570": 42, "sr750": [35, 107], "sr844": 42, "sr_7270": 4, "stage": 54, "standa": [41, 111], "standa_10mwa168": 41, "stanfordresearchsystem": 42, "start": [62, 125], "station": [59, 109, 122], "statu": 57, "step": [77, 121], "stop": [62, 73], "submodul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "subpackag": [0, 6, 19, 21, 33, 39, 43, 47], "superconduct": 70, "suppli": [54, 70, 103, 104], "swabian": 112, "swabian_instruments_time_tagg": 43, "swabianinstru": [43, 44], "sweep": [60, 92, 102], "switch": [28, 72], "sxx": 59, "sync": 77, "synchron": 112, "synchronis": 93, "synthes": 63, "system": 75, "tabl": 125, "tagger": 112, "take": [55, 73, 107], "tdc001": 47, "tektronix": [45, 113, 115], "temperatur": [69, 77], "termin": 115, "test": [56, 59, 60, 83, 102, 109], "thermotek": 46, "thermotek_t255p": 46, "thi": 54, "thorlab": [47, 48, 116, 117, 118, 119], "time": 112, "time_tagg": 44, "trace": [59, 122], "transfer": 62, "triangl": 94, "trigger": [67, 68, 80, 106], "triton": [30, 76], "turn": [57, 60, 117], "two": [56, 114], "type": 62, "uc8": 74, "up": [102, 116], "upload": 113, "us": [54, 61, 75, 78, 84, 87, 97, 100, 102, 106, 115, 124], "usag": [77, 99, 109, 114], "v3": 7, "v4": 7, "valon": [49, 120], "valon_5015": 49, "vaunix": [50, 121], "vector": [59, 122], "virtual": [95, 112], "visa": 75, "visa_typ": 28, "voltag": [77, 81, 85, 92], "warmup": 54, "wave": [90, 91, 94], "waveform": [67, 68, 79, 113], "wavelength": 61, "welcom": 125, "when": 77, "zihdawg8": 51, "ztm": 26, "zurich": 123, "zurichinstru": 51, "zvl13": [33, 122]}})